<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1">this is my long string</data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        [base64 mime encoded serialized .NET Framework object]
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        [base64 mime encoded string representing a byte array form of the .NET Framework object]
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.BasicSalesReport" xml:space="preserve">
    <value>

#Region "theme"
            'create a custom theme.
            Dim themes As New Themes
            Dim theme As ITheme = themes.Add("testTheme")
            theme.ThemeColorScheme(ThemeColor.Light1).RGB = Color.FromArgb(255, 255, 255)
            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.FromArgb(0, 0, 0)
            theme.ThemeColorScheme(ThemeColor.Light2).RGB = Color.FromArgb(255, 255, 255)
            theme.ThemeColorScheme(ThemeColor.Dark2).RGB = Color.FromArgb(0, 0, 0)
            theme.ThemeColorScheme(ThemeColor.Accent1).RGB = Color.FromArgb(140, 198, 63)
            theme.ThemeColorScheme(ThemeColor.Accent2).RGB = Color.FromArgb(242, 116, 45)
            theme.ThemeColorScheme(ThemeColor.Accent3).RGB = Color.FromArgb(106, 159, 207)
            theme.ThemeColorScheme(ThemeColor.Accent4).RGB = Color.FromArgb(242, 192, 45)
            theme.ThemeColorScheme(ThemeColor.Accent5).RGB = Color.FromArgb(146, 98, 174)
            theme.ThemeColorScheme(ThemeColor.Accent6).RGB = Color.FromArgb(121, 198, 199)
            theme.ThemeColorScheme(ThemeColor.Hyperlink).RGB = Color.FromArgb(106, 159, 207)
            theme.ThemeColorScheme(ThemeColor.FollowedHyperlink).RGB = Color.FromArgb(146, 98, 74)
            theme.ThemeFontScheme.Major(FontLanguageIndex.Latin).Name = "Garamond"
            theme.ThemeFontScheme.Minor(FontLanguageIndex.Latin).Name = "Garamond"

            'assign the custom theme for workbook.
            workbook.Theme = theme
#End Region

#Region "NameStyle"
            'Change built-in custom styles.
            Dim style_Title = workbook.Styles("Title")
            style_Title.Font.ThemeFont = ThemeFont.Major
            style_Title.Font.Size = 26
            style_Title.Font.Bold = True
            style_Title.Font.ThemeColor = ThemeColor.Light1
            style_Title.IncludeAlignment = False
            style_Title.IncludeFont = True
            style_Title.IncludeBorder = False
            style_Title.IncludeNumber = False
            style_Title.IncludePatterns = False
            style_Title.IncludeProtection = False

            Dim style_Normal = workbook.Styles("Normal")
            style_Normal.HorizontalAlignment = HorizontalAlignment.General
            style_Normal.VerticalAlignment = VerticalAlignment.Center
            style_Normal.Font.ThemeFont = ThemeFont.Minor
            style_Normal.Font.Size = 9
            style_Normal.Font.ThemeColor = ThemeColor.Dark1
            style_Normal.IncludeAlignment = True
            style_Normal.IncludeFont = True
            style_Normal.IncludeBorder = True
            style_Normal.IncludeNumber = True
            style_Normal.IncludePatterns = True
            style_Normal.IncludeProtection = True
#End Region

#Region "Worksheet_DataInput"
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Name = "Data Input"

            'hide worksheet gridlines.
            worksheet.SheetView.DisplayGridlines = False

#Region "RowHeightColumnWidth"
            worksheet.StandardHeight = 18.75
            worksheet.StandardWidth = 8.43
            worksheet.Range("1:1").RowHeight = 51.75
            worksheet.Range("2:2").RowHeight = 20.25
            worksheet.Range("3:87").RowHeight = 19
            worksheet.Range("A:A").ColumnWidth = 2.28515625
            worksheet.Range("B:B").ColumnWidth = 16.85546875
            worksheet.Range("C:C").ColumnWidth = 20.5703125
            worksheet.Range("D:D").ColumnWidth = 27.7109375
            worksheet.Range("E:E").ColumnWidth = 17.7109375
            worksheet.Range("F:F").ColumnWidth = 18.140625
            worksheet.Range("G:G").ColumnWidth = 2.28515625
#End Region

#Region "Values"
            worksheet.Range!B1.Value = "DATA INPUT"
#End Region

#Region "Table"
            worksheet.Range("B2:F87").Value = New Object(,) {
                {"DATE", "PRODUCT", "CUSTOMER", "AMOUNT", "QUARTER"},
                {
                    #1/1/2012#,
                    "Product 14",
                    "Fabrikam, Inc.",
                    1886,
                    "QUARTER 1"
                },
                {
                    #1/3/2012#,
                    "Product 23",
                    "Alpine Ski House",
                    4022,
                    "QUARTER 1"
                },
                {
                    #1/4/2012#,
                    "Product 18",
                    "Coho Winery",
                    8144,
                    "QUARTER 1"
                },
                {
                    #1/7/2012#,
                    "Product 10",
                    "Southridge Video",
                    8002,
                    "QUARTER 1"
                },
                {
                    #1/11/2012#,
                    "Product 7",
                    "Coho Winery",
                    6392,
                    "QUARTER 1"
                },
                {
                    #1/25/2012#,
                    "Product 1",
                    "Contoso, Ltd",
                    6444,
                    "QUARTER 1"
                },
                {
                    #1/30/2012#,
                    "Product 27",
                    "Southridge Video",
                    2772,
                    "QUARTER 1"
                },
                {
                    #2/4/2012#,
                    "Product 30",
                    "City Power &amp; Light",
                    8674,
                    "QUARTER 1"
                },
                {
                    #2/5/2012#,
                    "Product 16",
                    "A. Datum Corporation",
                    2332,
                    "QUARTER 1"
                },
                {
                    #2/8/2012#,
                    "Product 21",
                    "Alpine Ski House",
                    5370,
                    "QUARTER 1"
                },
                {
                    #2/10/2012#,
                    "Product 6",
                    "City Power &amp; Light",
                    1768,
                    "QUARTER 1"
                },
                {
                    #2/17/2012#,
                    "Product 24",
                    "Coho Winery",
                    5474,
                    "QUARTER 1"
                },
                {
                    #2/22/2012#,
                    "Product 28",
                    "Fabrikam, Inc.",
                    3494,
                    "QUARTER 1"
                },
                {
                    #2/24/2012#,
                    "Product 22",
                    "City Power &amp; Light",
                    1484,
                    "QUARTER 1"
                },
                {
                    #2/29/2012#,
                    "Product 26",
                    "Humongous Insurance",
                    5454,
                    "QUARTER 1"
                },
                {
                    #3/1/2012#,
                    "Product 15",
                    "City Power &amp; Light",
                    2306,
                    "QUARTER 1"
                },
                {
                    #3/8/2012#,
                    "Product 9",
                    "A. Datum Corporation",
                    8652,
                    "QUARTER 1"
                },
                {
                    #3/14/2012#,
                    "Product 16",
                    "Alpine Ski House",
                    3594,
                    "QUARTER 1"
                },
                {
                    #3/31/2012#,
                    "Product 28",
                    "City Power &amp; Light",
                    9130,
                    "QUARTER 1"
                },
                {
                    #4/3/2012#,
                    "Product 28",
                    "Southridge Video",
                    9986,
                    "QUARTER 2"
                },
                {
                    #4/9/2012#,
                    "Product 2",
                    "Fabrikam, Inc.",
                    8270,
                    "QUARTER 2"
                },
                {
                    #4/10/2012#,
                    "Product 30",
                    "A. Datum Corporation",
                    5184,
                    "QUARTER 2"
                },
                {
                    #4/11/2012#,
                    "Product 25",
                    "Contoso, Ltd",
                    9426,
                    "QUARTER 2"
                },
                {
                    #4/11/2012#,
                    "Product 15",
                    "Humongous Insurance",
                    4012,
                    "QUARTER 2"
                },
                {
                    #4/15/2012#,
                    "Product 28",
                    "Coho Winery",
                    7724,
                    "QUARTER 2"
                },
                {
                    #5/3/2012#,
                    "Product 21",
                    "Northwind Traders",
                    2264,
                    "QUARTER 2"
                },
                {
                    #5/4/2012#,
                    "Product 30",
                    "Coho Winery",
                    9374,
                    "QUARTER 2"
                },
                {
                    #5/5/2012#,
                    "Product 17",
                    "Humongous Insurance",
                    3692,
                    "QUARTER 2"
                },
                {
                    #5/5/2012#,
                    "Product 28",
                    "Humongous Insurance",
                    9124,
                    "QUARTER 2"
                },
                {
                    #5/19/2012#,
                    "Product 22",
                    "Humongous Insurance",
                    4962,
                    "QUARTER 2"
                },
                {
                    #5/22/2012#,
                    "Product 8",
                    "A. Datum Corporation",
                    9166,
                    "QUARTER 2"
                },
                {
                    #5/31/2012#,
                    "Product 16",
                    "Coho Winery",
                    5610,
                    "QUARTER 2"
                },
                {
                    #6/2/2012#,
                    "Product 8",
                    "City Power &amp; Light",
                    3322,
                    "QUARTER 2"
                },
                {
                    #6/2/2012#,
                    "Product 3",
                    "Humongous Insurance",
                    2592,
                    "QUARTER 2"
                },
                {
                    #6/4/2012#,
                    "Product 13",
                    "Contoso, Ltd",
                    4444,
                    "QUARTER 2"
                },
                {
                    #6/9/2012#,
                    "Product 10",
                    "Southridge Video",
                    7166,
                    "QUARTER 2"
                },
                {
                    #6/12/2012#,
                    "Product 13",
                    "Fabrikam, Inc.",
                    5008,
                    "QUARTER 3"
                },
                {
                    #6/26/2012#,
                    "Product 2",
                    "Contoso, Ltd",
                    3578,
                    "QUARTER 3"
                },
                {
                    #6/29/2012#,
                    "Product 22",
                    "Southridge Video",
                    1144,
                    "QUARTER 3"
                },
                {
                    #7/2/2012#,
                    "Product 14",
                    "Alpine Ski House",
                    3696,
                    "QUARTER 3"
                },
                {
                    #7/6/2012#,
                    "Product 14",
                    "Coho Winery",
                    7084,
                    "QUARTER 3"
                },
                {
                    #7/6/2012#,
                    "Product 2",
                    "City Power &amp; Light",
                    4642,
                    "QUARTER 3"
                },
                {
                    #7/8/2012#,
                    "Product 5",
                    "Fabrikam, Inc.",
                    6078,
                    "QUARTER 3"
                },
                {
                    #7/10/2012#,
                    "Product 9",
                    "Alpine Ski House",
                    2394,
                    "QUARTER 3"
                },
                {
                    #7/15/2012#,
                    "Product 13",
                    "Southridge Video",
                    5516,
                    "QUARTER 3"
                },
                {
                    #7/16/2012#,
                    "Product 8",
                    "Fabrikam, Inc.",
                    1948,
                    "QUARTER 3"
                },
                {
                    #7/19/2012#,
                    "Product 28",
                    "Contoso, Ltd",
                    7280,
                    "QUARTER 3"
                },
                {
                    #7/29/2012#,
                    "Product 26",
                    "A. Datum Corporation",
                    9292,
                    "QUARTER 3"
                },
                {
                    #8/19/2012#,
                    "Product 26",
                    "Fabrikam, Inc.",
                    5868,
                    "QUARTER 3"
                },
                {
                    #8/19/2012#,
                    "Product 6",
                    "Northwind Traders",
                    4098,
                    "QUARTER 3"
                },
                {
                    #8/20/2012#,
                    "Product 13",
                    "A. Datum Corporation",
                    1270,
                    "QUARTER 3"
                },
                {
                    #8/20/2012#,
                    "Product 23",
                    "A. Datum Corporation",
                    7744,
                    "QUARTER 3"
                },
                {
                    #8/24/2012#,
                    "Product 2",
                    "Humongous Insurance",
                    5488,
                    "QUARTER 3"
                },
                {
                    #8/24/2012#,
                    "Product 5",
                    "Southridge Video",
                    6944,
                    "QUARTER 3"
                },
                {
                    #8/25/2012#,
                    "Product 20",
                    "Fabrikam, Inc.",
                    4454,
                    "QUARTER 3"
                },
                {
                    #8/27/2012#,
                    "Product 13",
                    "City Power &amp; Light",
                    7100,
                    "QUARTER 3"
                },
                {
                    #8/30/2012#,
                    "Product 8",
                    "Humongous Insurance",
                    4346,
                    "QUARTER 3"
                },
                {
                    #9/1/2012#,
                    "Product 25",
                    "Alpine Ski House",
                    2032,
                    "QUARTER 3"
                },
                {
                    #9/17/2012#,
                    "Product 20",
                    "Contoso, Ltd",
                    2328,
                    "QUARTER 3"
                },
                {
                    #9/22/2012#,
                    "Product 18",
                    "Humongous Insurance",
                    6090,
                    "QUARTER 3"
                },
                {
                    #9/25/2012#,
                    "Product 19",
                    "Coho Winery",
                    8344,
                    "QUARTER 3"
                },
                {
                    #9/29/2012#,
                    "Product 11",
                    "Alpine Ski House",
                    5872,
                    "QUARTER 3"
                },
                {
                    #9/30/2012#,
                    "Product 25",
                    "Humongous Insurance",
                    1578,
                    "QUARTER 3"
                },
                {
                    #10/2/2012#,
                    "Product 29",
                    "City Power &amp; Light",
                    1714,
                    "QUARTER 4"
                },
                {
                    #10/5/2012#,
                    "Product 11",
                    "Fabrikam, Inc.",
                    5716,
                    "QUARTER 4"
                },
                {
                    #10/6/2012#,
                    "Product 21",
                    "Coho Winery",
                    8244,
                    "QUARTER 4"
                },
                {
                    #10/14/2012#,
                    "Product 11",
                    "A. Datum Corporation",
                    8888,
                    "QUARTER 4"
                },
                {
                    #10/14/2012#,
                    "Product 23",
                    "City Power &amp; Light",
                    9438,
                    "QUARTER 4"
                },
                {
                    #11/9/2012#,
                    "Product 14",
                    "Southridge Video",
                    6230,
                    "QUARTER 4"
                },
                {
                    #11/13/2012#,
                    "Product 17",
                    "A. Datum Corporation",
                    4278,
                    "QUARTER 4"
                },
                {
                    #11/17/2012#,
                    "Product 6",
                    "Alpine Ski House",
                    5438,
                    "QUARTER 4"
                },
                {
                    #11/22/2012#,
                    "Product 1",
                    "Coho Winery",
                    6728,
                    "QUARTER 4"
                },
                {
                    #11/25/2012#,
                    "Product 30",
                    "Fabrikam, Inc.",
                    9992,
                    "QUARTER 4"
                },
                {
                    #11/25/2012#,
                    "Product 26",
                    "Northwind Traders",
                    8462,
                    "QUARTER 4"
                },
                {
                    #11/27/2012#,
                    "Product 11",
                    "Contoso, Ltd",
                    7930,
                    "QUARTER 4"
                },
                {
                    #11/30/2012#,
                    "Product 30",
                    "Northwind Traders",
                    8136,
                    "QUARTER 4"
                },
                {
                    #12/2/2012#,
                    "Product 13",
                    "Humongous Insurance",
                    6212,
                    "QUARTER 4"
                },
                {
                    #12/5/2012#,
                    "Product 3",
                    "Contoso, Ltd",
                    4946,
                    "QUARTER 4"
                },
                {
                    #12/5/2012#,
                    "Product 3",
                    "Southridge Video",
                    8554,
                    "QUARTER 4"
                },
                {
                    #12/10/2012#,
                    "Product 24",
                    "Northwind Traders",
                    4508,
                    "QUARTER 4"
                },
                {
                    #12/21/2012#,
                    "Product 7",
                    "Humongous Insurance",
                    7300,
                    "QUARTER 4"
                },
                {
                    #12/24/2012#,
                    "Product 17",
                    "Fabrikam, Inc.",
                    8292,
                    "QUARTER 4"
                },
                {
                    #12/26/2012#,
                    "Product 26",
                    "Alpine Ski House",
                    9782,
                    "QUARTER 4"
                },
                {
                    #1/3/2013#,
                    "Product 19",
                    "Fabrikam, Inc.",
                    8024,
                    "QUARTER 1"
                },
                {
                    #1/4/2013#,
                    "Product 22",
                    "A. Datum Corporation",
                    3758,
                    "QUARTER 1"
                }
            }
            Dim table_Data As ITable = worksheet.Tables.Add(worksheet.Range("B2:F87"), True)

            'set built-in table style for table.
            table_Data.TableStyle = workbook.TableStyles("TableStyleMedium2")

            'customize table header range's style.
            table_Data.HeaderRange.HorizontalAlignment = HorizontalAlignment.Left
            table_Data.HeaderRange.IndentLevel = 1
            table_Data.HeaderRange.VerticalAlignment = VerticalAlignment.Center
            table_Data.HeaderRange.Font.Size = 11

            'customize table each column's data body range's style.
            table_Data.Columns(0).DataBodyRange.HorizontalAlignment = HorizontalAlignment.Left
            table_Data.Columns(0).DataBodyRange.IndentLevel = 1
            table_Data.Columns(0).DataBodyRange.VerticalAlignment = VerticalAlignment.Center
            table_Data.Columns(1).DataBodyRange.HorizontalAlignment = HorizontalAlignment.Left
            table_Data.Columns(1).DataBodyRange.IndentLevel = 1
            table_Data.Columns(1).DataBodyRange.VerticalAlignment = VerticalAlignment.Center
            table_Data.Columns(2).DataBodyRange.HorizontalAlignment = HorizontalAlignment.Left
            table_Data.Columns(2).DataBodyRange.IndentLevel = 1
            table_Data.Columns(2).DataBodyRange.VerticalAlignment = VerticalAlignment.Center
            table_Data.Columns(3).DataBodyRange.HorizontalAlignment = HorizontalAlignment.Right
            table_Data.Columns(3).DataBodyRange.IndentLevel = 1
            table_Data.Columns(3).DataBodyRange.VerticalAlignment = VerticalAlignment.Bottom
            table_Data.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"
            table_Data.Columns(4).DataBodyRange.HorizontalAlignment = HorizontalAlignment.Left
            table_Data.Columns(4).DataBodyRange.IndentLevel = 1
            table_Data.Columns(4).DataBodyRange.VerticalAlignment = VerticalAlignment.Bottom
#End Region

#Region "Slicers"
            'create slicer caches.
            Dim cache_customer As ISlicerCache = workbook.SlicerCaches.Add(table_Data, "CUSTOMER", "CUSTOMER")
            Dim cache_product As ISlicerCache = workbook.SlicerCaches.Add(table_Data, "PRODUCT", "PRODUCT")

            'create slicers.
            Dim slicer_customer As ISlicer = cache_customer.Slicers.Add(worksheet, "CUSTOMER", "CUSTOMER", 51.914015748031495, 551, 144, 190)
            Dim slicer_product As ISlicer = cache_product.Slicers.Add(worksheet, "PRODUCT", "PRODUCT", 51.914015748031495, 691, 144, 190)

            'assign built-in slicer style for slicers.
            slicer_customer.Style = workbook.TableStyles("SlicerStyleDark1")
            slicer_product.Style = workbook.TableStyles("SlicerStyleDark1")
#End Region

#Region "Style"
            worksheet.Range("1:1").Style = workbook.Styles("Title")
            worksheet.Range("1:1").Interior.ThemeColor = ThemeColor.Accent1
            worksheet.Range("1:1").HorizontalAlignment = HorizontalAlignment.Left
            worksheet.Range("1:1").IndentLevel = 1
            worksheet.Range("1:1").VerticalAlignment = VerticalAlignment.Center
            worksheet.Range!A1.Style = workbook.Styles("Normal")
#End Region

#End Region

#Region "Worksheet_CustomizableReport"
            Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            worksheet2.Name = "Customizable Report"
            worksheet2.SheetView.DisplayGridlines = False

#Region "RowHeightColumnWidth"
            worksheet2.StandardHeight = 16.5
            worksheet2.StandardWidth = 8.43
            worksheet2.Range("1:1").RowHeight = 51.75
            worksheet2.Range("2:116").RowHeight = 14.25
            worksheet2.Range("A:A").ColumnWidth = 2.28515625
            worksheet2.Range("B:B").ColumnWidth = 23.140625
            worksheet2.Range("C:C").ColumnWidth = 15.5703125
            worksheet2.Range("D:F").ColumnWidth = 11.42578125
            worksheet2.Range("G:H").ColumnWidth = 13.42578125
#End Region

#Region "Values"
            worksheet2.Range!B1.Value = "SALES REPORT"
#End Region

#Region "PivotTable"
            'create pivot cache.
            Dim pivotcache = workbook.PivotCaches.Create(worksheet.Range("B2:F87"))

            'create pivot table.
            Dim pivottable = worksheet2.PivotTables.Add(pivotcache, worksheet2.Range!B2, "ReportPivot")

            'assign built-in table style for pivot table.
            pivottable.TableStyle = "PivotStyleMedium2"

            'config pivot table's fields.
            Dim field_product = pivottable.PivotFields("PRODUCT")
            field_product.Orientation = PivotFieldOrientation.RowField
            Dim field_customer = pivottable.PivotFields("CUSTOMER")
            field_customer.Orientation = PivotFieldOrientation.RowField
            Dim field_amount = pivottable.PivotFields("AMOUNT")
            field_amount.Orientation = PivotFieldOrientation.DataField
            Dim field_quarter = pivottable.PivotFields("QUARTER")
            field_quarter.Orientation = PivotFieldOrientation.ColumnField

            'just a workaround, we dost not provide api to set number format
            'for pivot field. so use follow way.
            pivottable.DataBodyRange.NumberFormat = "$#,##0.00_);($#,##0.00)"
#End Region

#Region "Style"
            worksheet2.Range("1:1").Style = workbook.Styles("Title")
            worksheet2.Range("1:1").Interior.ThemeColor = ThemeColor.Accent1
            worksheet2.Range("1:1").HorizontalAlignment = HorizontalAlignment.Left
            worksheet2.Range("1:1").IndentLevel = 1
            worksheet2.Range("1:1").VerticalAlignment = VerticalAlignment.Center
            worksheet2.Range!A1.Style = workbook.Styles("Normal")
#End Region

#Region "Shape"
            'create a shape.
            Dim shape As IShape = worksheet2.Shapes.AddShape(AutoShapeType.RectangularCallout, 472, 65, 300, 70)

            'config shape's line and fill.
            shape.Line.DashStyle = LineDashStyle.Solid
            shape.Line.Weight = 4
            shape.Line.Color.RGB = Color.FromArgb(89, 89, 89)
            shape.Fill.Solid()
            shape.Fill.Color.ColorType = SolidColorType.None

            'config shape's rich text.
            Dim shape_p1 As ITextRange = shape.TextFrame.TextRange.Paragraphs(0)
            shape_p1.Text = "TIP:"
            Dim shape_p2 As ITextRange = shape.TextFrame.TextRange.Paragraphs.Add()
            shape_p2.Text = "Customize this PivotTable to fit your needs! Select a cell in the PivotTable to activate the PivotTable Field List pane. Then in the task pane, drag to add, remove, or reorder the fields." &amp;
                " For example, drag the Product field above the Customer field for a different view. To update PivotTable data, right-click in the PivotTable and then click Refresh."

            'set first paragraph's font style.
            shape_p1.Font.ThemeFont = ThemeFont.Major
            shape_p1.Font.Bold = True
            shape_p1.Font.Size = 12
            shape_p1.Font.Color.ObjectThemeColor = ThemeColor.Dark1
            shape_p1.Font.Color.Brightness = 0.25

            'set second paragraph's font style.
            shape_p2.Font.ThemeFont = ThemeFont.Minor
            shape_p2.Font.Size = 8
            shape_p2.Font.Color.ObjectThemeColor = ThemeColor.Dark1
            shape_p2.Font.Color.Brightness = 0.25
#End Region

#End Region

#Region "Worksheet_DataLists"
            Dim worksheet3 As IWorksheet = workbook.Worksheets.Add()
            worksheet3.Name = "Data Lists"
            worksheet3.SheetView.DisplayGridlines = False

#Region "RowHeightColumnWidth"
            worksheet3.StandardHeight = 18.75
            worksheet3.StandardWidth = 8.43
            worksheet3.Range("1:1").RowHeight = 51.75
            worksheet3.Range("2:32").RowHeight = 19
            worksheet3.Range("A:A, D:D").ColumnWidth = 2.28515625
            worksheet3.Range("B:C").ColumnWidth = 34.42578125
#End Region

#Region "Values"
            worksheet3.Range!B1.Value = "DATA LISTS"
#End Region

#Region "Table"
            worksheet3.Range("B2:B32").Value = New Object(,) {
                {"PRODUCTS"},
                {"Product 1"},
                {"Product 2"},
                {"Product 3"},
                {"Product 4"},
                {"Product 5"},
                {"Product 6"},
                {"Product 7"},
                {"Product 8"},
                {"Product 9"},
                {"Product 10"},
                {"Product 11"},
                {"Product 12"},
                {"Product 13"},
                {"Product 14"},
                {"Product 15"},
                {"Product 16"},
                {"Product 17"},
                {"Product 18"},
                {"Product 19"},
                {"Product 20"},
                {"Product 21"},
                {"Product 22"},
                {"Product 23"},
                {"Product 24"},
                {"Product 25"},
                {"Product 26"},
                {"Product 27"},
                {"Product 28"},
                {"Product 29"},
                {"Product 30"}
            }

            Dim table_Products As ITable = worksheet3.Tables.Add(worksheet.Range("B2:B32"), True)
            worksheet3.Range("C2:C30").Value = New Object(,) {
                {"CUSTOMERS"},
                {"A. Datum Corporation"},
                {"Adventure Works"},
                {"Alpine Ski House"},
                {"Blue Yonder Airlines"},
                {"City Power &amp; Light"},
                {"Coho Vineyard"},
                {"Coho Winery"},
                {"Coho Vineyard &amp; Winery"},
                {"Contoso, Ltd"},
                {"Contoso Pharmaceuticals"},
                {"Consolidated Messenger"},
                {"Fabrikam, Inc."},
                {"Fourth Coffee"},
                {"Graphic Design Institute"},
                {"Humongous Insurance"},
                {"Litware, Inc."},
                {"Lucerne Publishing"},
                {"Margie's Travel"},
                {"Northwind Traders"},
                {"Proseware, Inc."},
                {"School of Fine Art"},
                {"Southridge Video"},
                {"Tailspin Toys"},
                {"Trey Research"},
                {"The Phone Company"},
                {"Wide World Importers"},
                {"Wingtip Toys"},
                {"Woodgrove Bank"}
            }

            Dim table_Customers As ITable = worksheet3.Tables.Add(worksheet.Range("C2:C30"), True)
            table_Products.TableStyle = workbook.TableStyles("TableStyleMedium2")
            table_Products.Columns(0).Range.HorizontalAlignment = HorizontalAlignment.Left
            table_Products.Columns(0).Range.IndentLevel = 1
            table_Products.Columns(0).Range.VerticalAlignment = VerticalAlignment.Center
            table_Products.HeaderRange.Font.Size = 11
            table_Customers.TableStyle = workbook.TableStyles("TableStyleMedium2")
            table_Customers.Columns(0).Range.HorizontalAlignment = HorizontalAlignment.Left
            table_Customers.Columns(0).Range.IndentLevel = 1
            table_Customers.Columns(0).Range.VerticalAlignment = VerticalAlignment.Center
            table_Customers.ShowTableStyleFirstColumn = True
            table_Customers.HeaderRange.Font.Size = 11
#End Region

#Region "Style"
            worksheet3.Range("1:1").Style = workbook.Styles("Title")
            worksheet3.Range("1:1").Interior.ThemeColor = ThemeColor.Accent1
            worksheet3.Range("1:1").HorizontalAlignment = HorizontalAlignment.Left
            worksheet3.Range("1:1").IndentLevel = 1
            worksheet3.Range("1:1").VerticalAlignment = VerticalAlignment.Center
            worksheet3.Range!A1.Style = workbook.Styles("Normal")
#End Region

#Region "Shape"
            Dim shape2 As IShape = worksheet3.Shapes.AddShape(AutoShapeType.RectangularCallout, 380, 65, 280, 50)
            shape2.Line.DashStyle = LineDashStyle.Solid
            shape2.Line.Weight = 4
            shape2.Line.Color.RGB = Color.FromArgb(89, 89, 89)
            shape2.Fill.Solid()
            shape2.Fill.Color.ColorType = SolidColorType.None
            Dim shape2_p1 As ITextRange = shape2.TextFrame.TextRange.Paragraphs(0)
            shape2_p1.Text = "TIP:"
            Dim shape2_p2 As ITextRange = shape2.TextFrame.TextRange.Paragraphs.Add()
            shape2_p2.Text = "To add a new product or customer, start typing below the table and it will automatically expand when you press the Enter or Tab key."
            shape2_p1.Font.ThemeFont = ThemeFont.Major
            shape2_p1.Font.Bold = True
            shape2_p1.Font.Size = 12
            shape2_p1.Font.Color.ObjectThemeColor = ThemeColor.Dark1
            shape2_p1.Font.Color.Brightness = 0.25
            shape2_p2.Font.ThemeFont = ThemeFont.Minor
            shape2_p2.Font.Size = 8
            shape2_p2.Font.Color.ObjectThemeColor = ThemeColor.Dark1
            shape2_p2.Font.Color.Brightness = 0.25
#End Region
#End Region

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.BidTracker" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            '***********************Set RowHeight &amp; ColumnWidth***************
            worksheet.StandardHeight = 30
            worksheet.Range("1:1").RowHeight = 57.75
            worksheet.Range("2:9").RowHeight = 30.25
            worksheet.Range("A:A").ColumnWidth = 2.71
            worksheet.Range("B:B").ColumnWidth = 11.71
            worksheet.Range("C:C").ColumnWidth = 28
            worksheet.Range("D:D").ColumnWidth = 22.425
            worksheet.Range("E:E").ColumnWidth = 16.71
            worksheet.Range("F:F").ColumnWidth = 28
            worksheet.Range("G:H").ColumnWidth = 16.71
            worksheet.Range("I:I").ColumnWidth = 2.71

            '**************************Set Table Value &amp; Formulas*********************
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("B2:H9"), True)
            worksheet.Range("B2:H9").Value = New Object(,)  {
                {"BID #", "DESCRIPTION", "DATE RECEIVED", "AMOUNT", "PERCENT COMPLETE", "DEADLINE", "DAYS LEFT"},
                {1, "Bid number 1", Nothing, 2000, 0.5, Nothing, Nothing},
                {2, "Bid number 2", Nothing, 3500, 0.25, Nothing, Nothing},
                {3, "Bid number 3", Nothing, 5000, 0.3, Nothing, Nothing},
                {4, "Bid number 4", Nothing, 4000, 0.2, Nothing, Nothing},
                {5, "Bid number 5", Nothing, 4000, 0.75, Nothing, Nothing},
                {6, "Bid number 6", Nothing, 1500, 0.45, Nothing, Nothing},
                {7, "Bid number 7", Nothing, 5000, 0.65, Nothing, Nothing}
            }

            worksheet.Range!B1.Value = "Bid Details"
            worksheet.Range!D3.Formula = "=TODAY()-10"
            worksheet.Range("D4:D5").Formula = "=TODAY()-20"
            worksheet.Range!D6.Formula = "=TODAY()-10"
            worksheet.Range!D7.Formula = "=TODAY()-28"
            worksheet.Range!D8.Formula = "=TODAY()-17"
            worksheet.Range!D9.Formula = "=TODAY()-15"
            worksheet.Range("G3:G9").Formula = "=[@[DATE RECEIVED]]+30"
            worksheet.Range("H3:H9").Formula = "=[@DEADLINE]-TODAY()"

            '****************************Set Table Style********************************
            Dim tableStyle As ITableStyle = workbook.TableStyles.Add("Bid Tracker")
            workbook.DefaultTableStyle = "Bid Tracker"

            'Set WholeTable element style.
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Font.Color = Color.FromArgb(89, 89, 89)
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders.Color = Color.FromArgb(89, 89, 89)
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideVertical).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Thin

            'Set HeaderRow element style.
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders.Color = Color.FromArgb(89, 89, 89)
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.InsideVertical).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Interior.Color = Color.FromArgb(131, 95, 1)
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Interior.PatternColor = Color.FromArgb(254, 184, 10)

            'Set TotalRow element style.
            tableStyle.TableStyleElements(TableStyleElementType.TotalRow).Borders.Color = Color.White
            tableStyle.TableStyleElements(TableStyleElementType.TotalRow).Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.TotalRow).Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.TotalRow).Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.TotalRow).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.TotalRow).Borders(BordersIndex.InsideVertical).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.TotalRow).Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.TotalRow).Interior.Color = Color.FromArgb(131, 95, 1)

            '***********************************Set Named Styles*****************************
            Dim titleStyle As IStyle = workbook.Styles("Title")
            titleStyle.Font.Name = "Trebuchet MS"
            titleStyle.Font.Size = 36
            titleStyle.Font.Color = Color.FromArgb(56, 145, 167)
            titleStyle.IncludeAlignment = True
            titleStyle.VerticalAlignment = VerticalAlignment.Center

            Dim heading1Style As IStyle = workbook.Styles("Heading 1")
            heading1Style.IncludeAlignment = True
            heading1Style.HorizontalAlignment = HorizontalAlignment.Left
            heading1Style.IndentLevel = 1
            heading1Style.VerticalAlignment = VerticalAlignment.Bottom
            heading1Style.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.None
            heading1Style.Font.Size = 14
            heading1Style.Font.Color = Color.White
            heading1Style.Font.Bold = False
            heading1Style.IncludePatterns = True
            heading1Style.Interior.Color = Color.FromArgb(131, 95, 1)
            heading1Style.Font.Name = "Trebuchet MS"

            Dim dateStyle As IStyle = workbook.Styles.Add("Date")
            dateStyle.IncludeNumber = True
            dateStyle.NumberFormat = "m/d/yyyy"
            dateStyle.IncludeAlignment = True
            dateStyle.HorizontalAlignment = HorizontalAlignment.Left
            dateStyle.IndentLevel = 1
            dateStyle.VerticalAlignment = VerticalAlignment.Center
            dateStyle.IncludeFont = False
            dateStyle.IncludeBorder = False
            dateStyle.IncludePatterns = False
            dateStyle.Font.Name = "Trebuchet MS"

            Dim commaStyle As IStyle = workbook.Styles("Comma")
            commaStyle.IncludeNumber = True
            commaStyle.NumberFormat = "#,##0_);(#,##0)"
            commaStyle.IncludeAlignment = True
            commaStyle.HorizontalAlignment = HorizontalAlignment.Left
            commaStyle.IndentLevel = 1
            commaStyle.VerticalAlignment = VerticalAlignment.Center
            commaStyle.Font.Name = "Trebuchet MS"

            Dim normalStyle As IStyle = workbook.Styles("Normal")
            normalStyle.HorizontalAlignment = HorizontalAlignment.Left
            normalStyle.IndentLevel = 1
            normalStyle.VerticalAlignment = VerticalAlignment.Center
            normalStyle.WrapText = True
            normalStyle.Font.Color = Color.FromArgb(89, 89, 89)

            Dim currencyStyle As IStyle = workbook.Styles("Currency")
            currencyStyle.NumberFormat = "$#,##0.00"
            currencyStyle.IncludeAlignment = True
            currencyStyle.HorizontalAlignment = HorizontalAlignment.Left
            currencyStyle.IndentLevel = 1
            currencyStyle.VerticalAlignment = VerticalAlignment.Center
            currencyStyle.Font.Name = "Trebuchet MS"

            Dim percentStyle As IStyle = workbook.Styles("Percent")
            percentStyle.IncludeAlignment = True
            percentStyle.HorizontalAlignment = HorizontalAlignment.Right
            percentStyle.VerticalAlignment = VerticalAlignment.Center
            percentStyle.IncludeFont = True
            percentStyle.Font.Name = "Trebuchet MS"
            percentStyle.Font.Size = 20
            percentStyle.Font.Bold = True
            percentStyle.Font.Color = Color.FromArgb(89, 89, 89)
            percentStyle.Font.Name = "Trebuchet MS"

            Dim comma0Style As IStyle = workbook.Styles("Comma [0]")
            comma0Style.NumberFormat = "#,##0_);(#,##0)"
            comma0Style.IncludeAlignment = True
            comma0Style.HorizontalAlignment = HorizontalAlignment.Right
            comma0Style.IndentLevel = 3
            comma0Style.VerticalAlignment = VerticalAlignment.Center
            percentStyle.Font.Name = "Trebuchet MS"

            '************************************Add Conditional Formatting****************
            Dim dataBar As IDataBar = worksheet.Range("F3:F9").FormatConditions.AddDatabar()
            dataBar.MinPoint.Type = ConditionValueTypes.Number
            dataBar.MinPoint.Value = 1
            dataBar.MaxPoint.Type = ConditionValueTypes.Number
            dataBar.MaxPoint.Value = 0
            dataBar.BarFillType = DataBarFillType.Gradient
            dataBar.BarColor.Color = Color.FromArgb(126, 194, 211)
            dataBar.Direction = DataBarDirection.Context
            dataBar.AxisColor.Color = Color.Black
            dataBar.AxisPosition = DataBarAxisPosition.Automatic
            dataBar.NegativeBarFormat.ColorType = DataBarNegativeColorType.Color
            dataBar.NegativeBarFormat.Color.Color = Color.Red
            dataBar.ShowValue = True

            '****************************************Use NamedStyle**************************
            worksheet.SheetView.DisplayGridlines = False
            table.TableStyle = tableStyle
            worksheet.Range!B1.Style = titleStyle
            worksheet.Range!B1.WrapText = False
            worksheet.Range("B2:H2").Style = heading1Style
            worksheet.Range("B3:B9").Style = commaStyle
            worksheet.Range("C3:C9").Style = normalStyle
            worksheet.Range("D3:D9").Style = dateStyle
            worksheet.Range("E3:E9").Style = currencyStyle
            worksheet.Range("F3:F9").Style = percentStyle
            worksheet.Range("G3:G9").Style = dateStyle
            worksheet.Range("H3:H9").Style = comma0Style
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.BloodPressureTracker" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

#Region "theme"
            'create a custom theme.
            Dim themes As New Themes
            Dim theme As ITheme = themes.Add("testTheme")
            theme.ThemeColorScheme(ThemeColor.Light1).RGB = Color.FromArgb(255, 255, 255)
            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.FromArgb(0, 0, 0)
            theme.ThemeColorScheme(ThemeColor.Light2).RGB = Color.FromArgb(222, 222, 212)
            theme.ThemeColorScheme(ThemeColor.Dark2).RGB = Color.FromArgb(30, 46, 47)
            theme.ThemeColorScheme(ThemeColor.Accent1).RGB = Color.FromArgb(233, 117, 90)
            theme.ThemeColorScheme(ThemeColor.Accent2).RGB = Color.FromArgb(122, 182, 186)
            theme.ThemeColorScheme(ThemeColor.Accent3).RGB = Color.FromArgb(125, 181, 135)
            theme.ThemeColorScheme(ThemeColor.Accent4).RGB = Color.FromArgb(230, 191, 94)
            theme.ThemeColorScheme(ThemeColor.Accent5).RGB = Color.FromArgb(230, 143, 77)
            theme.ThemeColorScheme(ThemeColor.Accent6).RGB = Color.FromArgb(194, 107, 112)
            theme.ThemeColorScheme(ThemeColor.Hyperlink).RGB = Color.FromArgb(122, 182, 186)
            theme.ThemeColorScheme(ThemeColor.FollowedHyperlink).RGB = Color.FromArgb(166, 140, 177)
            theme.ThemeFontScheme.Major(FontLanguageIndex.Latin).Name = "Gill Sans"
            theme.ThemeFontScheme.Minor(FontLanguageIndex.Latin).Name = "Gill Sans"

            'assign the custom theme for workbook.
            workbook.Theme = theme
#End Region
            'does not show sheet gridlines.
            worksheet.SheetView.DisplayGridlines = False

#Region "RowHeightColumnWidth"
            'set row height and column width.
            worksheet.StandardHeight = 12.75
            worksheet.StandardWidth = 8.43
            worksheet.Rows(1).RowHeight = 32.25
            worksheet.Rows(2).RowHeight = 13.5
            worksheet.Rows(3).RowHeight = 18.75
            worksheet.Rows(6).RowHeight = 18.75
            worksheet.Rows(9).RowHeight = 18.75
            worksheet.Rows(12).RowHeight = 18.75
            worksheet.Rows(15).RowHeight = 19.5
            worksheet.Rows(16).RowHeight = 13.5
            worksheet.Rows(33).RowHeight = 19.5
            worksheet.Rows(34).RowHeight = 13.5
            worksheet.Columns(0).ColumnWidth = 1.7109375
            worksheet.Columns(1).ColumnWidth = 12.140625
            worksheet.Columns(2).ColumnWidth = 12.140625
            worksheet.Columns(3).ColumnWidth = 12.140625
            worksheet.Columns(4).ColumnWidth = 11.85546875
            worksheet.Columns(5).ColumnWidth = 12.7109375
            worksheet.Columns(6).ColumnWidth = 13.85546875
            worksheet.Columns(7).ColumnWidth = 44.7109375
#End Region

#Region "Values"
            'initialize worksheet's values.
            worksheet.Name = "BLOOD PRESSURE DATA"
            worksheet.Range!B2.Value = "BLOOD PRESSURE TRACKER"
            worksheet.Range("B4:F13").Value = New Object(,)  {
                {"NAME", Nothing, Nothing, Nothing, Nothing},
                {Nothing, Nothing, Nothing, Nothing, Nothing},
                {Nothing, Nothing, Nothing, "Systolic", "Diastolic"},
                {"TARGET BLOOD PRESSURE", Nothing, Nothing, 120, 80},
                {Nothing, Nothing, Nothing, Nothing, Nothing},
                {Nothing, Nothing, Nothing, "Systolic", "Diastolic"},
                {"CALL PHYSICIAN IF ABOVE", Nothing, Nothing, 140, 90},
                {Nothing, Nothing, Nothing, Nothing, Nothing},
                {Nothing, Nothing, Nothing, Nothing, Nothing},
                {"PHYSICIAN PHONE NUMBER", Nothing, Nothing, "[Phone Number]", Nothing}
            }
            worksheet.Range("B16").Value = "CHARTED PROGRESS"
            worksheet.Range("B34").Value = "DATA ENTRY"
#End Region

#Region "Table"
            'initialize table data.
            worksheet.Range("B36:H44").Value = New Object(,)  {
                {"TIME", "DATE", "AM/PM", "SYSTOLIC", "DIASTOLIC", "HEART RATE", "NOTES"},
                {
                    New TimeSpan(10, 0, 0),
                    Date.Parse("7/1/2013 12:00:00 AM"),
                    "AM",
                    129,
                    99,
                    72,
                    Nothing
                },
                {
                    New TimeSpan(18, 0, 0),
                    Date.Parse("7/1/2013 12:00:00 AM"),
                    "PM",
                    133,
                    80,
                    75,
                    Nothing
                },
                {
                    New TimeSpan(10, 30, 0), Date.Parse("7/2/2012 12:00:00 AM"),
                    "AM",
                    142,
                    86,
                    70,
                    Nothing
                },
                {
                    New TimeSpan(19, 0, 0),
                    Date.Parse("7/2/2012 12:00:00 AM"),
                    "PM",
                    141,
                    84,
                    68,
                    Nothing
                },
                {
                    New TimeSpan(9, 0, 0),
                    Date.Parse("7/3/2012 12:00:00 AM"),
                    "AM",
                    137,
                    84,
                    70,
                    Nothing
                },
                {
                    New TimeSpan(18, 30, 0),
                    Date.Parse("7/3/2012 12:00:00 AM"),
                    "PM",
                    139,
                    83,
                    72,
                    Nothing
                },
                {
                    New TimeSpan(10, 0, 0),
                    Date.Parse("7/4/2012 12:00:00 AM"),
                    "AM",
                    140,
                    85,
                    78,
                    Nothing
                },
                {
                    New TimeSpan(18, 0, 0),
                    Date.Parse("7/4/2012 12:00:00 AM"),
                    "PM",
                    138,
                    85,
                    69,
                    Nothing
                }
            }
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("B36:H44"), True)
            table.ShowTotals = True

            'set total row formulas.
            table.Columns(0).Total.Value = "Average"
            table.Columns(3).TotalsCalculation = TotalsCalculation.Average
            table.Columns(4).TotalsCalculation = TotalsCalculation.Average
            table.Columns(5).TotalsCalculation = TotalsCalculation.Average
            table.Columns(6).TotalsCalculation = TotalsCalculation.None

            'config data body range and total range's number format.
            table.Columns(0).DataBodyRange.NumberFormat = "h:mm;@"
            table.Columns(1).DataBodyRange.NumberFormat = "m/d/yyyy"
            table.Columns(3).DataBodyRange.NumberFormat = "0"
            table.Columns(4).DataBodyRange.NumberFormat = "0"
            table.Columns(5).DataBodyRange.NumberFormat = "0"
            table.Columns(3).Total.NumberFormat = "0"
            table.Columns(4).Total.NumberFormat = "0"
            table.Columns(5).Total.NumberFormat = "0"

            'config table range's alignment.
            table.Range.HorizontalAlignment = HorizontalAlignment.Left
            table.Range.IndentLevel = 0
            table.Range.VerticalAlignment = VerticalAlignment.Center
#End Region

#Region "TableStyle"
            'create a custom table style.
            Dim tablestyle As ITableStyle = workbook.TableStyles.Add("testStyle")
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Font.ThemeColor = ThemeColor.Dark1
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Font.TintAndShade = 0.25
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thin
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeTop).ThemeColor = ThemeColor.Accent1
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeTop).TintAndShade = 0.4
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Thin
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).ThemeColor = ThemeColor.Accent1
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).TintAndShade = 0.4
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thin
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Accent1
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).TintAndShade = 0.4
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thin
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeLeft).ThemeColor = ThemeColor.Accent1
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeLeft).TintAndShade = 0.4
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Thin
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeRight).ThemeColor = ThemeColor.Accent1
            tablestyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeRight).TintAndShade = 0.4
            tablestyle.TableStyleElements(TableStyleElementType.FirstRowStripe).Interior.ThemeColor = ThemeColor.Accent1
            tablestyle.TableStyleElements(TableStyleElementType.FirstRowStripe).Interior.TintAndShade = 0.8
            tablestyle.TableStyleElements(TableStyleElementType.HeaderRow).Font.Bold = True
            tablestyle.TableStyleElements(TableStyleElementType.HeaderRow).Font.ThemeColor = ThemeColor.Dark1
            tablestyle.TableStyleElements(TableStyleElementType.HeaderRow).Font.TintAndShade = 0.25
            tablestyle.TableStyleElements(TableStyleElementType.HeaderRow).Interior.ThemeColor = ThemeColor.Accent1
            tablestyle.TableStyleElements(TableStyleElementType.TotalRow).Font.Bold = True
            tablestyle.TableStyleElements(TableStyleElementType.TotalRow).Font.ThemeColor = ThemeColor.Dark1
            tablestyle.TableStyleElements(TableStyleElementType.TotalRow).Font.TintAndShade = 0.25
            tablestyle.TableStyleElements(TableStyleElementType.TotalRow).Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Double
            tablestyle.TableStyleElements(TableStyleElementType.TotalRow).Borders(BordersIndex.EdgeTop).ThemeColor = ThemeColor.Accent1

            'assign custom table style for table.
            table.TableStyle = workbook.TableStyles("testStyle")
#End Region

#Region "Style"
            'assign built-in styles for ranges.
            worksheet.Range("B2:H2").Style = workbook.Styles("Heading 1")
            worksheet.Range("B4:F4, B7:D7, B10:D10, B13:D13").Style = workbook.Styles("Heading 2")
            worksheet.Range("B16:H16, B34:H34").Style = workbook.Styles("Heading 3")

            'modify built-in styles.
            Dim style_Heading1 As IStyle = workbook.Styles("Heading 1")
            style_Heading1.HorizontalAlignment = HorizontalAlignment.General
            style_Heading1.VerticalAlignment = VerticalAlignment.Center
            style_Heading1.Font.ThemeFont = ThemeFont.Major
            style_Heading1.Font.Size = 24
            style_Heading1.Font.Bold = True
            style_Heading1.Font.ThemeColor = ThemeColor.Accent1
            style_Heading1.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick
            style_Heading1.Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Accent1
            style_Heading1.IncludeAlignment = True
            style_Heading1.IncludeFont = True
            style_Heading1.IncludeBorder = True
            style_Heading1.IncludeNumber = False
            style_Heading1.IncludePatterns = False
            style_Heading1.IncludeProtection = False

            Dim style_Heading2 As IStyle = workbook.Styles("Heading 2")
            style_Heading2.HorizontalAlignment = HorizontalAlignment.General
            style_Heading2.VerticalAlignment = VerticalAlignment.Bottom
            style_Heading2.Font.ThemeFont = ThemeFont.Minor
            style_Heading2.Font.Size = 14
            style_Heading2.Font.ThemeColor = ThemeColor.Dark1
            style_Heading2.Font.TintAndShade = 0.25
            style_Heading2.Font.Bold = False
            style_Heading2.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Dotted
            style_Heading2.Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Light1
            style_Heading2.Borders(BordersIndex.EdgeBottom).TintAndShade = -0.5
            style_Heading2.IncludeAlignment = True
            style_Heading2.IncludeFont = True
            style_Heading2.IncludeBorder = True
            style_Heading2.IncludeNumber = False
            style_Heading2.IncludePatterns = False
            style_Heading2.IncludeProtection = False

            Dim style_Heading3 As IStyle = workbook.Styles("Heading 3")
            style_Heading3.HorizontalAlignment = HorizontalAlignment.General
            style_Heading3.VerticalAlignment = VerticalAlignment.Center
            style_Heading3.Font.ThemeFont = ThemeFont.Minor
            style_Heading3.Font.Size = 14
            style_Heading3.Font.Bold = True
            style_Heading3.Font.ThemeColor = ThemeColor.Dark1
            style_Heading3.Font.TintAndShade = 0.25
            style_Heading3.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick
            style_Heading3.Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Accent2
            style_Heading3.IncludeAlignment = True
            style_Heading3.IncludeFont = True
            style_Heading3.IncludeBorder = True
            style_Heading3.IncludeNumber = False
            style_Heading3.IncludePatterns = False
            style_Heading3.IncludeProtection = False

            Dim style_Normal As IStyle = workbook.Styles("Normal")
            style_Normal.NumberFormat = "General"
            style_Normal.HorizontalAlignment = HorizontalAlignment.General
            style_Normal.VerticalAlignment = VerticalAlignment.Center
            style_Normal.Font.ThemeFont = ThemeFont.Minor
            style_Normal.Font.Size = 10
            style_Normal.Font.ThemeColor = ThemeColor.Dark1
            style_Normal.Font.TintAndShade = 0.25
            style_Normal.IncludeAlignment = True
            style_Normal.IncludeFont = True
            style_Normal.IncludeBorder = True
            style_Normal.IncludeNumber = True
            style_Normal.IncludePatterns = True
            style_Normal.IncludeProtection = True

            'modify cell styles.
            worksheet.Range!B4.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.None
            worksheet.Range("C4:F4").Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thin

            Dim range1 As IRange = worksheet.Range("E7:F7, E10:F10")
            range1.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Dotted
            range1.Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Light1
            range1.Borders(BordersIndex.EdgeBottom).TintAndShade = -0.5
            range1.Font.Bold = True

            Dim range2 As IRange = worksheet.Range("E7, E10")
            range2.Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Thin
            range2.Borders(BordersIndex.EdgeRight).ThemeColor = ThemeColor.Light1
            range2.Borders(BordersIndex.EdgeRight).TintAndShade = -0.5
#End Region

#Region "Chart"
            'create a new chart.
            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 8.99984251968504, 268.5, 627.750157480315, 184.5)

            'create series for chart.
            Dim series_systolic As ISeries = shape.Chart.SeriesCollection.NewSeries()
            Dim series_diatolic As ISeries = shape.Chart.SeriesCollection.NewSeries()
            Dim series_HeartRate As ISeries = shape.Chart.SeriesCollection.NewSeries()

            'set series formulas.
            series_systolic.Formula = "=SERIES('BLOOD PRESSURE DATA'!$E$36,'BLOOD PRESSURE DATA'!$C$37:$D$44,'BLOOD PRESSURE DATA'!$E$37:$E$44,1)"
            series_diatolic.Formula = "=SERIES('BLOOD PRESSURE DATA'!$F$36,'BLOOD PRESSURE DATA'!$C$37:$D$44,'BLOOD PRESSURE DATA'!$F$37:$F$44,2)"

            'set series plot on secondary axis, and change its chart type.
            series_HeartRate.AxisGroup = AxisGroup.Secondary
            series_HeartRate.ChartType = ChartType.Line
            series_HeartRate.Formula = "=SERIES('BLOOD PRESSURE DATA'!$G$36,,'BLOOD PRESSURE DATA'!$G$37:$G$44,3)"

            'set series fill to gradient fill.
            series_systolic.Format.Fill.TwoColorGradient(GradientStyle.Horizontal, 1)
            series_systolic.Format.Fill.GradientAngle = 270
            series_systolic.Format.Fill.GradientStops(0).Color.RGB = Color.FromArgb(255, 172, 175)
            series_systolic.Format.Fill.GradientStops(1).Color.RGB = Color.FromArgb(255, 227, 228)
            series_systolic.Format.Fill.GradientStops.Insert(&amp;HFEC6C8, 0.35)
            series_systolic.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent6
            series_diatolic.Format.Fill.TwoColorGradient(GradientStyle.Horizontal, 1)
            series_diatolic.Format.Fill.GradientAngle = 270
            series_diatolic.Format.Fill.GradientStops(0).Color.RGB = Color.FromArgb(255, 192, 147)
            series_diatolic.Format.Fill.GradientStops(1).Color.RGB = Color.FromArgb(255, 227, 212)
            series_diatolic.Format.Fill.GradientStops.Insert(&amp;HFFCBA9, 0.35)
            series_diatolic.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent5

            'set series gap width and overlap.
            shape.Chart.ColumnGroups(0).GapWidth = 150
            shape.Chart.ColumnGroups(0).Overlap = 0

            'set series line style.
            series_HeartRate.Format.Line.BeginArrowheadLength = ArrowheadLength.Medium
            series_HeartRate.Format.Line.BeginArrowheadStyle = ArrowheadStyle.None
            series_HeartRate.Format.Line.BeginArrowheadWidth = ArrowheadWidth.Medium
            series_HeartRate.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent4
            series_HeartRate.Format.Line.Color.TintAndShade = 0
            series_HeartRate.Format.Line.DashStyle = LineDashStyle.Solid
            series_HeartRate.Format.Line.EndArrowheadLength = ArrowheadLength.Medium
            series_HeartRate.Format.Line.EndArrowheadStyle = ArrowheadStyle.None
            series_HeartRate.Format.Line.EndArrowheadWidth = ArrowheadWidth.Medium
            series_HeartRate.Format.Line.Style = LineStyle.Single
            series_HeartRate.Format.Line.Weight = 1.25

            Dim primary_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value, AxisGroup.Primary)
            primary_axis.HasTitle = True
            primary_axis.AxisTitle.Text = "BLOOD PRESSURE"
            primary_axis.AxisTitle.IncludeInLayout = True

            Dim secondary_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value, AxisGroup.Secondary)
            secondary_axis.HasTitle = True
            secondary_axis.AxisTitle.Text = "HEART RATE"
            secondary_axis.AxisTitle.IncludeInLayout = True

            Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category, AxisGroup.Primary)
            category_axis.HasTitle = True
            category_axis.CategoryType = CategoryType.CategoryScale
            category_axis.Format.Line.Color.ColorType = SolidColorType.None
            shape.Chart.HasTitle = False

            'set chart font style.
            shape.Chart.ChartArea.Font.Size = 9
            shape.Chart.ChartArea.Font.Color.ObjectThemeColor = ThemeColor.Dark1
            shape.Chart.ChartArea.Font.Color.Brightness = 0.5
#End Region

#Region "Shape"
            Dim shape1 As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 402, 77.25, 234, 100)
            shape1.Fill.Solid()
            shape1.Fill.Color.ObjectThemeColor = ThemeColor.Accent1
            shape1.Fill.Color.Brightness = 0.6

            'set shape's border to no line.
            shape1.Line.Color.ColorType = SolidColorType.None

            'set shape rich text.
            Dim shape1_p1 As ITextRange = shape1.TextFrame.TextRange.Paragraphs(0)
            shape1_p1.Text = "*"
            shape1_p1.Runs.Add(" Blood pressures may vary dependent on many")
            shape1_p1.Runs.Add(" factors.  Always consult with a physician about what is normal for you.  These numbers may vary slightly.")

            Dim shape1_p2 As ITextRange = shape1.TextFrame.TextRange.Paragraphs.Add("")
            Dim shape1_p3 As ITextRange = shape1.TextFrame.TextRange.Paragraphs.Add("Info from National Institute of Health:")
            Dim shape1_p4 As ITextRange = shape1.TextFrame.TextRange.Paragraphs.Add("http://www.nhlbi.nih.gov/health/health-topics/topics/hbp/")
            shape1.TextFrame.TextRange.Font.Size = 10
            shape1.TextFrame.TextRange.Font.ThemeFont = ThemeFont.Minor
            shape1.TextFrame.TextRange.Font.Color.ObjectThemeColor = ThemeColor.Dark1
            shape1.TextFrame.TextRange.Font.Color.Brightness = 0.25
            shape1_p3.Runs(0).Font.Bold = True

            Dim shape2 As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 421.5, 546.75, 198, 50)
            shape2.Fill.Solid()
            shape2.Fill.Color.ObjectThemeColor = ThemeColor.Accent3
            shape2.Fill.Color.Brightness = 0.6

            'set shape's border to no line.
            shape2.Line.Color.ColorType = SolidColorType.None

            Dim shape2_p1 As ITextRange = shape2.TextFrame.TextRange.Paragraphs(0)
            shape2_p1.Text = "NOTE:"
            shape2_p1.Runs.Add(" Any blood pressure readings over the indicated numbers (""CALL PHYSICIAN IF ABOVE"") will be")
            shape2_p1.Runs.Add(" highlighted.")
            shape2.TextFrame.TextRange.Font.Size = 10
            shape2.TextFrame.TextRange.Font.ThemeFont = ThemeFont.Minor
            shape2.TextFrame.TextRange.Font.Color.ObjectThemeColor = ThemeColor.Dark1
            shape2.TextFrame.TextRange.Font.Color.Brightness = 0.25
            shape2_p1.Runs(0).Font.Bold = True
#End Region

#Region "DefinedName"
            'create defined names for workbook.
            workbook.Names.Add("MaxDiastolic", "='BLOOD PRESSURE DATA'!$F$10")
            workbook.Names.Add("MaxSystolic", "='BLOOD PRESSURE DATA'!$E$10")
#End Region

#Region "ConditionalFormat"
            'create conditional format for ranges.
            Dim condition1 As IFormatCondition = TryCast(worksheet.Range("E37:E44").FormatConditions.Add(FormatConditionType.Expression, formula1:="=E37&gt;MaxSystolic"), IFormatCondition)
            Dim condition2 As IFormatCondition = TryCast(worksheet.Range("F37:F44").FormatConditions.Add(FormatConditionType.Expression, formula1:="=F37&gt;MaxDiastolic"), IFormatCondition)
            condition1.Interior.Color = Color.Red
            condition2.Interior.Color = Color.Red
#End Region

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.CostAnalysisWithParetoChart" xml:space="preserve">
    <value>
            Dim data = {
                {"Cost Center", "Annual Cost", "Percent of Total", "Cumulative Percent"},
                {"Parts and materials", 1325000, Nothing, Nothing},
                {"Manufacturing equipment", 900500, Nothing, Nothing},
                {"Salaries", 575000, Nothing, Nothing},
                {"Maintenance", 395000, Nothing, Nothing},
                {"Office lease", 295000, Nothing, Nothing},
                {"Warehouse lease", 250000, Nothing, Nothing},
                {"Insurance", 180000, Nothing, Nothing},
                {"Benefits and pensions", 130000, Nothing, Nothing},
                {"Vehicles", 125000, Nothing, Nothing},
                {"Research", 75000, Nothing, Nothing}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Name = "COST DATA and CHART"
            worksheet.TabColor = Color.FromArgb(63, 94, 101)
            worksheet.SheetView.DisplayGridlines = False

            'Set Value.
            worksheet.Range!B2.Value = "COST ANALYSIS - PARETO"
            worksheet.Range("B39").Value = "COST ANALYSIS"
            worksheet.Range("B41:E51").Value = data

            'Set NumberFormat.
            worksheet.Range("C42:C52").NumberFormat = """$""#,##0.00_);[Red](""$""#,##0.00)"
            worksheet.Range("D42:E52").NumberFormat = "0.00%"

            'Change the range's RowHeight and ColumnWidth.
            worksheet.StandardHeight = 15.75
            worksheet.StandardWidth = 8.43
            worksheet.Range("1:1").RowHeight = 12.75
            worksheet.Range("2:2").RowHeight = 20.25
            worksheet.Range("3:3").RowHeight = 16.5
            worksheet.Range("39:39").RowHeight = 20.25
            worksheet.Range("40:40").RowHeight = 16.5
            worksheet.Range("41:41").RowHeight = 29.25
            worksheet.Range("42:51").RowHeight = 20.1
            worksheet.Range("A:A").ColumnWidth = 1.44140625
            worksheet.Range("B:B").ColumnWidth = 25.88671875
            worksheet.Range("C:C").ColumnWidth = 18.5546875
            worksheet.Range("D:D").ColumnWidth = 17.77734375
            worksheet.Range("E:E").ColumnWidth = 20.77734375

            'Apply one build in name style on the ranges.
            worksheet.Range("B2:J2").Style = workbook.Styles("Heading 1")
            worksheet.Range("B39:E39").Style = workbook.Styles("Heading 1")

            'Create a table and apply one build in table style.
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("B41:E51"), True)
            table.Name = "tblData"
            table.TableStyle = workbook.TableStyles("TableStyleLight9")
            table.ShowTotals = True
            table.ShowTableStyleRowStripes = True

            'Use table formula in table range.
            worksheet.Range("D42:D51").Formula = "=[@[Annual Cost]]/SUM([[Annual Cost]])"
            worksheet.Range("E42:E51").Formula = "=SUM(INDEX([Percent of Total],1):[@[Percent of Total]])"
            table.Columns(1).TotalsCalculation = TotalsCalculation.Sum
            table.Columns(2).TotalsCalculation = TotalsCalculation.Sum
            table.Columns(3).TotalsCalculation = TotalsCalculation.None

            'Add chart.
            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 9.75, 48, 597, 472.5)
            shape.Name = "Pareto Chart"

            'Add Series.
            Dim series_ColumnClustered As ISeries = shape.Chart.SeriesCollection.NewSeries()
            series_ColumnClustered.Formula = "=SERIES('COST DATA and CHART'!$C$41,'COST DATA and CHART'!$B$42:$B$51,'COST DATA and CHART'!$C$42:$C$51,1)"
            series_ColumnClustered.Format.Fill.TwoColorGradient(GradientStyle.Horizontal, 1)
            series_ColumnClustered.Format.Fill.GradientAngle = 90
            series_ColumnClustered.Format.Fill.GradientStops(0).Color.ObjectThemeColor = ThemeColor.Accent1
            series_ColumnClustered.Format.Fill.GradientStops(0).Color.Brightness = 0
            series_ColumnClustered.Format.Fill.GradientStops(0).Position = 0
            series_ColumnClustered.Format.Fill.GradientStops(1).Color.ObjectThemeColor = ThemeColor.Accent1
            series_ColumnClustered.Format.Fill.GradientStops(1).Color.Brightness = -0.16
            series_ColumnClustered.Format.Fill.GradientStops(1).Position = 1
            series_ColumnClustered.Format.Line.Color.ObjectThemeColor = ThemeColor.Light1

            Dim series_Line As ISeries = shape.Chart.SeriesCollection.NewSeries()
            series_Line.ChartType = ChartType.Line
            series_Line.Formula = "=SERIES('COST DATA and CHART'!$E$41,,'COST DATA and CHART'!$E$42:$E$51,2)"
            series_Line.Format.Line.Weight = 2.25
            series_Line.AxisGroup = AxisGroup.Secondary

            'Change the secondary's maxinumscale.
            Dim secondary_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value, AxisGroup.Secondary)
            secondary_axis.MaximumScale = 1.0

            'Set the chart's title format.
            shape.Chart.ChartTitle.Text = "Cost Center"
            shape.Chart.ChartTitle.Font.ThemeFont = ThemeFont.Minor
            shape.Chart.ChartTitle.Font.Color.RGB = Color.FromArgb(89, 89, 89)
            shape.Chart.ChartTitle.Font.Size = 18

            'Set the chart has no legend.
            shape.Chart.HasLegend = False

            'Set the char group's Overlap and GapWidth.
            shape.Chart.ColumnGroups(0).Overlap = 0
            shape.Chart.ColumnGroups(0).GapWidth = 0

            'Set chart area's format.
            shape.Chart.ChartArea.Format.Fill.PresetGradient(GradientStyle.Horizontal, 1, PresetGradientType.EarlySunset)
            shape.Chart.ChartArea.Format.Fill.GradientStops.Delete(3)
            shape.Chart.ChartArea.Format.Fill.GradientStops.Delete(3)
            shape.Chart.ChartArea.Format.Fill.GradientAngle = 90
            shape.Chart.ChartArea.Format.Fill.GradientStops(0).Color.ObjectThemeColor = ThemeColor.Light1
            shape.Chart.ChartArea.Format.Fill.GradientStops(0).Color.Brightness = 0
            shape.Chart.ChartArea.Format.Fill.GradientStops(0).Position = 0
            shape.Chart.ChartArea.Format.Fill.GradientStops(1).Color.ObjectThemeColor = ThemeColor.Light1
            shape.Chart.ChartArea.Format.Fill.GradientStops(1).Color.Brightness = -0.15
            shape.Chart.ChartArea.Format.Fill.GradientStops(1).Position = 0.68
            shape.Chart.ChartArea.Format.Fill.GradientStops(2).Color.ObjectThemeColor = ThemeColor.Light1
            shape.Chart.ChartArea.Format.Fill.GradientStops(2).Color.Brightness = 0
            shape.Chart.ChartArea.Format.Fill.GradientStops(2).Position = 1

            'Create customize theme.
            Dim themes As New Themes
            Dim theme As ITheme = themes.Add("test")
            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.FromArgb(0, 0, 0)
            theme.ThemeColorScheme(ThemeColor.Light1).RGB = Color.FromArgb(255, 255, 255)
            theme.ThemeColorScheme(ThemeColor.Dark2).RGB = Color.FromArgb(96, 89, 88)
            theme.ThemeColorScheme(ThemeColor.Light2).RGB = Color.FromArgb(241, 246, 246)
            theme.ThemeColorScheme(ThemeColor.Accent1).RGB = Color.FromArgb(63, 94, 101)
            theme.ThemeColorScheme(ThemeColor.Accent2).RGB = Color.FromArgb(224, 170, 83)
            theme.ThemeColorScheme(ThemeColor.Accent3).RGB = Color.FromArgb(179, 29, 66)
            theme.ThemeColorScheme(ThemeColor.Accent4).RGB = Color.FromArgb(162, 67, 162)
            theme.ThemeColorScheme(ThemeColor.Accent5).RGB = Color.FromArgb(120, 59, 101)
            theme.ThemeColorScheme(ThemeColor.Accent6).RGB = Color.FromArgb(55, 120, 169)
            theme.ThemeColorScheme(ThemeColor.Hyperlink).RGB = Color.FromArgb(71, 166, 181)
            theme.ThemeColorScheme(ThemeColor.FollowedHyperlink).RGB = Color.FromArgb(120, 59, 101)
            theme.ThemeFontScheme.Major(FontLanguageIndex.Latin).Name = "Constantia"
            theme.ThemeFontScheme.Minor(FontLanguageIndex.Latin).Name = "Helvetica"

            'Apply the above custom theme.
            workbook.Theme = theme

            'Set active cell.
            worksheet.Range("B43").Activate()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.CustomerProfitabilityAnalysis" xml:space="preserve">
    <value>
            Dim data = {
                {Nothing, "[Segment Name]", "[Segment Name]", "[Segment Name]", "Overall"},
                {"Customer Activity:", Nothing, Nothing, Nothing, Nothing},
                {"Number of active customers—Beginning of period", 5, 8, 8, Nothing},
                {"Number of customers added", 2, 4, 4, Nothing},
                {"Number of customers lost/terminated", -1, -2, -2, Nothing},
                {"Number of active customers—End of period", Nothing, Nothing, Nothing, Nothing},
                {Nothing, Nothing, Nothing, Nothing, Nothing},
                {"Profitability Analysis:", Nothing, Nothing, Nothing, Nothing},
                {"Revenue per segment", 1500000, 1800000, 2500000, Nothing},
                {"Weighting", Nothing, Nothing, Nothing, Nothing},
                {Nothing, Nothing, Nothing, Nothing, Nothing},
                {"Cost of sales:", Nothing, Nothing, Nothing, Nothing},
                {"Ongoing service and support costs", 1000000, 1400000, 1400000, Nothing},
                {"Other direct customer costs", 200000, 100000, 100000, Nothing},
                {"Total cost of sales", Nothing, Nothing, Nothing, Nothing},
                {"Gross margin", Nothing, Nothing, Nothing, Nothing},
                {"Weighting", Nothing, Nothing, Nothing, Nothing},
                {Nothing, Nothing, Nothing, Nothing, Nothing},
                {"Other costs:", Nothing, Nothing, Nothing, Nothing},
                {"Customer acquisition", 105000, 120000, 235000, Nothing},
                {"Customer marketing", 150000, 125000, 275000, Nothing},
                {"Customer termination", 80000, 190000, 140000, Nothing},
                {"Total other customer costs", Nothing, Nothing, Nothing, Nothing},
                {"Customer profit by segment", Nothing, Nothing, Nothing, Nothing},
                {"Weighting", Nothing, Nothing, Nothing, Nothing},
                {Nothing, Nothing, Nothing, Nothing, Nothing},
                {"Summary Metrics:", "[Segment Name]", "[Segment Name]", "[Segment Name]", "Trend"},
                {"Average cost per acquired customer", Nothing, Nothing, Nothing, Nothing},
                {"Average cost per terminated customer", Nothing, Nothing, Nothing, Nothing},
                {"Average marketing cost per active customer", Nothing, Nothing, Nothing, Nothing},
                {"Average profit (loss) per customer", Nothing, Nothing, Nothing, Nothing}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Name = "Customer Profitability"
            worksheet.TabColor = Color.FromArgb(131, 172, 121)
            worksheet.SheetView.DisplayGridlines = False

            'Set Value.
            worksheet.Range!B2.Value = "[Company Name]"
            worksheet.Range!B3.Value = "Customer Profitability Analysis"
            worksheet.Range!B4.Value = "[Date]"
            worksheet.Range!B6.Value = "Gray cells will be calculated for you. You do not need to enter anything into them."
            worksheet.Range("B7:F37").Value = data

            'Set formula.
            worksheet.Range("F9:F11").Formula = "=SUM(C9:E9)"
            worksheet.Range("C12:F12").Formula = "=SUM(C9:C11)"
            worksheet.Range("C16:E16").Formula = "=+C15/$F$15"
            worksheet.Range("F15:F16").Formula = "=SUM(C15:E15)"
            worksheet.Range("F19:F20").Formula = "=SUM(C19:E19)"
            worksheet.Range("C21:F21").Formula = "=SUM(C19:C20)"
            worksheet.Range("C22:F22").Formula = "=+C15-C21"
            worksheet.Range("C23:E23").Formula = "=MAX(0, MIN(1,C22/$F$22))"
            worksheet.Range("F23").Formula = "=SUM(C23:E23)"
            worksheet.Range("F26:F28").Formula = "=SUM(C26:E26)"
            worksheet.Range("C29:F29").Formula = "=SUM(C26:C28)"
            worksheet.Range("C30:E30").Formula = "=+C22-C29"
            worksheet.Range("C31:E31").Formula = "=MAX(0,MIN(1, C30/$F$30))"
            worksheet.Range("F30:F31").Formula = "=SUM(C30:E30)"
            worksheet.Range("C34:E34").Formula = "=+C26/C10"
            worksheet.Range("C35:E35").Formula = "=-C28/C11"
            worksheet.Range("C36:E36").Formula = "=+C27/C12"
            worksheet.Range("C37:E37").Formula = "=+C30/C12"

            'Change the range's RowHeight and ColumnWidth.
            worksheet.StandardHeight = 15
            worksheet.StandardWidth = 9.140625
            worksheet.Rows(0).RowHeight = 9.95
            worksheet.Rows(1).RowHeight = 33
            worksheet.Rows(2).RowHeight = 27
            worksheet.Rows(3).RowHeight = 19.5
            worksheet.Rows(4).RowHeight = 9
            worksheet.Rows(5).RowHeight = 19.5
            worksheet.Rows(6).RowHeight = 18
            worksheet.Rows(12).RowHeight = 9
            worksheet.Rows(16).RowHeight = 9
            worksheet.Rows(23).RowHeight = 9
            worksheet.Rows(31).RowHeight = 9
            worksheet.Columns(0).ColumnWidth = 1.85546875
            worksheet.Columns(1).ColumnWidth = 46.7109375
            worksheet.Columns(2).ColumnWidth = 16.42578125
            worksheet.Columns(3).ColumnWidth = 16.42578125
            worksheet.Columns(4).ColumnWidth = 16.42578125
            worksheet.Columns(5).ColumnWidth = 16.42578125

            'Modify the build in name styles.
            Dim nameStyle_Normal = workbook.Styles("Normal")
            nameStyle_Normal.VerticalAlignment = VerticalAlignment.Center
            nameStyle_Normal.Font.ThemeColor = ThemeColor.Dark1
            nameStyle_Normal.Font.TintAndShade = 0.249946592608417
            nameStyle_Normal.Font.Size = 10

            Dim nameStyle_Heading_1 = workbook.Styles("Heading 1")
            nameStyle_Heading_1.HorizontalAlignment = HorizontalAlignment.Left
            nameStyle_Heading_1.VerticalAlignment = VerticalAlignment.Center
            nameStyle_Heading_1.Font.ThemeFont = ThemeFont.Major
            nameStyle_Heading_1.Font.Bold = False
            nameStyle_Heading_1.Font.Size = 24
            nameStyle_Heading_1.Font.ThemeColor = ThemeColor.Dark1
            nameStyle_Heading_1.Font.TintAndShade = 0.249946592608417
            nameStyle_Heading_1.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.None
            nameStyle_Heading_1.IncludeAlignment = True

            Dim nameStyle_Heading_2 = workbook.Styles("Heading 2")
            nameStyle_Heading_2.HorizontalAlignment = HorizontalAlignment.Left
            nameStyle_Heading_2.VerticalAlignment = VerticalAlignment.Center
            nameStyle_Heading_2.Font.ThemeFont = ThemeFont.Major
            nameStyle_Heading_2.Font.Bold = False
            nameStyle_Heading_2.Font.Size = 20
            nameStyle_Heading_2.Font.ThemeColor = ThemeColor.Dark1
            nameStyle_Heading_2.Font.TintAndShade = 0.249946592608417
            nameStyle_Heading_2.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.None
            nameStyle_Heading_2.Interior.ThemeColor = ThemeColor.Accent3
            nameStyle_Heading_2.Interior.TintAndShade = 0.39994506668294322
            nameStyle_Heading_2.IncludeNumber = True
            nameStyle_Heading_2.IncludePatterns = True

            Dim nameStyle_Heading_3 = workbook.Styles("Heading 3")
            nameStyle_Heading_3.HorizontalAlignment = HorizontalAlignment.Left
            nameStyle_Heading_3.VerticalAlignment = VerticalAlignment.Center
            nameStyle_Heading_3.Font.ThemeFont = ThemeFont.Major
            nameStyle_Heading_3.Font.Bold = False
            nameStyle_Heading_3.Font.Size = 14
            nameStyle_Heading_3.Font.ThemeColor = ThemeColor.Dark1
            nameStyle_Heading_3.Font.TintAndShade = 0.249946592608417
            nameStyle_Heading_3.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.None
            nameStyle_Heading_3.IncludeAlignment = True
            nameStyle_Heading_3.IncludePatterns = True

            Dim nameStyle_Heading_4 = workbook.Styles("Heading 4")
            nameStyle_Heading_4.HorizontalAlignment = HorizontalAlignment.Left
            nameStyle_Heading_4.VerticalAlignment = VerticalAlignment.Center
            nameStyle_Heading_4.Font.ThemeFont = ThemeFont.Major
            nameStyle_Heading_4.Font.Bold = True
            nameStyle_Heading_4.Font.Size = 10
            nameStyle_Heading_4.Font.ThemeColor = ThemeColor.Light1
            nameStyle_Heading_4.Font.TintAndShade = -0.0499893185216834
            nameStyle_Heading_4.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.None
            nameStyle_Heading_4.Interior.ThemeColor = ThemeColor.Accent3
            nameStyle_Heading_4.Interior.TintAndShade = -0.249946592608417
            nameStyle_Heading_4.IncludeAlignment = True
            nameStyle_Heading_4.IncludeBorder = True
            nameStyle_Heading_4.IncludePatterns = True

            'Apply the above name styles on ranges.
            worksheet.Range("B2:F2").Style = workbook.Styles("Heading 1")
            worksheet.Range("B3:F3").Style = workbook.Styles("Heading 2")
            worksheet.Range("B4:F4").Style = workbook.Styles("Heading 3")
            worksheet.Range("B8:F8").Style = workbook.Styles("Heading 4")
            worksheet.Range("B14:F14").Style = workbook.Styles("Heading 4")
            worksheet.Range("B18:F18").Style = workbook.Styles("Heading 4")
            worksheet.Range("B25:F25").Style = workbook.Styles("Heading 4")
            worksheet.Range("B33:F33").Style = workbook.Styles("Heading 4")

            'Set NumberFormat.
            worksheet.Range("C9:F12").NumberFormat = "0_);[Red](0)"
            worksheet.Range("C15:F15").NumberFormat = """$""#,##0.00_);[Red](""$""#,##0.00)"
            worksheet.Range("C16:F16").NumberFormat = "0%"
            worksheet.Range("C19:F22").NumberFormat = """$""#,##0.00_);[Red](""$""#,##0.00)"
            worksheet.Range("C23:F23").NumberFormat = "0%"
            worksheet.Range("C26:F30").NumberFormat = """$""#,##0.00_);[Red](""$""#,##0.00)"
            worksheet.Range("C31:F31").NumberFormat = "0%"
            worksheet.Range("C34:F37").NumberFormat = """$""#,##0.00_);[Red](""$""#,##0.00)"

            'Set range's font style.
            worksheet.Range!B6.Font.TintAndShade = 0.34998626667073579
            worksheet.Range!B6.Font.Size = 8
            worksheet.Range!B6.Font.Italic = True
            worksheet.Range("C7:F7").Font.TintAndShade = 0
            worksheet.Range("B9:F12").Font.TintAndShade = 0
            worksheet.Range("B15:F16").Font.TintAndShade = 0
            worksheet.Range("B19:F23").Font.TintAndShade = 0
            worksheet.Range("B26:F31").Font.TintAndShade = 0
            worksheet.Range("B34:F37").Font.TintAndShade = 0
            worksheet.Range("C33:F33").Font.Bold = False

            'Set range's alignment.
            worksheet.Range("C7:F7").HorizontalAlignment = HorizontalAlignment.Center
            worksheet.Range("C33:F33").HorizontalAlignment = HorizontalAlignment.Center

            'Set range's border
            worksheet.Range("B9:F12").Borders.LineStyle = BorderLineStyle.Thin
            worksheet.Range("B9:F12").Borders.ThemeColor = ThemeColor.Accent3
            worksheet.Range("B9:F12").Borders.TintAndShade = 0.39994506668294322
            worksheet.Range("B15:F16").Borders.LineStyle = BorderLineStyle.Thin
            worksheet.Range("B15:F16").Borders.ThemeColor = ThemeColor.Accent3
            worksheet.Range("B15:F16").Borders.TintAndShade = 0.39994506668294322
            worksheet.Range("B19:F23").Borders.LineStyle = BorderLineStyle.Thin
            worksheet.Range("B19:F23").Borders.ThemeColor = ThemeColor.Accent3
            worksheet.Range("B19:F23").Borders.TintAndShade = 0.39994506668294322
            worksheet.Range("B26:F31").Borders.LineStyle = BorderLineStyle.Thin
            worksheet.Range("B26:F31").Borders.ThemeColor = ThemeColor.Accent3
            worksheet.Range("B26:F31").Borders.TintAndShade = 0.39994506668294322
            worksheet.Range("B34:F37").Borders.LineStyle = BorderLineStyle.Thin
            worksheet.Range("B34:F37").Borders.ThemeColor = ThemeColor.Accent3
            worksheet.Range("B34:F37").Borders.TintAndShade = 0.39994506668294322

            'Set range's fill.
            worksheet.Range("F9:F12").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("F9:F12").Interior.TintAndShade = -0.0499893185216834
            worksheet.Range("C12:E12").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("C12:E12").Interior.TintAndShade = -0.0499893185216834
            worksheet.Range("F15:F16").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("F15:F16").Interior.TintAndShade = -0.0499893185216834
            worksheet.Range("C16:E16").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("C16:E16").Interior.TintAndShade = -0.0499893185216834
            worksheet.Range("F19:F23").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("F19:F23").Interior.TintAndShade = -0.0499893185216834
            worksheet.Range("C21:E23").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("C21:E23").Interior.TintAndShade = -0.0499893185216834
            worksheet.Range("F26:F31").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("F26:F31").Interior.TintAndShade = -0.0499893185216834
            worksheet.Range("C29:E31").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("C29:E31").Interior.TintAndShade = -0.0499893185216834
            worksheet.Range("C34:E37").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("C34:E37").Interior.TintAndShade = -0.0499893185216834

            'create a new group of sparklines.
            Dim sparklineGroup As ISparklineGroup = worksheet.Range("F34:F37").SparklineGroups.Add(SparkType.Line, "C34:E37")
            sparklineGroup.SeriesColor.ThemeColor = ThemeColor.Accent3
            sparklineGroup.SeriesColor.TintAndShade = -0.249977111117893
            sparklineGroup.Points.Negative.Color.ThemeColor = ThemeColor.Accent4
            sparklineGroup.Points.Markers.Color.ThemeColor = ThemeColor.Accent4
            sparklineGroup.Points.Markers.Color.TintAndShade = -0.249977111117893
            sparklineGroup.Points.Highpoint.Color.ThemeColor = ThemeColor.Accent4
            sparklineGroup.Points.Highpoint.Color.TintAndShade = -0.249977111117893
            sparklineGroup.Points.Lowpoint.Color.ThemeColor = ThemeColor.Accent4
            sparklineGroup.Points.Lowpoint.Color.TintAndShade = -0.249977111117893
            sparklineGroup.Points.Firstpoint.Color.ThemeColor = ThemeColor.Accent4
            sparklineGroup.Points.Firstpoint.Color.TintAndShade = -0.249977111117893
            sparklineGroup.Points.Lastpoint.Color.ThemeColor = ThemeColor.Accent4
            sparklineGroup.Points.Lastpoint.Color.TintAndShade = -0.249977111117893
            sparklineGroup.Points.Negative.Visible = False
            sparklineGroup.Points.Firstpoint.Visible = False
            sparklineGroup.Points.Lastpoint.Visible = False

            'Add chart.
            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 9.75, 576.95, 590.25, 237)
            shape.Name = "Chart 3"

            'Add Series.
            Dim series1 As ISeries = shape.Chart.SeriesCollection.NewSeries()
            series1.Formula = "=SERIES('Customer Profitability'!$B$34,'Customer Profitability'!$C$33:$E$33,'Customer Profitability'!$C$34:$E$34,1)"
            series1.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent2
            Dim series2 As ISeries = shape.Chart.SeriesCollection.NewSeries()
            series2.Formula = "=SERIES('Customer Profitability'!$B$35,'Customer Profitability'!$C$33:$E$33,'Customer Profitability'!$C$35:$E$35,2)"
            series2.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent4
            Dim series3 As ISeries = shape.Chart.SeriesCollection.NewSeries()
            series3.Formula = "=SERIES('Customer Profitability'!$B$36,'Customer Profitability'!$C$33:$E$33,'Customer Profitability'!$C$36:$E$36,3)"
            series3.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent3
            Dim series4 As ISeries = shape.Chart.SeriesCollection.NewSeries()
            series4.Formula = "=SERIES('Customer Profitability'!$B$37,'Customer Profitability'!$C$33:$E$33,'Customer Profitability'!$C$37:$E$37,4)"
            series4.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent5

            'Set the char group's Overlap and GapWidth.
            shape.Chart.ColumnGroups(0).Overlap = 0
            shape.Chart.ColumnGroups(0).GapWidth = 199

            'Set the chart's title format.
            Dim chartTitle = shape.Chart.ChartTitle
            chartTitle.Text = "Summary Metrics per Customer Segment"
            chartTitle.Font.ThemeFont = ThemeFont.Major
            chartTitle.Font.Color.ObjectThemeColor = ThemeColor.Dark1
            chartTitle.Font.Size = 20

            'Set the chart legend's position.
            shape.Chart.Legend.Position = LegendPosition.Top

            'Set category axis format.
            Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category)
            category_axis.HasTitle = True
            category_axis.AxisTitle.Text = "SEGMENT"
            category_axis.AxisTitle.Font.Size = 9
            category_axis.AxisTitle.Font.ThemeFont = ThemeFont.Minor

            'Set value axis format.
            Dim value_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            value_axis.CrossesAt = -200000
            value_axis.HasMinorGridlines = True
            value_axis.MinorGridlines.Format.Line.Color.ObjectThemeColor = ThemeColor.Dark1
            value_axis.MinorGridlines.Format.Line.Color.Brightness = 0.95

            'Create customize theme.
            Dim themes As New Themes
            Dim theme As ITheme = themes.Add("test")
            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.FromArgb(0, 0, 0)
            theme.ThemeColorScheme(ThemeColor.Light1).RGB = Color.FromArgb(255, 255, 255)
            theme.ThemeColorScheme(ThemeColor.Dark2).RGB = Color.FromArgb(77, 70, 70)
            theme.ThemeColorScheme(ThemeColor.Light2).RGB = Color.FromArgb(255, 251, 239)
            theme.ThemeColorScheme(ThemeColor.Accent1).RGB = Color.FromArgb(255, 225, 132)
            theme.ThemeColorScheme(ThemeColor.Accent2).RGB = Color.FromArgb(102, 173, 166)
            theme.ThemeColorScheme(ThemeColor.Accent3).RGB = Color.FromArgb(131, 172, 121)
            theme.ThemeColorScheme(ThemeColor.Accent4).RGB = Color.FromArgb(254, 191, 102)
            theme.ThemeColorScheme(ThemeColor.Accent5).RGB = Color.FromArgb(219, 112, 87)
            theme.ThemeColorScheme(ThemeColor.Accent6).RGB = Color.FromArgb(165, 115, 137)
            theme.ThemeColorScheme(ThemeColor.Hyperlink).RGB = Color.FromArgb(102, 173, 166)
            theme.ThemeColorScheme(ThemeColor.FollowedHyperlink).RGB = Color.FromArgb(165, 115, 137)
            theme.ThemeFontScheme.Major(FontLanguageIndex.Latin).Name = "Marion"
            theme.ThemeFontScheme.Minor(FontLanguageIndex.Latin).Name = "Marion"

            'Apply the above custom theme.
            workbook.Theme = theme

            'Set active cell.
            worksheet.Range!B7.Activate()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.MovieList" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            '------------------Set RowHeight &amp; ColumnWidth----------------
            worksheet.StandardHeight = 43.5
            worksheet.StandardWidth = 8.43
            worksheet.Range("1:1").RowHeight = 171
            worksheet.Range("2:2").RowHeight = 12.75
            worksheet.Range("3:3").RowHeight = 22.5
            worksheet.Range("4:7").RowHeight = 43.75
            worksheet.Range("A:A").ColumnWidth = 2.887
            worksheet.Range("B:B").ColumnWidth = 8.441
            worksheet.Range("C:C").ColumnWidth = 12.777
            worksheet.Range("D:D").ColumnWidth = 25.109
            worksheet.Range("E:E").ColumnWidth = 12.109
            worksheet.Range("F:F").ColumnWidth = 41.664
            worksheet.Range("G:G").ColumnWidth = 18.555
            worksheet.Range("H:H").ColumnWidth = 11
            worksheet.Range("I:I").ColumnWidth = 13.664
            worksheet.Range("J:J").ColumnWidth = 15.109
            worksheet.Range("K:K").ColumnWidth = 38.887
            worksheet.Range("L:L").ColumnWidth = 2.887

            '------------------------Set Table Values-------------------
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("B3:K7"), True)
            worksheet.Range("B3:K7").Value = New Object(,)  {
                {"NO.", "YEAR", "TITLE", "REVIEW", "STARRING ACTORS", "DIRECTOR", "GENRE", "RATING", "FORMAT", "COMMENTS"},
                {1, 1994, "Forrest Gump", "5 Stars", "Tom Hanks, Robin Wright, Gary Sinise", "Robert Zemeckis", "Drama", "PG-13", "DVD", "Based on the 1986 novel of the same name by Winston Groom"},
                {2, 1946, "It’s a Wonderful Life", "2 Stars", "James Stewart, Donna Reed, Lionel Barrymore ", "Frank Capra", "Drama", "G", "VHS", "Colorized version"},
                {3, 1988, "Big", "4 Stars", "Tom Hanks, Elizabeth Perkins, Robert Loggia ", "Penny Marshall", "Comedy", "PG", "DVD", ""},
                {4, 1954, "Rear Window", "3 Stars", "James Stewart, Grace Kelly, Wendell Corey ", "Alfred Hitchcock", "Suspense", "PG", "Blu-ray", ""}
            }

            '-----------------------Set Table style--------------------
            Dim tableStyle As ITableStyle = workbook.TableStyles.Add("Movie List")
            workbook.DefaultTableStyle = "Movie List"
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Interior.Color = Color.White
            tableStyle.TableStyleElements(TableStyleElementType.FirstRowStripe).Interior.Color = Color.FromArgb(38, 38, 38)
            tableStyle.TableStyleElements(TableStyleElementType.SecondRowStripe).Interior.Color = Color.Black
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Font.Color = Color.Black
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders.Color = Color.FromArgb(38, 38, 38)
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Interior.Color = Color.FromArgb(68, 217, 255)
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thick
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.None
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.None
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.None
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.None
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.InsideVertical).LineStyle = BorderLineStyle.None

            '--------------------------------Set Named Styles---------------------
            Dim movieListBorderStyle As IStyle = workbook.Styles.Add("Movie list border")
            movieListBorderStyle.IncludeNumber = True
            movieListBorderStyle.IncludeAlignment = True
            movieListBorderStyle.VerticalAlignment = VerticalAlignment.Center
            movieListBorderStyle.WrapText = True
            movieListBorderStyle.IncludeFont = True
            movieListBorderStyle.Font.Name = "Helvetica"
            movieListBorderStyle.Font.Size = 11
            movieListBorderStyle.Font.Color = Color.White
            movieListBorderStyle.IncludeBorder = True
            movieListBorderStyle.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick
            movieListBorderStyle.Borders(BordersIndex.EdgeBottom).Color = Color.FromArgb(38, 38, 38)
            movieListBorderStyle.IncludePatterns = True
            movieListBorderStyle.Interior.Color = Color.FromArgb(238, 219, 78)

            Dim nOStyle As IStyle = workbook.Styles.Add("NO.")
            nOStyle.IncludeNumber = True
            nOStyle.IncludeAlignment = True
            nOStyle.HorizontalAlignment = HorizontalAlignment.Left
            nOStyle.VerticalAlignment = VerticalAlignment.Center
            nOStyle.IncludeFont = True
            nOStyle.Font.Name = "Helvetica"
            nOStyle.Font.Size = 11
            nOStyle.Font.Color = Color.White
            nOStyle.IncludeBorder = True
            nOStyle.IncludePatterns = True
            nOStyle.Interior.Color = Color.FromArgb(38, 38, 38)

            Dim reviewStyle As IStyle = workbook.Styles.Add("Review")
            reviewStyle.IncludeNumber = True
            reviewStyle.IncludeAlignment = True
            reviewStyle.VerticalAlignment = VerticalAlignment.Center
            reviewStyle.IncludeFont = True
            reviewStyle.Font.Name = "Helvetica"
            reviewStyle.Font.Size = 11
            reviewStyle.Font.Color = Color.White
            reviewStyle.IncludeBorder = True
            reviewStyle.IncludePatterns = True
            reviewStyle.Interior.Color = Color.FromArgb(38, 38, 38)

            Dim yearStyle As IStyle = workbook.Styles.Add("Year")
            yearStyle.IncludeNumber = True
            yearStyle.IncludeAlignment = True
            yearStyle.HorizontalAlignment = HorizontalAlignment.Left
            yearStyle.VerticalAlignment = VerticalAlignment.Center
            yearStyle.IncludeFont = True
            yearStyle.Font.Name = "Helvetica"
            yearStyle.Font.Size = 11
            yearStyle.Font.Color = Color.White
            yearStyle.IncludeBorder = True
            yearStyle.IncludePatterns = True
            yearStyle.Interior.Color = Color.FromArgb(38, 38, 38)

            Dim heading1Style As IStyle = workbook.Styles("Heading 1")
            heading1Style.IncludeAlignment = True
            heading1Style.VerticalAlignment = VerticalAlignment.Bottom
            heading1Style.IncludeBorder = True
            heading1Style.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick
            heading1Style.Borders(BordersIndex.EdgeBottom).Color = Color.FromArgb(68, 217, 255)
            heading1Style.IncludeFont = True
            heading1Style.Font.Name = "Helvetica"
            heading1Style.Font.Bold = False
            heading1Style.Font.Size = 12
            heading1Style.Font.Color = Color.Black

            Dim normalStyle As IStyle = workbook.Styles("Normal")
            normalStyle.IncludeNumber = True
            normalStyle.IncludeAlignment = True
            normalStyle.VerticalAlignment = VerticalAlignment.Center
            normalStyle.WrapText = True
            normalStyle.IncludeFont = True
            normalStyle.Font.Name = "Helvetica"
            normalStyle.Font.Size = 11
            normalStyle.Font.Color = Color.White
            normalStyle.IncludePatterns = True
            normalStyle.Interior.Color = Color.FromArgb(38, 38, 38)

            '-----------------------------Use NamedStyle--------------------------
            worksheet.SheetView.DisplayGridlines = False
            worksheet.TabColor = Color.FromArgb(38, 38, 38)
            table.TableStyle = tableStyle
            worksheet.Range("A2:L2").Style = movieListBorderStyle
            worksheet.Range("B3:K3").Style = heading1Style
            worksheet.Range("B4:B7").Style = nOStyle
            worksheet.Range("C4:C7").Style = yearStyle
            worksheet.Range("E4:E7").Style = reviewStyle
            worksheet.Range("F4:F7").IndentLevel = 1
            worksheet.Range("F4:F7").HorizontalAlignment = HorizontalAlignment.Left

            '-----------------------------Add Shapes------------------------------
            'Movie picture
            Dim stream As IO.Stream = GetResourceStream("movie.png")
            Dim pictureShape As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 0, 1, worksheet.Range("A:L").Width, worksheet.Range("1:1").Height - 1.5)
            pictureShape.Placement = Placement.Move

            'Movie list picture
            Dim stream2 As IO.Stream = GetResourceStream("list.png")
            Dim pictureShape2 As IShape = worksheet.Shapes.AddPicture(stream2, ImageType.PNG, 1, 0.8, 325.572, 85.51)
            pictureShape2.Placement = Placement.Move

            'Rounded Rectangular Callout 7
            Dim roundedRectangular As IShape = worksheet.Shapes.AddShape(AutoShapeType.RoundedRectangularCallout, 437.5, 22.75, 342, 143)
            roundedRectangular.Name = "Rounded Rectangular Callout 7"
            roundedRectangular.Placement = Placement.Move
            roundedRectangular.TextFrame.TextRange.Font.Name = "Helvetica"
            roundedRectangular.TextFrame.TextRange.Font.Color.RGB = Color.FromArgb(38, 38, 38)
            roundedRectangular.Fill.Solid()
            roundedRectangular.Fill.Color.RGB = Color.FromArgb(68, 217, 255)
            roundedRectangular.Fill.Transparency = 0
            roundedRectangular.Line.Solid()
            roundedRectangular.Line.Color.RGB = Color.FromArgb(0, 129, 162)
            roundedRectangular.Line.Weight = 2
            roundedRectangular.Line.Transparency = 0

            Dim roundedRectangular_p0 As ITextRange = roundedRectangular.TextFrame.TextRange.Paragraphs(0)
            roundedRectangular_p0.Runs.Font.Bold = True
            roundedRectangular_p0.Runs.Add("TABLE")
            roundedRectangular_p0.Runs.Add(" TIP")
            roundedRectangular.TextFrame.TextRange.Paragraphs.Add("")

            Dim roundedRectangular_p2 As ITextRange = roundedRectangular.TextFrame.TextRange.Paragraphs.Add()
            roundedRectangular_p2.Runs.Add("Use the drop down arrows in the table headings to quickly filter your movie list. " &amp; "For multiple entry fields, such as Starring Actors,  select the drop down arrow next to the field and enter text in the Search box. " &amp; "For example, type Tom Hanks or James Stewart, and then select OK.")
            roundedRectangular.TextFrame.TextRange.Paragraphs.Add("")

            Dim roundedRectangular_p4 As ITextRange = roundedRectangular.TextFrame.TextRange.Paragraphs.Add()
            roundedRectangular_p4.Runs.Add("To delete this note, click the edge to select it and then press ")
            roundedRectangular_p4.Runs.Add("Delete")
            roundedRectangular_p4.Runs.Add(".")
            roundedRectangular_p4.Runs(2).Font.Bold = True
            roundedRectangular.TextFrame.TextRange.Paragraphs.Add("")

            'Add Stright Line Shape
            Dim lineShape As IShape = worksheet.Shapes.AddConnector(ConnectorType.Straight, 455.228F, 57.35F, 756.228F, 57.35F)
            lineShape.Line.Solid()
            lineShape.Line.Weight = 3
            lineShape.Line.Color.RGB = Color.FromArgb(38, 38, 38)
            lineShape.Line.DashStyle = LineDashStyle.SysDot
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.PersonalAddressBook" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            '***************************Set RowHeight &amp; Width****************************
            worksheet.StandardHeight = 30
            worksheet.Range("3:4").RowHeight = 30.25
            worksheet.Range("1:1").RowHeight = 103.5
            worksheet.Range("2:2").RowHeight = 38.25
            worksheet.Range("A:A").ColumnWidth = 2.625
            worksheet.Range("B:B").ColumnWidth = 22.25
            worksheet.Range("C:E").ColumnWidth = 17.25
            worksheet.Range("F:F").ColumnWidth = 31.875
            worksheet.Range("G:G").ColumnWidth = 22.625
            worksheet.Range("H:H").ColumnWidth = 30
            worksheet.Range("I:I").ColumnWidth = 20.25
            worksheet.Range("J:J").ColumnWidth = 17.625
            worksheet.Range("K:K").ColumnWidth = 12.625
            worksheet.Range("L:L").ColumnWidth = 37.25
            worksheet.Range("M:M").ColumnWidth = 2.625

            '*******************************Set Table Value &amp; Formulas*************************************
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("B2:L4"), True)
            worksheet.Range("B2:L4").Value = New Object(,)  {
                {"NAME", "WORK", "CELL", "HOME", "EMAIL", "BIRTHDAY", "ADDRESS", "CITY", "STATE", "ZIP", "NOTE"},
                {"Kim Abercrombie", 1235550123, 1235550123, 1235550123, "someone@example.com", Nothing, "123 N. Maple", "Cherryville", "WA", 98031, ""},
                {"John Smith", 3215550123, "", "", "someone@example.com", Nothing, "456 E. Aspen", "", "", "", ""}
            }
            worksheet.Range!B1.Value = "ADDRESS BOOK"
            worksheet.Range!G3.Formula = "=TODAY()"
            worksheet.Range!G4.Formula = "=TODAY()+5"

            '****************************Set Table Style********************************
            Dim tableStyle As ITableStyle = workbook.TableStyles.Add("Personal Address Book")
            workbook.DefaultTableStyle = "Personal Address Book"

            'Set WholeTable element style.
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders.Color = Color.FromArgb(179, 35, 23)
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideVertical).LineStyle = BorderLineStyle.Thin
            tableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Thin

            'Set FirstColumn element style.
            tableStyle.TableStyleElements(TableStyleElementType.FirstColumn).Font.Bold = True

            'Set SecondColumns element style.
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders.Color = Color.FromArgb(179, 35, 23)
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thick
            tableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick

            '***********************************Set Named Styles*****************************
            Dim normalStyle As IStyle = workbook.Styles("Normal")
            normalStyle.Font.Name = "Arial"
            normalStyle.Font.Color = Color.FromArgb(179, 35, 23)
            normalStyle.HorizontalAlignment = HorizontalAlignment.Left
            normalStyle.IndentLevel = 1
            normalStyle.VerticalAlignment = VerticalAlignment.Center
            normalStyle.WrapText = True

            Dim titleStyle As IStyle = workbook.Styles("Title")
            titleStyle.IncludeAlignment = True
            titleStyle.HorizontalAlignment = HorizontalAlignment.Left
            titleStyle.VerticalAlignment = VerticalAlignment.Center
            titleStyle.Font.Name = "Arial"
            titleStyle.Font.Bold = True
            titleStyle.Font.Size = 72
            titleStyle.Font.Color = Color.FromArgb(179, 35, 23)

            Dim heading1Style As IStyle = workbook.Styles("Heading 1")
            heading1Style.IncludeBorder = False
            heading1Style.Font.Name = "Arial"
            heading1Style.Font.Size = 18
            heading1Style.Font.Color = Color.FromArgb(179, 35, 23)

            Dim dataStyle As IStyle = workbook.Styles.Add("Data")
            dataStyle.IncludeNumber = True
            dataStyle.NumberFormat = "m/d/yyyy"

            Dim phoneStyle As IStyle = workbook.Styles.Add("Phone")
            phoneStyle.IncludeNumber = True
            phoneStyle.NumberFormat = "[&lt;=9999999]###-####;(###) ###-####"

            '****************************************Use NamedStyle**************************
            worksheet.SheetView.DisplayGridlines = False
            worksheet.Range("B2:L2").Interior.Color = Color.FromArgb(217, 217, 217)
            worksheet.Range("B3:B4").Font.Bold = True
            worksheet.Range("2:2").HorizontalAlignment = HorizontalAlignment.Left
            table.TableStyle = tableStyle
            worksheet.Range!B1.Style = titleStyle
            worksheet.Range("B2:L2").Style = heading1Style
            worksheet.Range("C3:E4").Style = phoneStyle
            worksheet.Range("G3:G4").Style = dataStyle
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.PersonalNetWorthCalculator" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            '-------------------------Set RowHeight &amp; Width-----------------------------------
            worksheet.StandardHeight = 30
            worksheet.StandardWidth = 8.43
            worksheet.Range("1:1").RowHeight = 278.25
            worksheet.Range("2:4").RowHeight = 30.25
            worksheet.Range("8:8").RowHeight = 55.5
            worksheet.Range("9:30").RowHeight = 30.25
            worksheet.Range("33:33").RowHeight = 55.5
            worksheet.Range("34:44").RowHeight = 43.5
            worksheet.Range("A:A").ColumnWidth = 2.777
            worksheet.Range("B:B").ColumnWidth = 32.887
            worksheet.Range("C:C").ColumnWidth = 24.219
            worksheet.Range("D:D").ColumnWidth = 10.109
            worksheet.Range("E:E").ColumnWidth = 61.332
            worksheet.Range("F:F").ColumnWidth = 2.777

            '-------------------------Set Table Value &amp; Formulas-------------------------------
            Dim assetsTable As ITable = worksheet.Tables.Add(worksheet.Range("B9:D30"), True)
            assetsTable.Name = "Assets"
            worksheet.Range!B8.Value = "Assets"
            worksheet.Range("B9:D30").Value = New Object(,)  {
                {"Category", "Item", "Value"},
                {"Real Estate", "Home", 560000},
                {"Real Estate", "Other", 255000},
                {"Investments", "Retirement accounts", 98000},
                {"Investments", "Stocks", 53000},
                {"Investments", "Bonds", 25000},
                {"Investments", "Mutual funds", 33000},
                {"Investments", "CDs", 74000},
                {"Investments", "Bullion", 20000},
                {"Investments", "Trust funds", 250000},
                {"Investments", "Health savings account", 18000},
                {"Investments", "Face value of life insurance policy", 85000},
                {"Investments", "Other", 20000},
                {"Cash", "Checking accounts", 14500},
                {"Cash", "Savings accounts", 5000},
                {"Cash", "Other", 2000},
                {"Personal Property", "Cars", 55000},
                {"Personal Property", "Other vehicles", 85000},
                {"Personal Property", "Furnishings", 100000},
                {"Personal Property", "Collectibles", 50000},
                {"Personal Property", "Jewelry", 60000},
                {"Personal Property", "Other luxury goods", 40000}
            }

            Dim debtsTable As ITable = worksheet.Tables.Add(worksheet.Range("B34:C44"), True)
            debtsTable.Name = "Debts"
            worksheet.Range("B33").Value = "Debts"
            worksheet.Range("B34:C44").Value = New Object(,)  {
                {"Category", "Value"},
                {"Mortgages", 400000},
                {"Home equity loans", 50000},
                {"Car loans", 30000},
                {"Personal loans", 0},
                {"Credit cards", 0},
                {"Student loans", 10000},
                {"Loans against investments", 20000},
                {"Life insurance loans", 5000},
                {"Other installment loans", 10000},
                {"Other debts", 50000}
            }
            worksheet.Range("B1:C1").Merge()
            worksheet.Range!B1.Value = "Personal" &amp; vbCrLf &amp; "Net" &amp; vbCrLf &amp; "Worth"
            worksheet.Range!B2.Formula = "=""Total ""&amp;TotalAssetsLabel"
            worksheet.Range!B3.Formula = "=""Total ""&amp;TotalDebtsLabel"
            worksheet.Range!B4.Formula = "=NetWorthLabel"
            worksheet.Range!C2.Formula = "=TotalAssets"
            worksheet.Range!C3.Formula = "=TotalDebts"
            worksheet.Range!C4.Formula = "=NetWorth"
            worksheet.Names.Add("TotalAssets", "=SUM(Assets[Value])")
            worksheet.Names.Add("TotalDebts", "=SUM(Debts[Value])")
            worksheet.Names.Add("NetWorth", "=TotalAssets-TotalDebts")
            worksheet.Names.Add("TotalAssetsLabel", "=Sheet1!$B$8")
            worksheet.Names.Add("TotalDebtsLabel", "=Sheet1!$B$33")
            worksheet.Names.Add("NetWorthLabel", "=""Net Worth""")

            '---------------------------Set Table Style---------------------------
            Dim assetsTableStyle As ITableStyle = workbook.TableStyles.Add("Assets")
            workbook.DefaultTableStyle = "Assets"
            assetsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Font.Color = Color.FromArgb(64, 64, 64)
            assetsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders.Color = Color.FromArgb(128, 128, 128)
            assetsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Dotted
            assetsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thin
            assetsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.None
            assetsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.None
            assetsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.None
            assetsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideVertical).LineStyle = BorderLineStyle.None
            assetsTableStyle.TableStyleElements(TableStyleElementType.SecondRowStripe).Interior.Color = Color.White
            assetsTableStyle.TableStyleElements(TableStyleElementType.SecondRowStripe).StripeSize = 1
            assetsTableStyle.TableStyleElements(TableStyleElementType.LastColumn).Font.Bold = True
            assetsTableStyle.TableStyleElements(TableStyleElementType.LastColumn).Font.Color = Color.FromArgb(61, 125, 137)
            assetsTableStyle.TableStyleElements(TableStyleElementType.LastColumn).Interior.Color = Color.White
            assetsTableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Interior.Color = Color.FromArgb(61, 125, 137)

            Dim debtsTableStyle As ITableStyle = workbook.TableStyles.Add("Debts")
            debtsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Font.Color = Color.FromArgb(64, 64, 64)
            debtsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders.Color = Color.FromArgb(128, 128, 128)
            debtsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Dotted
            debtsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thin
            debtsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.None
            debtsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.None
            debtsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.None
            debtsTableStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideVertical).LineStyle = BorderLineStyle.None
            debtsTableStyle.TableStyleElements(TableStyleElementType.SecondRowStripe).Interior.Color = Color.White
            debtsTableStyle.TableStyleElements(TableStyleElementType.SecondRowStripe).StripeSize = 1
            debtsTableStyle.TableStyleElements(TableStyleElementType.LastColumn).Font.Bold = True
            debtsTableStyle.TableStyleElements(TableStyleElementType.LastColumn).Font.Color = Color.FromArgb(146, 75, 12)
            debtsTableStyle.TableStyleElements(TableStyleElementType.LastColumn).Interior.Color = Color.White
            debtsTableStyle.TableStyleElements(TableStyleElementType.HeaderRow).Interior.Color = Color.FromArgb(218, 113, 18)

            '----------------------------Set Named Styles-------------------------
            Dim normalStyle As IStyle = workbook.Styles("Normal")
            normalStyle.Font.Name = "Century Gothic"
            normalStyle.Font.Size = 12
            normalStyle.Font.Color = Color.FromArgb(64, 64, 64)
            normalStyle.Interior.Color = Color.FromArgb(243, 243, 236)
            normalStyle.Interior.PatternColor = Color.FromArgb(243, 243, 236)
            normalStyle.HorizontalAlignment = HorizontalAlignment.Left
            normalStyle.IndentLevel = 1
            normalStyle.VerticalAlignment = VerticalAlignment.Center
            normalStyle.WrapText = True

            Dim titleStyle As IStyle = workbook.Styles("Title")
            titleStyle.IncludeAlignment = True
            titleStyle.VerticalAlignment = VerticalAlignment.Center
            titleStyle.WrapText = True
            titleStyle.Font.Name = "Century Gothic"
            titleStyle.Font.Size = 66
            titleStyle.Font.Color = Color.FromArgb(64, 64, 64)
            titleStyle.IncludePatterns = True
            titleStyle.Interior.Color = Color.FromArgb(243, 243, 236)

            Dim heading1Style As IStyle = workbook.Styles("Heading 1")
            heading1Style.IncludeAlignment = True
            heading1Style.HorizontalAlignment = HorizontalAlignment.Left
            heading1Style.IndentLevel = 4
            heading1Style.VerticalAlignment = VerticalAlignment.Center
            heading1Style.Font.Name = "Century Gothic"
            heading1Style.Font.Bold = False
            heading1Style.Font.Size = 16
            heading1Style.Font.Color = Color.FromArgb(64, 64, 64)
            heading1Style.IncludeBorder = False
            heading1Style.IncludePatterns = True
            heading1Style.Interior.Color = Color.FromArgb(243, 243, 236)

            Dim heading2Style As IStyle = workbook.Styles("Heading 2")
            heading2Style.IncludeNumber = True
            heading2Style.NumberFormat = "$#,##0"
            heading2Style.IncludeAlignment = True
            heading2Style.HorizontalAlignment = HorizontalAlignment.Right
            heading2Style.IndentLevel = 2
            heading2Style.VerticalAlignment = VerticalAlignment.Center
            heading2Style.Font.Name = "Century Gothic"
            heading2Style.Font.Size = 16
            heading2Style.Font.Color = Color.FromArgb(64, 64, 64)
            heading2Style.IncludeBorder = False
            heading2Style.IncludePatterns = True
            heading2Style.Interior.Color = Color.FromArgb(243, 243, 236)

            Dim heading3Style As IStyle = workbook.Styles("Heading 3")
            heading3Style.IncludeAlignment = True
            heading3Style.HorizontalAlignment = HorizontalAlignment.Left
            heading3Style.VerticalAlignment = VerticalAlignment.Bottom
            heading3Style.IncludeBorder = False
            heading3Style.Font.Name = "Century Gothic"
            heading3Style.Font.Bold = False
            heading3Style.Font.Size = 27
            heading3Style.Font.Color = Color.FromArgb(64, 64, 64)
            heading3Style.IncludePatterns = True
            heading3Style.Interior.Color = Color.FromArgb(243, 243, 236)

            Dim heading4Style As IStyle = workbook.Styles("Heading 4")
            heading4Style.Font.Name = "Century Gothic"
            heading4Style.Font.Size = 16
            heading4Style.Font.Color = Color.White
            heading4Style.Font.Bold = False

            Dim currencyStyle As IStyle = workbook.Styles("Currency")
            currencyStyle.NumberFormat = "$#,##0"
            currencyStyle.IncludeAlignment = True
            currencyStyle.HorizontalAlignment = HorizontalAlignment.Right
            currencyStyle.IndentLevel = 1
            currencyStyle.VerticalAlignment = VerticalAlignment.Center
            currencyStyle.IncludeFont = True
            currencyStyle.Font.Bold = True
            currencyStyle.Font.Name = "Century Gothic"
            currencyStyle.Font.Size = 12

            '----------------------------------Use Style---------------------------
            assetsTable.TableStyle = assetsTableStyle
            debtsTable.TableStyle = debtsTableStyle
            worksheet.SheetView.DisplayGridlines = False
            worksheet.Range("B2:B4").Style = heading1Style
            worksheet.Range("C2:C4").Style = heading2Style
            worksheet.Range("B9:D9").Style = heading4Style
            worksheet.Range("D10:D30").Style = currencyStyle
            worksheet.Range("D10:D30").Font.Color = Color.FromArgb(61, 125, 137)
            worksheet.Range("B34:C34").Style = heading4Style
            worksheet.Range("C35:C44").Style = currencyStyle
            worksheet.Range("C35:C44").Font.Color = Color.FromArgb(218, 113, 18)
            worksheet.Range!B1.Style = titleStyle
            worksheet.Range!B8.Style = heading3Style
            worksheet.Range("B33").Style = heading3Style
            worksheet.Range("B3:C3").Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Hair
            worksheet.Range("B3:C3").Borders(BordersIndex.EdgeTop).Color = Color.FromArgb(128, 128, 128)
            worksheet.Range("B3:C3").Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Hair
            worksheet.Range("B3:C3").Borders(BordersIndex.EdgeBottom).Color = Color.FromArgb(128, 128, 128)

            '--------------------------------Add Shape--------------------------------
            Dim recShape1 As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 17.81, 282.75, 20.963, 21.75)
            recShape1.Line.Color.ColorType = SolidColorType.None
            recShape1.Fill.Color.RGB = Color.FromArgb(60, 126, 138)

            Dim recShape2 As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 17.81, 312.75, 20.963, 21.75)
            recShape2.Line.Color.ColorType = SolidColorType.None
            recShape2.Fill.Color.RGB = Color.FromArgb(218, 118, 13)

            Dim recShape3 As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 17.81, 342.75, 20.963, 21.75)
            recShape3.Line.Color.ColorType = SolidColorType.None
            recShape3.Fill.Color.RGB = Color.FromArgb(84, 138, 57)

            Dim pieShape As IShape = worksheet.Shapes.AddChart(ChartType.Pie, 442.5, 26.25, 346, 350.25)
            pieShape.Chart.HasLegend = False
            pieShape.Chart.HasTitle = False
            pieShape.Chart.ChartGroups(0).FirstSliceAngle = 180
            pieShape.Placement = Placement.Move

            Dim chartArea As IChartArea = pieShape.Chart.ChartArea
            chartArea.Format.Fill.Transparency = 1
            chartArea.Format.Line.Transparency = 1

            Dim chartSeries As ISeries = pieShape.Chart.SeriesCollection.NewSeries()
            chartSeries.Formula = "=SERIES('Sheet1'!$B$2:$B$4,,'Sheet1'!$C$2:$C$4,1)"
            chartSeries.HasDataLabels = True
            chartSeries.DataLabels.Font.Name = "Century Gothic"
            chartSeries.DataLabels.Font.Size = 20
            chartSeries.DataLabels.Font.Bold = True
            chartSeries.DataLabels.Font.Color.RGB = Color.White
            chartSeries.DataLabels.ShowValue = False
            chartSeries.DataLabels.ShowPercentage = True
            chartSeries.DataLabels.Position = DataLabelPosition.Center
            chartSeries.Points(0).Format.Fill.Color.RGB = Color.FromArgb(60, 126, 138)
            chartSeries.Points(1).Format.Fill.Color.RGB = Color.FromArgb(218, 118, 13)
            chartSeries.Points(2).Format.Fill.Color.RGB = Color.FromArgb(84, 138, 57)
            chartSeries.Explosion = 1
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.ToDoListWithProgressTracker" xml:space="preserve">
    <value>
            Dim data = {
                {"TASK", "PRIORITY", "STATUS", "START DATE", "DUE DATE", "% COMPLETE", "DONE?", "NOTES"},
                {"First Thing I Need To Do", "Normal", "Not Started", Nothing, Nothing, 0, Nothing, Nothing},
                {"Other Thing I Need To Finish", "High", "In Progress", Nothing, Nothing, 0.5, Nothing, Nothing},
                {"Something Else To Get Done", "Low", "Complete", Nothing, Nothing, 1, Nothing, Nothing},
                {"More Errands And Things", "Normal", "In Progress", Nothing, Nothing, 0.75, Nothing, Nothing},
                {"So Much To Get Done This Week", "High", "In Progress", Nothing, Nothing, 0.25, Nothing, Nothing}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Name = "To-Do List"
            worksheet.TabColor = Color.FromArgb(148, 112, 135)
            worksheet.SheetView.DisplayGridlines = False

            'Set Value.
            worksheet.Range!B1.Value = "To-Do List"
            worksheet.Range("B2:I7").Value = data

            'Set formula.
            worksheet.Range!E3.Formula = "=TODAY()"
            worksheet.Range!E4.Formula = "=TODAY()-30"
            worksheet.Range!E5.Formula = "=TODAY()-23"
            worksheet.Range!E6.Formula = "=TODAY()-15"
            worksheet.Range!E7.Formula = "=TODAY()-5"

            'Change the range's RowHeight and ColumnWidth.
            worksheet.StandardHeight = 30
            worksheet.StandardWidth = 8.88671875
            worksheet.Range("1:1").RowHeight = 72.75
            worksheet.Range("2:2").RowHeight = 33
            worksheet.Range("3:7").RowHeight = 30.25
            worksheet.Range("A:A").ColumnWidth = 2.77734375
            worksheet.Range("B:B").ColumnWidth = 29.109375
            worksheet.Range("C:G").ColumnWidth = 16.77734375
            worksheet.Range("H:H").ColumnWidth = 10.77734375
            worksheet.Range("I:I").ColumnWidth = 29.6640625
            worksheet.Range("J:J").ColumnWidth = 2.77734375

            'Modify the build in name styles.
            Dim nameStyle_Normal = workbook.Styles("Normal")
            nameStyle_Normal.VerticalAlignment = VerticalAlignment.Center
            nameStyle_Normal.WrapText = True
            nameStyle_Normal.Font.ThemeFont = ThemeFont.Minor
            nameStyle_Normal.Font.ThemeColor = ThemeColor.Dark1
            nameStyle_Normal.Font.TintAndShade = 0.25

            Dim nameStyle_Title = workbook.Styles("Title")
            nameStyle_Title.HorizontalAlignment = HorizontalAlignment.General
            nameStyle_Title.VerticalAlignment = VerticalAlignment.Bottom
            nameStyle_Title.Font.ThemeFont = ThemeFont.Minor
            nameStyle_Title.Font.Bold = True
            nameStyle_Title.Font.Size = 38
            nameStyle_Title.Font.ThemeColor = ThemeColor.Dark1
            nameStyle_Title.Font.TintAndShade = 0.249946592608417
            nameStyle_Title.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick
            nameStyle_Title.Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Dark1
            nameStyle_Title.IncludeAlignment = True
            nameStyle_Title.IncludeBorder = True

            Dim nameStyle_Percent = workbook.Styles("Percent")
            nameStyle_Percent.HorizontalAlignment = HorizontalAlignment.Right
            nameStyle_Percent.IndentLevel = 1
            nameStyle_Percent.VerticalAlignment = VerticalAlignment.Center
            nameStyle_Percent.IncludeAlignment = True

            Dim nameStyle_Heading_1 = workbook.Styles("Heading 1")
            nameStyle_Heading_1.HorizontalAlignment = HorizontalAlignment.Left
            nameStyle_Heading_1.VerticalAlignment = VerticalAlignment.Bottom
            nameStyle_Heading_1.Font.ThemeFont = ThemeFont.Major
            nameStyle_Heading_1.Font.Bold = False
            nameStyle_Heading_1.Font.Size = 11
            nameStyle_Heading_1.Font.ThemeColor = ThemeColor.Dark1
            nameStyle_Heading_1.Font.TintAndShade = 0.249946592608417
            nameStyle_Heading_1.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.None
            nameStyle_Heading_1.IncludeNumber = True
            nameStyle_Heading_1.IncludeAlignment = True
            nameStyle_Heading_1.IncludeBorder = False

            Dim nameStyle_Heading_2 = workbook.Styles("Heading 2")
            nameStyle_Heading_2.HorizontalAlignment = HorizontalAlignment.Right
            nameStyle_Heading_2.IndentLevel = 2
            nameStyle_Heading_2.VerticalAlignment = VerticalAlignment.Bottom
            nameStyle_Heading_2.Font.ThemeFont = ThemeFont.Major
            nameStyle_Heading_2.Font.Bold = False
            nameStyle_Heading_2.Font.Size = 11
            nameStyle_Heading_2.Font.ThemeColor = ThemeColor.Dark2
            nameStyle_Heading_2.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.None
            nameStyle_Heading_2.IncludeNumber = True
            nameStyle_Heading_2.IncludeAlignment = True

            'Create custom name styes.
            Dim nameStyle_Done As IStyle = workbook.Styles.Add("Done")
            nameStyle_Done.NumberFormat = """Done"";"""";"""""
            nameStyle_Done.HorizontalAlignment = HorizontalAlignment.Center
            nameStyle_Done.VerticalAlignment = VerticalAlignment.Center
            nameStyle_Done.Font.ThemeFont = ThemeFont.Minor
            nameStyle_Done.Font.ThemeColor = ThemeColor.Light1

            Dim nameStyle_Date As IStyle = workbook.Styles.Add("Date")
            nameStyle_Date.NumberFormat = "yyyy/m/d"
            nameStyle_Date.HorizontalAlignment = HorizontalAlignment.Right
            nameStyle_Date.VerticalAlignment = VerticalAlignment.Center
            nameStyle_Date.Font.ThemeFont = ThemeFont.Minor
            nameStyle_Date.Font.ThemeColor = ThemeColor.Dark1
            nameStyle_Date.Font.TintAndShade = 0.249946592608417
            nameStyle_Date.IncludeBorder = False
            nameStyle_Date.IncludePatterns = False

            'Apply the above name styles on ranges.
            worksheet.Range("B1:I1").Style = workbook.Styles("Title")
            worksheet.Range("B2:D2").Style = workbook.Styles("Heading 1")
            worksheet.Range("E2:F2").Style = workbook.Styles("Heading 2")
            worksheet.Range!G2.Style = workbook.Styles("Heading 1")
            worksheet.Range("H2:H7").Style = workbook.Styles("Done")
            worksheet.Range!I2.Style = workbook.Styles("Heading 1")
            worksheet.Range("E3:F7").Style = workbook.Styles("Date")
            worksheet.Range("G3:G7").Style = workbook.Styles("Percent")

            'Add one custom table style.
            Dim style As ITableStyle = workbook.TableStyles.Add("To-do List")
            style.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thin
            style.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Light1
            style.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.EdgeBottom).TintAndShade = -0.14993743705557422
            style.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Thin
            style.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).ThemeColor = ThemeColor.Light1
            style.TableStyleElements(TableStyleElementType.WholeTable).Borders(BordersIndex.InsideHorizontal).TintAndShade = -0.14993743705557422

            'Create a table and apply the above table style.
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("B2:I7"), True)
            table.Name = "ToDoList"
            table.TableStyle = style

            'Use table formula in table range.
            worksheet.Range!F3.Formula = "=[@[START DATE]]+7"
            worksheet.Range!F4.Formula = "=[@[START DATE]]+35"
            worksheet.Range!F5.Formula = "=[@[START DATE]]+10"
            worksheet.Range!F6.Formula = "=[@[START DATE]]+36"
            worksheet.Range!F7.Formula = "=[@[START DATE]]+14"
            worksheet.Range("H3:H7").Formula = "=--([@[% COMPLETE]]&gt;=1)"

            'Add a expression rule.
            Dim expression As IFormatCondition = TryCast(worksheet.Range("B3:I7").FormatConditions.Add(FormatConditionType.Expression, FormatConditionOperator.Between, "=AND($G3=0,$G3&lt;&gt;"""")", Nothing), IFormatCondition)
            expression.Interior.ThemeColor = ThemeColor.Light1
            expression.Interior.TintAndShade = -0.0499893185216834

            'Add a data bar rule.
            Dim dataBar As IDataBar = worksheet.Range("G3:G7").FormatConditions.AddDatabar()
            dataBar.BarFillType = DataBarFillType.Solid
            dataBar.BarColor.ThemeColor = ThemeColor.Accent1
            dataBar.BarColor.TintAndShade = 0.39997558519241921

            'Add an icon set rule.
            Dim iconSet As IIconSetCondition = worksheet.Range("H3:H7").FormatConditions.AddIconSetCondition()
            iconSet.IconSet = workbook.IconSets(IconSetType.Icon3Symbols)
            iconSet.IconCriteria(2).Operator = FormatConditionOperator.GreaterEqual
            iconSet.IconCriteria(2).Value = 1
            iconSet.IconCriteria(2).Type = ConditionValueTypes.Number
            iconSet.IconCriteria(1).Operator = FormatConditionOperator.GreaterEqual
            iconSet.IconCriteria(1).Value = 0
            iconSet.IconCriteria(1).Type = ConditionValueTypes.Number

            'Add a cell value rule.
            Dim cellValue As IFormatCondition = TryCast(worksheet.Range("H3:H7").FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.NotEqual, 1), IFormatCondition)
            cellValue.StopIfTrue = True

            'Create list validations.
            worksheet.Range("C3:C7").Validation.Add(ValidationType.List, ValidationAlertStyle.Warning, ValidationOperator.Between, "Low, Normal, High", Nothing)
            Dim validation As IValidation = worksheet.Range("C3:C7").Validation
            validation.ErrorMessage = "Select entry from the list. Select CANCEL, then press ALT+DOWN ARROW to navigate the list. Select ENTER to make selection"
            worksheet.Range("D3:D7").Validation.Add(ValidationType.List, ValidationAlertStyle.Warning, ValidationOperator.Between, "Not Started,In Progress, Deferred, Complete", Nothing)
            validation = worksheet.Range("D3:D7").Validation
            validation.ErrorMessage = "Select entry from the list. Select CANCEL, then press ALT+DOWN ARROW to navigate the list. Select ENTER to make selection"
            worksheet.Range("G3:G7").Validation.Add(ValidationType.List, ValidationAlertStyle.Warning, ValidationOperator.Between, "0%,25%,50%,75%,100%", Nothing)
            validation = worksheet.Range("G3:G7").Validation
            validation.ErrorMessage = "Select entry from the list. Select CANCEL, then press ALT+DOWN ARROW to navigate the list. Select ENTER to make selection"

            'Create custom validation.
            worksheet.Range("F3:F7").Validation.Add(ValidationType.Custom, ValidationAlertStyle.Warning, ValidationOperator.Between, "=F3&gt;=E3", Nothing)
            validation = worksheet.Range("F3:F7").Validation
            validation.ErrorMessage = "The Due Date must be greater than or equal to the Start Date. Select YES to keep the value, NO to retry or CANCEL to clear the entry"

            'Create none validations, set inputmessage.
            worksheet.Range!B2.Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, Nothing, Nothing)
            validation = worksheet.Range!B2.Validation
            validation.InputMessage = "Enter Task in this column under this heading. Use heading filters to find specific entries"
            worksheet.Range!C2.Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, Nothing, Nothing)
            validation = worksheet.Range!C2.Validation
            validation.InputMessage = "Select Priority in this column under this heading. Press ALT+DOWN ARROW to open the drop-down list, then ENTER to make selection"
            worksheet.Range!D2.Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, Nothing, Nothing)
            validation = worksheet.Range!D2.Validation
            validation.InputMessage = "Select Status in this column under this heading.  Press ALT+DOWN ARROW to open the drop-down list, then ENTER to make selection"
            worksheet.Range!E2.Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, Nothing, Nothing)
            validation = worksheet.Range!E2.Validation
            validation.InputMessage = "Enter Start Date in this column under this heading"
            worksheet.Range!F2.Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, Nothing, Nothing)
            validation = worksheet.Range!F2.Validation
            validation.InputMessage = "Enter Due Date in this column under this heading"
            worksheet.Range!G2.Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, Nothing, Nothing)
            validation = worksheet.Range!G2.Validation
            validation.InputMessage = "Select % Complete in this column. Press ALT+DOWN ARROW to open the drop-down list, then ENTER to make selection. A status bar indicates progress toward completion"
            worksheet.Range!H2.Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, Nothing, Nothing)
            validation = worksheet.Range!H2.Validation
            validation.InputMessage = "Icon indicator for task completion in this column under this heading is automatically updated as tasks complete"
            worksheet.Range!I2.Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, Nothing, Nothing)
            validation = worksheet.Range!I2.Validation
            validation.InputMessage = "Enter Notes in this column under this heading"

            'Create customize theme.
            Dim themes As New Themes
            Dim theme As ITheme = themes.Add("test")
            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.FromArgb(0, 0, 0)
            theme.ThemeColorScheme(ThemeColor.Light1).RGB = Color.FromArgb(255, 255, 255)
            theme.ThemeColorScheme(ThemeColor.Dark2).RGB = Color.FromArgb(37, 28, 34)
            theme.ThemeColorScheme(ThemeColor.Light2).RGB = Color.FromArgb(240, 248, 246)
            theme.ThemeColorScheme(ThemeColor.Accent1).RGB = Color.FromArgb(148, 112, 135)
            theme.ThemeColorScheme(ThemeColor.Accent2).RGB = Color.FromArgb(71, 166, 181)
            theme.ThemeColorScheme(ThemeColor.Accent3).RGB = Color.FromArgb(234, 194, 53)
            theme.ThemeColorScheme(ThemeColor.Accent4).RGB = Color.FromArgb(107, 192, 129)
            theme.ThemeColorScheme(ThemeColor.Accent5).RGB = Color.FromArgb(233, 115, 61)
            theme.ThemeColorScheme(ThemeColor.Accent6).RGB = Color.FromArgb(251, 147, 59)
            theme.ThemeColorScheme(ThemeColor.Hyperlink).RGB = Color.FromArgb(71, 166, 181)
            theme.ThemeColorScheme(ThemeColor.FollowedHyperlink).RGB = Color.FromArgb(148, 112, 135)
            theme.ThemeFontScheme.Major(FontLanguageIndex.Latin).Name = "Helvetica Neue"
            theme.ThemeFontScheme.Minor(FontLanguageIndex.Latin).Name = "Bookman Old Style"

            'Apply the above custom theme.
            workbook.Theme = theme

            'Set active cell.
            worksheet.Range!G4.Activate()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.BloodSugarTracker" xml:space="preserve">
    <value>
            'Load template file Monthly business budget.xlsx from resource
            Dim fileStream = GetResourceStream("Blood sugar tracker.xlsx")

            workbook.Open(fileStream)
            Dim worksheet = workbook.ActiveSheet

            'insert 19 rows  
            worksheet.Range("1:19").Insert()

            'Change the rows(2~5) RowHeight
            worksheet.Rows(1).RowHeight = 34.5
            worksheet.Rows(2).RowHeight = 15.75
            worksheet.Rows(3).RowHeight = 19.5
            worksheet.Rows(4).RowHeight = 15.75

            'Set values
            worksheet.Range!B2.Value = "BLOOD SUGAR TRACKING"
            worksheet.Range!B4.Value = "CHARTED PROGRESS"

            'Set Styles
            worksheet.Range!B2.Font.ThemeFont = ThemeFont.Major
            worksheet.Range!B2.Font.Size = 26
            worksheet.Range!B2.Font.ThemeColor = ThemeColor.Dark1
            worksheet.Range!B2.Font.TintAndShade = 0.34998626667073579
            worksheet.Range("B2:D2").Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick
            worksheet.Range("B2:D2").Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Accent1
            worksheet.Range!B4.Font.ThemeFont = ThemeFont.Major
            worksheet.Range!B4.Font.Bold = True
            worksheet.Range!B4.Font.Size = 14
            worksheet.Range!B4.Font.ThemeColor = ThemeColor.Dark1
            worksheet.Range!B4.Font.TintAndShade = 0.34998626667073579
            worksheet.Range("B4:D4").Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick
            worksheet.Range("B4:D4").Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Accent2

            'Add chart
            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 9.75, 100.5, 365, 203.25)
            shape.Name = "BloodSugarProgress"

            'Add Series.
            Dim series1 As ISeries = shape.Chart.SeriesCollection.NewSeries()
            series1.Formula = "=SERIES('BLOOD SUGAR DATA'!$C$23,'BLOOD SUGAR DATA'!$B$24:$B$45,'BLOOD SUGAR DATA'!$C$24:$C$45,1)"
            series1.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent1
            series1.Format.Line.Weight = 2.5

            Dim series2 As ISeries = shape.Chart.SeriesCollection.NewSeries()
            series2.Formula = "=SERIES('BLOOD SUGAR DATA'!$D$23,'BLOOD SUGAR DATA'!$B$24:$B$45,'BLOOD SUGAR DATA'!$D$24:$D$45,2)"
            series2.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent2
            series2.Format.Line.Weight = 2.5

            'Hidden the chart title
            shape.Chart.HasTitle = False

            'Hidden the category axis
            Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category)
            category_axis.Visible = False

            'Set value axis units
            Dim value_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            value_axis.MaximumScale = 140
            value_axis.MinimumScale = 50
            value_axis.MajorUnit = 10
            value_axis.MinorUnit = 2

            'Add a rectange shape
            Dim shape1 As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 385, 84.75, 102, 218.25)
            shape1.Fill.Solid()
            shape1.Fill.Color.ObjectThemeColor = ThemeColor.Accent1
            shape1.Fill.Color.Brightness = 0.6

            'set shape's border to no line
            shape1.Line.Color.ColorType = SolidColorType.None

            'set shape rich text
            Dim shape1_p1 As ITextRange = shape1.TextFrame.TextRange.Paragraphs(0)
            shape1_p1.Text = "INFO:"
            shape1_p1.Runs.Add(" Blood sugar levels will vary from person-to-person.  There are many factors to keeping it within your normal range and isn't based on sugar alone.  Consult a physician for additional information or follow-up.")

            Dim shape1_p2 As ITextRange = shape1.TextFrame.TextRange.Paragraphs.Add("")
            Dim shape1_p3 As ITextRange = shape1.TextFrame.TextRange.Paragraphs.Add("More info can be found here:")
            Dim shape1_p4 As ITextRange = shape1.TextFrame.TextRange.Paragraphs.Add("http://diabetes.webmd.com/blood-glucose")

            shape1.TextFrame.TextRange.Font.Size = 10
            shape1.TextFrame.TextRange.Font.ThemeFont = ThemeFont.Minor
            shape1.TextFrame.TextRange.Font.Color.ObjectThemeColor = ThemeColor.Dark1
            shape1.TextFrame.TextRange.Font.Color.Brightness = 0.25
            shape1_p1.Runs(0).Font.Bold = True
            shape1_p3.Runs(0).Font.Bold = True

            'Do table filter
            Dim table = worksheet.Tables(0)
            table.Range.AutoFilter(1, "&gt;=102")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.EventBudget" xml:space="preserve">
    <value>
            'Load template file Event budget.xlsx from resource
            Dim fileStream = GetResourceStream("Event budget.xlsx")

            workbook.Open(fileStream)

            Dim worksheet = workbook.ActiveSheet

            'change range B2's font size.
            worksheet.Range!B2.Font.Size = 22

            'change range E4's font style to bold.
            worksheet.Range!E4.Font.Bold = True

            'change table style.
            worksheet.Tables("tblAdmissions").TableStyle = workbook.TableStyles("TableStyleLight10")
            worksheet.Tables("tblAds").TableStyle = workbook.TableStyles("TableStyleLight10")
            worksheet.Tables("tblVendors").TableStyle = workbook.TableStyles("TableStyleLight10")
            worksheet.Tables("tblItems").TableStyle = workbook.TableStyles("TableStyleLight10")

            'modify range F4:G5's cell style.
            worksheet.Range("F4:G5").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("F4:G5").Interior.TintAndShade = -0.15
            worksheet.Range("F4:G5").Font.ThemeFont = ThemeFont.Major
            worksheet.Range("F4:G5").Font.Size = 12
            worksheet.Range("F4:G5").Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.None
            worksheet.Range("F5:G5").NumberFormat = "$#,##0.00"

            'modify table columns' style.
            worksheet.Range("F8:G11, F15:G18, F22:G25, F29:G33").Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range("F8:G11, F15:G18, F22:G25, F29:G33").Interior.TintAndShade = -0.15
            worksheet.Range("E8:G11, E15:G18, E22:G25, E29:G33").NumberFormat = "$#,##0.00"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.FinancialKPIs" xml:space="preserve">
    <value>
            'Load template file Financial KPIs.xlsx from resource
            Dim fileStream = GetResourceStream("Financial KPIs.xlsx")
            workbook.Open(fileStream)

            Dim worksheet = workbook.ActiveSheet

            'set values
            Dim ProData = {
                {1483550, 121386},
                {0.4336, 0.32},
                {0.1236, -0.0438},
                {12.36, -0.0438}
            }
            Dim ProData1 = {0.14, 0.0029, 0.0361, 0.0361}
            worksheet.Range("E7:F10").Value = ProData
            worksheet.Range("I7:I10").Value = ProData1

            Dim ActiveData = {
                {"4.32 item", "2.00 item"},
                {"72 days", "45 days"},
                {"53 days", "55 days"}
            }
            Dim ActiveData1 = {"0.45 items", "-5 days", "-6 days"}
            worksheet.Range("E12:F14").Value = ActiveData
            worksheet.Range("I12:I14").Value = ActiveData1

            Dim EffData = {
                {0.3446, 0.25},
                {0.5335, 0.11}
            }
            Dim EffData1 = {0.1245, 0.1946}
            worksheet.Range("E16:F17").Value = EffData
            worksheet.Range("I16:I17").Value = EffData1

            Dim LinData = {
                {"0.91:1", "'2:1"},
                {"0.58:1", "'1:1"}
            }
            Dim LinData1 = {"'0.02:1", "'0.03:1"}
            worksheet.Range("E19:F20").Value = LinData
            worksheet.Range("I19:I20").Value = LinData1

            Dim GeaData = {
                {-9.6, 0.85},
                {0.68, 0.5}
            }
            Dim GeaData1 = {6.65, 0.0282}
            worksheet.Range("E22:F23").Value = GeaData
            worksheet.Range("I22:I23").Value = GeaData1

            Dim CasData = {
                {0.0735, 1.2},
                {0.1442, 0.1442}
            }
            Dim CasData1 = {-0.0046, 0.023}
            worksheet.Range("E25:F26").Value = CasData
            worksheet.Range("I25:I26").Value = CasData1
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.IncomeStatement" xml:space="preserve">
    <value>
            'Load template file Income statement.xlsx from resource
            Dim fileStream = GetResourceStream("Income statement.xlsx")
            workbook.Open(fileStream)

            Dim worksheet = workbook.ActiveSheet

            'set values
            Dim RevData = {
                {454597, 687802, 469902, 335846, 776667, 806250, 552036, 346734, 787205, 720496, 686963, 835688},
                {821687, 679306, 568503, 715827, 627459, 822625, 271114, 797991, 823966, 304521, 758665, 322694},
                {426510, 767295, 799314, 408533, 353862, 261403, 344075, 277433, 289814, 386539, 625447, 489178}
            }
            Dim CostData = {
                {113053, 134668, 192784, 199522, 163169, 109389, 187568, 170346, 130920, 180119, 184725, 162780},
                {42667, 14921, 42007, 10264, 48864, 10360, 42378, 31445, 15208, 34418, 37529, 22077}
            }
            Dim OpeData = {
                {264290, 282301, 266021, 272333, 285359, 256072, 289430, 280307, 278656, 272674, 299784, 284062},
                {29536, 28709, 27579, 27862, 26750, 26970, 27847, 27680, 28375, 25474, 27514, 26753},
                {23473, 22902, 21680, 19232, 23077, 20839, 19461, 15504, 21117, 20102, 16322, 21160},
                {11340, 11514, 11207, 9186, 9243, 10003, 11092, 10761, 9032, 10366, 9571, 11774},
                {9562, 10787, 11809, 9949, 9559, 9753, 11761, 10702, 10545, 10347, 10593, 10719},
                {9410, 9646, 9969, 10758, 9183, 10777, 11249, 9763, 9445, 11218, 10579, 10203}
            }
            Dim EarnData = {
                {1038, 1430, 627, 1352, 765, 1190, 1082, 1261, 1240, 645, 552, 669},
                {1227, 1372, 544, 1172, 1479, 821, 891, 1361, 1187, 760, 1126, 873},
                {661, 1342, 1119, 1085, 887, 1274, 883, 582, 601, 845, 948, 817}
            }
            worksheet.Range("E10:P12").Value = RevData
            worksheet.Range("E15:P16").Value = CostData
            worksheet.Range("E21:P26").Value = OpeData
            worksheet.Range("E31:P33").Value = EarnData

            'set formulars
            worksheet.Range("E13:P13").Formula = "=SUM(E10:E12)"
            worksheet.Range("E17:P17").Formula = "=SUM(E15:E16)"
            worksheet.Range("E19:P19").Formula = "=E13-E17"
            worksheet.Range("E27:P27").Formula = "=SUM(E21:E26)"
            worksheet.Range("E29:P29").Formula = "=E19-E27"
            worksheet.Range("E34:P34").Formula = "=E29-E31+E32-E33"
            worksheet.Range("E36:P36").Formula = "=E34*0.17"
            worksheet.Range("E38:P38").Formula = "=E34-E36"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.MonthlyBusinessBudget" xml:space="preserve">
    <value>
            'Load template file Monthly business budget.xlsx from resource
            Dim fileStream = GetResourceStream("Monthly business budget.xlsx")
            workbook.Open(fileStream)

            Dim worksheet = workbook.ActiveSheet

            ' change table style to TableStyleMedium14
            Dim totalsTable = worksheet.Tables("TotalsTable")
            totalsTable.TableStyle = workbook.TableStyles("TableStyleMedium14")

            ' change chart type to column stacked
            Dim chart = worksheet.Shapes(0).Chart
            chart.ChartType = ChartType.ColumnStacked
            chart.ColumnGroups(0).Overlap = 100

            ' set a bigger font size for chart title
            chart.ChartTitle.Font.Size = 24
            chart.ChartTitle.Font.Bold = True

            ' give a one color gradient to chart area
            chart.ChartArea.Format.Fill.OneColorGradient(GradientStyle.Horizontal, 1, 0)
            chart.ChartArea.Format.Fill.GradientStops(0).Color.ObjectThemeColor = ThemeColor.Accent6
            chart.ChartArea.Format.Fill.GradientStops(0).Color.Brightness = 0.8

            ' make fill of plot area transparant
            chart.PlotArea.Format.Fill.Transparency = 1

            ' config series1 of chart
            Dim series1 As ISeries = chart.SeriesCollection(0)
            series1.HasDataLabels = True
            series1.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent1

            ' give some formatting for the first point of series1
            Dim point1 As IPoint = series1.Points(0)
            point1.Format.Line.Color.RGB = Color.Black
            point1.Format.Line.Weight = 2
            point1.Format.Line.DashStyle = LineDashStyle.Dash

            ' config series2 of chart
            Dim series2 As ISeries = chart.SeriesCollection(1)
            series2.HasDataLabels = True
            series2.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent6
            series2.DataLabels.Font.Color.RGB = Color.Red

            ' get the value axis
            Dim value_axis As IAxis = chart.Axes.Item(AxisType.Value, AxisGroup.Primary)

            ' show the display unit as thousands for value axis
            value_axis.HasDisplayUnitLabel = True
            value_axis.DisplayUnit = DisplayUnit.Thousands

            ' give a color for the major grid line of value axis
            value_axis.MajorGridlines.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent6
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.SimpleInvoice" xml:space="preserve">
    <value>
            'Load template file Simple invoice.xlsx from resource
            Dim fileStream = GetResourceStream("Simple invoice.xlsx")
            workbook.Open(fileStream)

            Dim worksheet = workbook.ActiveSheet

            ' fill some new items
            worksheet.Range("E09:H09").Value = New Object() {"DD1-001", "Item 3", 5.6, 12}
            worksheet.Range("E10:H10").Value = New Object() {"DD2-001", "Item 3", 8.5, 14}
            worksheet.Range("E11:H11").Value = New Object() {"DD3-001", "Item 3", 9.6, 16}
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.CellRichText.AddTextRun" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim b2 As IRange = worksheet.Range("B2")

            Dim run1 As ITextRun = b2.RichText.Add("GrapeCity")
            run1.Font.Name = "Agency FB"
            run1.Font.Size = 26
            run1.Font.ThemeColor = ThemeColor.Accent1
            run1.Font.Bold = True

            Dim run2 As ITextRun = b2.RichText.Add(" Documents")
            run2.Font.ThemeColor = ThemeColor.Accent2
            run2.Font.Name = "Arial Black"
            run2.Font.Size = 20

            Dim run3 As ITextRun = b2.RichText.Add(" for ")
            run3.Font.Italic = True

            Dim run4 As ITextRun = b2.RichText.Add("Excel")
            run4.Font.Color = System.Drawing.Color.Blue
            run4.Font.Bold = True
            run4.Font.Size = 26
            run4.Font.Underline = UnderlineType.Double
            b2.EntireRow.RowHeight = 42
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.CellRichText.CharacterCellText" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim b2 As IRange = worksheet.Range("B2")
            b2.Value = "GrapeCity Documents for Excel"
            b2.Font.Size = 26
            b2.EntireRow.RowHeight = 42

            Dim run1 As ITextRun = b2.Characters(0, 9)
            run1.Font.Name = "Agency FB"
            run1.Font.ThemeColor = ThemeColor.Accent1
            run1.Font.Bold = True

            Dim run2 As ITextRun = b2.Characters(10, 9)
            run2.Font.ThemeColor = ThemeColor.Accent2
            run2.Font.Name = "Arial Black"
            run2.Font.Underline = UnderlineType.Single

            Dim run3 As ITextRun = b2.Characters(20, 3)
            run3.Font.Italic = True

            Dim run4 As ITextRun = b2.Characters(24, 5)
            run4.Font.Color = System.Drawing.Color.Blue
            run4.Font.Bold = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.CellRichText.ConfigRunFont" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim a2 As IRange = worksheet.Range("A2")
            a2.Font.Size = 18
            a2.Font.Bold = True
            a2.VerticalAlignment = VerticalAlignment.Center
            a2.EntireRow.RowHeight = 42
            a2.EntireColumn.ColumnWidth = 40

            a2.Value = "Perfect square trinomial"
            Dim run1 As ITextRun = a2.Characters(8, 7)
            run1.Font.Italic = True
            run1.Font.ThemeColor = ThemeColor.Accent1

            Dim b2 As IRange = worksheet.Range("B2")
            b2.Font.Size = 26
            b2.EntireColumn.ColumnWidth = 60

            b2.Value = "(a+b)2 = a2+2ab+b2"
            Dim superRun1 As ITextRun = b2.Characters(5, 1)
            superRun1.Font.Superscript = True
            superRun1.Font.Color = System.Drawing.Color.Red

            Dim superRun2 As ITextRun = b2.Characters(10, 1)
            superRun2.Font.Superscript = True
            superRun2.Font.Color = System.Drawing.Color.Green

            Dim superRun3 As ITextRun = b2.Characters(17, 1)
            superRun3.Font.Superscript = True
            superRun3.Font.Color = System.Drawing.Color.Blue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartCopy" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Create chart, chart's range is Range("G1:M21")
            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'Range("G1:M21") must contain chart's range, copy a new shape to Range("N1:T21")
            worksheet.Range("G1:M21").Copy(worksheet.Range!N1)
            'worksheet.Range("G1:M21").Copy(worksheet.Range("N1:T21"))
            'Cross sheet copy, copy a new chart to worksheet2's Range("N1:T21")
            'Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            'worksheet.Range("G1:M21").Copy(worksheet2.Range!E1)
            'worksheet.Range("G1:M21").Copy(worksheet2.Range("N1:T21"))
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartCut" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Create chart, chart's range is Range("G1:M21")
            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'Range("G1:M21") must contain chart's range, cut a new shape to Range("N1:T21")
            worksheet.Range("G1:M21").Cut(worksheet.Range!N1)
            'worksheet.Range("G1:M21").Cut(worksheet.Range("N1:T21"))
            'Cross sheet cut, cut a new chart to worksheet2's Range("N1:T21")
            'Dim worksheet2 = workbook.Worksheets.Add()
            'worksheet.Range("G1:M21").Cut(worksheet2.Range!E1)
            'worksheet.Range("G1:M21").Cut(worksheet2.Range("N1:T21"))
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartDuplicate" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'create chart, chart's range is Range("G1:M21")
            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'Duplicate chart
            Dim newShape As IShape = shape.Duplicate()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.CreateChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            'create chart.
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DeleteChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'delete chart.
            shape.Chart.Delete()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigAxisTitle" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)

            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", 51, 36, 27},
                {"Item3", 52, 85, 30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category)

            'config axis title
            category_axis.HasTitle = True
            category_axis.AxisTitle.Text = "CategoryAxisTitle"
            category_axis.AxisTitle.Font.Size = 18
            category_axis.AxisTitle.Font.Color.RGB = Color.Orange
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigCategoryAxesFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)

            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category)

            'set category axis's format.
            category_axis.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent1
            category_axis.Format.Line.Color.RGB = Color.LightSkyBlue
            category_axis.Format.Line.Weight = 3
            category_axis.Format.Line.Style = LineStyle.Single
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigCategoryAxisUnits" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A2:A6").NumberFormat = "m/d/yyyy"
            worksheet.Range("A1:D6").Value = New Object(,) {
                {Nothing, "S1", "S2", "S3"},
                {
                    #10/7/2015#, 10,
                    25,
                    25
                },
                {
                    #10/24/2015#,
                    51,
                    36,
                    27
                },
                {
                    #11/8/2015#,
                    52,
                    85,
                    30
                },
                {
                    #11/25/2015#,
                    22,
                    65,
                    65
                },
                {
                    #12/10/2015#,
                    23,
                    69,
                    69
                }
            }

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category)
            category_axis.MaximumScale = (#12/20/2015#).ToOADate()
            category_axis.MinimumScale = (#10/1/2015#).ToOADate()
            category_axis.BaseUnit = TimeUnit.Months
            category_axis.MajorUnitScale = TimeUnit.Months
            category_axis.MajorUnit = 1
            category_axis.MinorUnitScale = TimeUnit.Days
            category_axis.MinorUnit = 15
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigDisplayUnitLabel" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)

            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim value_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            value_axis.DisplayUnit = DisplayUnit.Custom
            value_axis.DisplayUnitCustom = 100
            value_axis.HasDisplayUnitLabel = True
            value_axis.DisplayUnitLabel.Font.Color.RGB = Color.CornflowerBlue
            value_axis.DisplayUnitLabel.Format.Fill.Color.RGB = Color.Orange
            value_axis.DisplayUnitLabel.Format.Line.Color.RGB = Color.CornflowerBlue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigGridlines" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim value_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            value_axis.HasMajorGridlines = True
            value_axis.HasMinorGridlines = True
            value_axis.MajorGridlines.Format.Line.Color.RGB = Color.Gray
            value_axis.MajorGridlines.Format.Line.Weight = 1
            value_axis.MinorGridlines.Format.Line.Color.RGB = Color.LightGray
            value_axis.MinorGridlines.Format.Line.Weight = 0.75
            value_axis.MajorUnit = 40
            value_axis.MinorUnit = 8
            value_axis.MinorGridlines.Format.Line.Style = LineStyle.ThickThin
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigTickMarkLabel" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)

            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {1, -25, 25, 25},
                {2, 51, 36, 27},
                {3, 52, 80, 30},
                {4, 22, -20, 65},
                {5, 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category)

            Dim value_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)

            'config tick label's format
            category_axis.TickLabelPosition = TickLabelPosition.NextToAxis
            category_axis.TickLabelSpacing = 2
            category_axis.TickLabels.Font.Color.RGB = Color.DarkOrange
            category_axis.TickLabels.Font.Size = 12
            category_axis.TickLabels.NumberFormat = "#,##0.00"
            value_axis.TickLabels.NumberFormat = "#,##0;[Red]#,##0"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigValueAxesFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)

            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim value_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)

            'set value axis's format.
            value_axis.Format.Line.Color.RGB = Color.FromArgb(91, 155, 213)
            value_axis.Format.Line.Weight = 2
            value_axis.Format.Line.Style = LineStyle.Single
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigValueAxisUnits" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)

            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 90, -30},
                {"Item4", 22, 65, 50},
                {"Item5", 23, 55, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category)
            Dim value_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)

            value_axis.MaximumScale = 100
            value_axis.MinimumScale = -100
            value_axis.MajorUnit = 30
            value_axis.MinorUnit = 6
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.SetAxisScaleType" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D5").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 4, 25, 7},
                {"Item2", 15, -10, 18},
                {"Item3", 45, 90, 20},
                {"Item4", 8, 20, 11}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D5"), RowCol.Columns, True, True)

            Dim value_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            value_axis.ScaleType = ScaleType.Logarithmic
            value_axis.LogBase = 5
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.SetAxisTickMark" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)

            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category)
            category_axis.Format.Line.Color.RGB = Color.Green
            category_axis.Format.Line.Weight = 1.5
            category_axis.MajorTickMark = TickMark.Inside
            category_axis.MinorTickMark = TickMark.Cross
            category_axis.TickMarkSpacing = 2
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChart3DFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 350, 250)

            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim chartarea As IChartArea = shape.Chart.ChartArea

            'config 3D chart format
            chartarea.Format.ThreeD.RotationX = 60
            chartarea.Format.ThreeD.RotationY = 60
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChartBackWall" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 350, 250)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'config back wall individually.
            shape.Chart.BackWall.Thickness = 5
            shape.Chart.BackWall.Format.Fill.Color.RGB = Color.LightGreen
            shape.Chart.BackWall.Format.Line.Color.RGB = Color.LightBlue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChartFloorStyle" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'config chart floor
            shape.Chart.Floor.Thickness = 5
            shape.Chart.Floor.Format.Fill.Color.RGB = Color.Yellow
            shape.Chart.Floor.Format.Line.Color.RGB = Color.Red
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChartSideWall" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 350, 250)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'config side wall individually.
            shape.Chart.SideWall.Thickness = 5
            shape.Chart.SideWall.Format.Fill.Color.RGB = Color.LightGreen
            shape.Chart.SideWall.Format.Line.Color.RGB = Color.LightBlue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChartWallStyle" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 350, 250)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'config back wall and side wall together.
            shape.Chart.Walls.Thickness = 5
            shape.Chart.Walls.Format.Fill.Color.RGB = Color.LightPink
            shape.Chart.Walls.Format.Line.Color.RGB = Color.LightBlue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartArea.ConfigChartAreaFont" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 60, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim chartarea As IChartArea = shape.Chart.ChartArea

            'Font
            chartarea.Font.Color.RGB = Color.MediumSeaGreen
            chartarea.Font.Name = "Times New Roman"
            chartarea.Font.Size = 12

            'rounded corners.
            chartarea.RoundedCorners = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartArea.ConfigChartAreaFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 60, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim chartarea As IChartArea = shape.Chart.ChartArea

            'Format
            chartarea.Format.Fill.Color.RGB = Color.LightGray
            chartarea.Format.Line.Color.RGB = Color.MediumSeaGreen
            chartarea.Format.Line.Weight = 1.5
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.AreaChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Area, 250, 20, 360, 230)
            worksheet.Range("A1:C13").Value = New Object(,)  {
                {Nothing, "Blue Series", "Orange Series"},
                {"Jan", 0, 59.1883603948205},
                {"Feb", 44.6420211591501, 52.2280901938606},
                {"Mar", 45.2174930051225, 49.8093056416248},
                {"Apr", 62, 37.3065749226828},
                {"May", 53, 34.4312192530766},
                {"Jun", 31.8933622049831, 69.7834561753736},
                {"Jul", 41.7930895085093, 63.9418103906982},
                {"Aug", 73, 57.4049534494926},
                {"Sep", 49.8773891668518, 33},
                {"Oct", 50, 74},
                {"Nov", 54.7658428630216, 22.9587876597096},
                {"Dec", 32, 54}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C13"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Area Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.AreaStacked100" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.AreaStacked100, 250, 20, 360, 230)
            worksheet.Range("A1:C13").Value = New Object(,)  {
                {0, 59.18, 27.14},
                {44.64, 52.22, 25.08},
                {45.21, 49.8, 57.99},
                {24.32, 37.3, 42.73},
                {58.34, 34.43, 28.34},
                {31.89, 69.78, 46.88},
                {41.79, 63.94, 56.24},
                {67.94, 57.4, 27.78},
                {49.87, 48.26, 52.06},
                {62.39, 67.43, 33.33},
                {54.76, 22.95, 50.36},
                {28.33, 36.6, 36.61},
                {22.77, 55.65, 65.64},
                {20.34, 49.35, 45.6},
                {32.1, 47.6, 20.62},
                {26.37, 63.0, 53.97},
                {35, 75, 60}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C13"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Area Stacked100 Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.AreaStackedChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.AreaStacked, 250, 20, 360, 230)
            worksheet.Range("A1:C13").Value = New Object(,)  {
                {0, 59.18, 27.14},
                {44.64, 52.22, 25.08},
                {45.21, 49.8, 57.99},
                {24.32, 37.3, 42.73},
                {58.34, 34.43, 28.34},
                {31.89, 69.78, 46.88},
                {41.79, 63.94, 56.24},
                {67.94, 57.4, 27.78},
                {49.87, 48.26, 52.06},
                {62.39, 67.43, 33.33},
                {54.76, 22.95, 50.36},
                {28.33, 36.6, 36.61},
                {22.77, 55.65, 65.64},
                {20.34, 49.35, 45.6},
                {32.1, 47.6, 20.62},
                {26.37, 63.0, 53.97},
                {35, 75, 60}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C13"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Area Stacked Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.BarClusteredChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.BarClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D2").Value = New Object(,)  {
                {100, 200, 300, 400},
                {100, 200, 300, 400}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D2"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Bar Clustered Chart"
            shape.Chart.Legend.Position = LegendPosition.Left
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.BarStacked100Chart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.BarStacked100, 250, 20, 360, 230)
            worksheet.Range("A1:B5").Value = New Object(,)  {
                {1, 5},
                {2, 4},
                {3, 3},
                {4, 2},
                {4, 1}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B5"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Bar Stacked 100 Chart"
            shape.Chart.Legend.Position = LegendPosition.Left
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.BarStackedChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.BarStacked, 250, 20, 360, 230)
            worksheet.Range("A1:C4").Value = New Object(,)  {
                {103, 121, 109},
                {56, 94, 115},
                {116, 89, 99},
                {55, 93, 70}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C4"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Bar Stacked Chart"
            shape.Chart.Legend.Position = LegendPosition.Left
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.BubbleChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Bubble, 250, 20, 360, 230)
            worksheet.Range("A1:C10").Value = New Object(,)  {
                {"Blue", Nothing, Nothing},
                {125, 750, 3},
                {25, 625, 7},
                {75, 875, 5},
                {175, 625, 6},
                {"Red", Nothing, Nothing},
                {125, 500, 10},
                {25, 250, 1},
                {75, 125, 5},
                {175, 250, 8}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C5"), RowCol.Columns)
            shape.Chart.SeriesCollection.Add(worksheet.Range("A6:C10"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Bubble Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.ColumnClusteredChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D2").Value = New Object(,)  {
                {100, 200, 300, 400},
                {100, 200, 300, 400}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D2"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Column Clustered Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.ColumnStacked100Chart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnStacked100, 250, 20, 360, 230)
            worksheet.Range("A1:B6").Value = New Object(,)  {
                {1, 5},
                {2, 4},
                {3, 3},
                {4, 2},
                {5, 1},
                {5, 3}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B6"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Column Stacked 100 Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.ColumnStackedChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnStacked, 250, 20, 360, 230)
            worksheet.Range("A1:C6").Value = New Object(,)  {
                {103, 121, 109},
                {56, 94, 115},
                {116, 89, 99},
                {55, 93, 70},
                {114, 114, 83},
                {125, 138, 136}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C6"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Column Stacked Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.CombinationChart1" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:B13").Value = New Object(,)  {
                {"Blue Column", "Red Line"},
                {75, 20},
                {149, 50},
                {105, 30},
                {55, 80},
                {121, 40},
                {76, 110},
                {128, 50},
                {114, 140},
                {75, 60},
                {105, 170},
                {145, 70},
                {110, 100}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B13"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Combination Chart"

            'change series type
            Dim series2 As ISeries = shape.Chart.SeriesCollection(1)
            series2.ChartType = ChartType.LineMarkers
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.CombinationChart2" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:C17").Value = New Object(,)  {
                {"Area 1", "Column 1", "Column 2"},
                {1350, 120, 75},
                {1500, 90, 35},
                {1200, 80, 50},
                {1300, 80, 80},
                {1750, 90, 100},
                {1640, 120, 130},
                {1700, 120, 95},
                {1100, 90, 80},
                {1350, 120, 75},
                {1500, 90, 35},
                {1200, 80, 50}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C17"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Combination Chart"

            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)
            Dim series2 As ISeries = shape.Chart.SeriesCollection(1)
            Dim series3 As ISeries = shape.Chart.SeriesCollection(2)

            'change series type
            series1.ChartType = ChartType.Area
            series2.ChartType = ChartType.ColumnStacked
            series3.ChartType = ChartType.ColumnStacked

            'set axis group
            series2.AxisGroup = AxisGroup.Secondary
            series3.AxisGroup = AxisGroup.Secondary

            'config axis sacle and unit
            Dim value_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            Dim value_second_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value, AxisGroup.Secondary)
            value_axis.MaximumScale = 1800
            value_axis.MajorUnit = 450
            value_second_axis.MaximumScale = 300
            value_second_axis.MajorUnit = 75
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
            worksheet.Range("A1:C7").Value = New Object(,)  {
                {0, 59.18, 27.14},
                {44.64, 52.22, 25.08},
                {45.21, 49.8, 57.99},
                {24.32, 37.3, 42.73},
                {58.34, 34.43, 28.34},
                {31.89, 69.78, 46.88},
                {41.79, 63.94, 56.24}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C7"), RowCol.Columns)

            'set series lines style
            shape.Chart.SeriesCollection(0).Format.Line.Weight = 2.25
            shape.Chart.SeriesCollection(1).Format.Line.Weight = 2.25
            shape.Chart.SeriesCollection(2).Format.Line.Weight = 2.25
            shape.Chart.ChartTitle.Text = "Line Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineMarkersChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkers, 250, 20, 360, 230)
            worksheet.Range("A1:B8").Value = New Object(,)  {
                {6, 55},
                {45, 25},
                {35, 45},
                {25, 65},
                {65, 15},
                {45, 75},
                {75, 55},
                {65, 35}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B8"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Line with Markers"
            shape.Chart.SeriesCollection(0).MarkerStyle = MarkerStyle.Square
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineMarkerStacked100Chart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkersStacked100, 250, 20, 360, 230)
            worksheet.Range("A1:C5").Value = New Object(,)  {
                {12, 22, 27},
                {45, 52, 25},
                {58, 35, 58},
                {21, 37, 43},
                {44, 45, 28}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C5"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Line Marker Stacked 100 Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineMarkerStackedChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkersStacked, 250, 20, 360, 230)
            worksheet.Range("A1:C7").Value = New Object(,)  {
                {0, 59.18, 27.14},
                {44.64, 52.22, 25.08},
                {45.21, 49.8, 57.99},
                {24.32, 37.3, 42.73},
                {58.34, 34.43, 28.34},
                {31.89, 69.78, 46.88},
                {41.79, 63.94, 56.24}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C7"), RowCol.Columns)
            shape.Chart.SeriesCollection(0).Format.Line.Weight = 2.25
            shape.Chart.SeriesCollection(1).Format.Line.Weight = 2.25
            shape.Chart.SeriesCollection(2).Format.Line.Weight = 2.25
            shape.Chart.ChartTitle.Text = "Line Marker Stacked Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineStacked100Chart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineStacked100, 250, 20, 360, 230)
            worksheet.Range("A1:C5").Value = New Object(,)  {
                {12, 22, 27},
                {45, 52, 25},
                {58, 35, 58},
                {21, 37, 43},
                {44, 45, 28}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C5"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Line Stacked 100 Chart"
            shape.Chart.SeriesCollection(0).Format.Line.Weight = 2.25
            shape.Chart.SeriesCollection(1).Format.Line.Weight = 2.25
            shape.Chart.SeriesCollection(2).Format.Line.Weight = 2.25
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineStackedChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineStacked, 250, 20, 360, 230)
            worksheet.Range("A1:C7").Value = New Object(,)  {
                {0, 59.18, 27.14},
                {44.64, 52.22, 25.08},
                {45.21, 49.8, 57.99},
                {24.32, 37.3, 42.73},
                {58.34, 34.43, 28.34},
                {31.89, 69.78, 46.88},
                {41.79, 63.94, 56.24}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:C7"), RowCol.Columns)
            shape.Chart.SeriesCollection(0).Format.Line.Weight = 2.25
            shape.Chart.SeriesCollection(1).Format.Line.Weight = 2.25
            shape.Chart.SeriesCollection(2).Format.Line.Weight = 2.25
            shape.Chart.ChartTitle.Text = "Line Stack Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.PieChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Pie, 250, 20, 360, 230)
            worksheet.Range("A1:B4").Value = New Object(,)  {
                {"Blue", 1},
                {"Red", 2},
                {"Green", 3},
                {"Purple", 4}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B4"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Pie Chart"
            shape.Chart.Legend.Position = LegendPosition.Right
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Pie_DoughnutChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Doughnut, 250, 20, 360, 230)
            worksheet.Range("A1:B6").Value = New Object(,)  {
                {"S1", "S2"},
                {10, 25},
                {51, 36},
                {52, 85},
                {22, 65},
                {23, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B6"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Area Chart"
            shape.Chart.ChartGroups(0).DoughnutHoleSize = 50
            shape.Chart.SeriesCollection(0).HasDataLabels = True
            shape.Chart.SeriesCollection(1).HasDataLabels = True
            shape.Chart.SeriesCollection(1).Explosion = 2
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Stock_HighLowCloseStockChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.StockHLC, 350, 20, 360, 230)
            worksheet.Range("A1:D17").Value = New Object(,)  {
                {Nothing, "High", "Low", "Close"},
                {
                    #9/1/2019#,
                    105.76,
                    92.38,
                    100.94
                },
                {
                    #9/2/2019#,
                    102.45,
                    90.14,
                    93.45
                },
                {
                    #9/3/2019#,
                    102.11,
                    85.01,
                    99.89
                },
                {
                    #9/4/2019#,
                    106.01,
                    94.04,
                    99.45
                },
                {
                    #9/5/2019#,
                    108.23,
                    98.16,
                    104.33
                },
                {
                    #9/8/2019#,
                    107.7,
                    91.02,
                    102.17
                },
                {
                    #9/9/2019#,
                    110.36,
                    101.62,
                    110.07
                },
                {
                    #9/10/2019#,
                    115.97,
                    106.89,
                    112.39
                },
                {
                    #9/11/2019#,
                    120.32,
                    112.15,
                    117.52
                },
                {
                    #9/12/2019#,
                    122.03,
                    114.67,
                    114.75
                },
                {
                    #9/15/2019#,
                    120.46,
                    106.21,
                    116.85
                },
                {
                    #9/16/2019#,
                    118.08,
                    113.55,
                    116.69
                },
                {
                    #9/17/2019#,
                    128.23,
                    110.91,
                    117.25
                },
                {
                    #9/18/2019#,
                    120.55,
                    108.09,
                    112.52
                },
                {
                    #9/19/2019#,
                    112.58,
                    105.42,
                    109.12
                },
                {
                    #9/22/2019#,
                    115.23,
                    97.25,
                    101.56
                }
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D17"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "High-Low-Close Stock Chart"

            Dim valueAxis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            Dim categoryAxis As IAxis = shape.Chart.Axes.Item(AxisType.Category)
            Dim series_close As ISeries = shape.Chart.SeriesCollection(2)

            'config value axis
            valueAxis.MinimumScale = 80
            valueAxis.MaximumScale = 140
            valueAxis.MajorUnit = 15

            'config category axis
            categoryAxis.CategoryType = CategoryType.CategoryScale
            categoryAxis.MajorTickMark = TickMark.Outside
            categoryAxis.TickLabelSpacingIsAuto = False
            categoryAxis.TickLabelSpacing = 5
            series_close.MarkerStyle = MarkerStyle.Square
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Stock_OpenHighLowCloseStock" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.StockOHLC, 350, 20, 360, 220)
            worksheet.Range("A1:E17").Value = New Object(,)  {
                {Nothing, "Open", "High", "Low", "Close"},
                {
                    #9/1/2019#,
                    103.46,
                    105.76,
                    92.38,
                    100.94
                },
                {
                    #9/2/2019#,
                    100.26,
                    102.45,
                    90.14,
                    93.45
                },
                {
                    #9/3/2019#,
                    98.05,
                    102.11,
                    85.01,
                    99.89
                },
                {
                    #9/4/2019#,
                    100.32,
                    106.01,
                    94.04,
                    99.45
                },
                {
                    #9/5/2019#,
                    99.74,
                    108.23,
                    98.16,
                    104.33
                },
                {
                    #9/8/2019#,
                    92.11,
                    107.7,
                    91.02,
                    102.17
                },
                {
                    #9/9/2019#,
                    107.8,
                    110.36,
                    101.62,
                    110.07
                },
                {
                    #9/10/2019#,
                    107.56,
                    115.97,
                    106.89,
                    112.39
                },
                {
                    #9/11/2019#,
                    112.86,
                    120.32,
                    112.15,
                    117.52
                },
                {
                    #9/12/2019#,
                    115.02,
                    122.03,
                    114.67,
                    114.75
                },
                {
                    #9/15/2019#,
                    108.53,
                    120.46,
                    106.21,
                    116.85
                },
                {
                    #9/16/2019#,
                    114.97,
                    118.08,
                    113.55,
                    116.69
                },
                {
                    #9/17/2019#,
                    127.14,
                    128.23,
                    110.91,
                    117.25
                },
                {
                    #9/18/2019#,
                    118.89,
                    120.55,
                    108.09,
                    112.52
                },
                {
                    #9/19/2019#,
                    105.57,
                    112.58,
                    105.42,
                    109.12
                },
                {
                    #9/22/2019#,
                    110.23,
                    115.23,
                    97.25,
                    101.56
                }
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:E17"), RowCol.Columns)

            'set chart title
            shape.Chart.ChartTitle.Text = "Open-High-Low-Close Stock Chart"
            Dim valueAxis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            Dim categoryAxis As IAxis = shape.Chart.Axes.Item(AxisType.Category)

            'config value axis 
            valueAxis.MinimumScale = 80
            valueAxis.MaximumScale = 140
            valueAxis.MajorUnit = 15

            'config category axis
            categoryAxis.CategoryType = CategoryType.CategoryScale
            categoryAxis.MajorTickMark = TickMark.Outside
            categoryAxis.TickMarkSpacing = 5
            categoryAxis.TickLabelSpacing = 5
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Stock_VolumeHighLowCloseStock" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.StockVHLC, 350, 20, 360, 230)
            worksheet.Range("A1:E17").Value = New Object(,)  {
                {Nothing, "Volume", "High", "Low", "Close"},
                {
                    #9/1/2019#,
                    26085,
                    105.76,
                    92.38,
                    100.94
                },
                {
                    #9/2/2019#,
                    52314,
                    102.45,
                    90.14,
                    93.45
                },
                {
                    #9/3/2019#,
                    70308,
                    102.11,
                    85.01,
                    99.89
                },
                {
                    #9/4/2019#,
                    33401,
                    106.01,
                    94.04,
                    99.45
                },
                {
                    #9/5/2019#,
                    87500,
                    108.23,
                    98.16,
                    104.33
                },
                {
                    #9/8/2019#,
                    33756,
                    107.7,
                    91.02,
                    102.17
                },
                {
                    #9/9/2019#,
                    65737,
                    110.36,
                    101.62,
                    110.07
                },
                {
                    #9/10/2019#,
                    45668,
                    115.97,
                    106.89,
                    112.39
                },
                {
                    #9/11/2019#,
                    47815,
                    120.32,
                    112.15,
                    117.52
                },
                {
                    #9/12/2019#,
                    76759,
                    122.03,
                    114.67,
                    114.75
                },
                {
                    #9/15/2019#,
                    23492,
                    120.46,
                    106.21,
                    116.85
                },
                {
                    #9/16/2019#,
                    56127,
                    118.08,
                    113.55,
                    116.69
                },
                {
                    #9/17/2019#,
                    81142,
                    128.23,
                    110.91,
                    117.25
                },
                {
                    #9/18/2019#,
                    46384,
                    120.55,
                    108.09,
                    112.52
                },
                {
                    #9/19/2019#,
                    51005,
                    112.58,
                    105.42,
                    109.12
                },
                {
                    #9/22/2019#,
                    35223,
                    115.23,
                    97.25,
                    101.56
                }
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:E17"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Volume-High-Low-Close Stock Chart"
            shape.Chart.LineGroups(0).HiLoLines.Format.Line.Color.RGB = Color.Black

            Dim valueAxis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            Dim categoryAxis As IAxis = shape.Chart.Axes.Item(AxisType.Category)
            Dim valueSecondaryAxis As IAxis = shape.Chart.Axes.Item(AxisType.Value, AxisGroup.Secondary)
            Dim series_close As ISeries = shape.Chart.SeriesCollection(3)

            'config value axis
            valueAxis.MinimumScale = 0
            valueAxis.MaximumScale = 150000
            valueAxis.MajorUnit = 30000

            'config category axis
            categoryAxis.CategoryType = CategoryType.CategoryScale
            categoryAxis.MajorTickMark = TickMark.Outside
            categoryAxis.TickLabelSpacing = 4

            'config secondary value axis
            valueSecondaryAxis.MinimumScale = 0
            valueSecondaryAxis.MaximumScale = 150
            valueSecondaryAxis.MajorUnit = 30

            'config marker style
            series_close.MarkerFormat.Fill.Color.RGB = Color.Orange
            series_close.MarkerStyle = MarkerStyle.Square
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Stock_VolumeOpenHighLowClose" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.StockVOHLC, 300, 20, 360, 230)
            worksheet.Range("A1:F23").Value = New Object(,)  {
                {Nothing, "Volume", "Open", "High", "Low", "Close"},
                {
                    #9/1/2019#,
                    26085,
                    103.46,
                    105.76,
                    92.38,
                    100.94
                },
                {
                    #9/2/2019#,
                    52314,
                    100.26,
                    102.45,
                    90.14,
                    93.45
                },
                {
                    #9/3/2019#,
                    70308,
                    98.05,
                    102.11,
                    85.01,
                    99.89
                },
                {
                    #9/4/2019#,
                    33401,
                    100.32,
                    106.01,
                    94.04,
                    99.45
                },
                {
                    #9/5/2019#,
                    87500,
                    99.74,
                    108.23,
                    98.16,
                    104.33
                },
                {
                    #9/8/2019#,
                    33756,
                    92.11,
                    107.7,
                    91.02,
                    102.17
                },
                {
                    #9/9/2019#,
                    65737,
                    107.8,
                    110.36,
                    101.62,
                    110.07
                },
                {
                    #9/10/2019#,
                    45668,
                    107.56,
                    115.97,
                    106.89,
                    112.39
                },
                {
                    #9/11/2019#,
                    47815,
                    112.86,
                    120.32,
                    112.15,
                    117.52
                },
                {
                    #9/12/2019#,
                    76759,
                    115.02,
                    122.03,
                    114.67,
                    114.75
                },
                {
                    #9/15/2019#,
                    23492,
                    108.53,
                    120.46,
                    106.21,
                    116.85
                },
                {
                    #9/16/2019#,
                    56127,
                    114.97,
                    118.08,
                    113.55,
                    116.69
                },
                {
                    #9/17/2019#,
                    81142,
                    127.14,
                    128.23,
                    110.91,
                    117.25
                },
                {
                    #9/18/2019#,
                    46384,
                    118.89,
                    120.55,
                    108.09,
                    112.52
                },
                {
                    #9/19/2019#,
                    51005,
                    105.57,
                    112.58,
                    105.42,
                    109.12
                }
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:F23"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Stock Volume-Open-High-Low-Close Chart"

            Dim valueAxis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
            Dim categoryAxis As IAxis = shape.Chart.Axes.Item(AxisType.Category)
            Dim valueSecondaryAxis As IAxis = shape.Chart.Axes.Item(AxisType.Value, AxisGroup.Secondary)

            valueAxis.MinimumScale = 0
            valueAxis.MaximumScale = 150000
            valueAxis.MajorUnit = 30000
            categoryAxis.CategoryType = CategoryType.CategoryScale
            categoryAxis.TickLabelSpacing = 5
            valueSecondaryAxis.MajorUnit = 40
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.XYScatterChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.XYScatter, 250, 20, 360, 230)
            worksheet.Range("A1:D7").Value = New Object(,)  {
                {"Blue", Nothing, "Red", Nothing},
                {55, 964, 67, 475},
                {20, 825, 10, 163},
                {77, 840, 87, 224},
                {182, 596, 46, 196},
                {190, 384, 100, 377},
                {140, 503, 92, 47}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B7"), RowCol.Columns)
            shape.Chart.SeriesCollection.Add(worksheet.Range("C1:D7"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Scatter Chart"

            'config markers style
            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)
            Dim series2 As ISeries = shape.Chart.SeriesCollection(1)
            series1.MarkerStyle = MarkerStyle.Square
            series1.MarkerSize = 10
            series2.MarkerSize = 10
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.XYScatterLinesChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.XYScatterLines, 250, 20, 360, 230)
            worksheet.Range("A1:B8").Value = New Object(,)  {
                {75, 250},
                {50, 125},
                {25, 375},
                {75, 250},
                {50, 875},
                {25, 625},
                {75, 750},
                {125, 500}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B8"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Scatter with Straight Lines and Markers Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.XYScatterSmooth" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.XYScatterSmoothNoMarkers, 250, 20, 360, 230)
            worksheet.Range("A1:B5").Value = New Object(,)  {
                {4, 2},
                {6, 1},
                {1, 2},
                {7, 4},
                {4, 4}
            }
            worksheet.Range("A7:B11").Value = New Object(,)  {
                {9, 5},
                {7, 8},
                {9, 8},
                {5, 9},
                {2, 4}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B5"), RowCol.Columns)
            shape.Chart.SeriesCollection.Add(worksheet.Range("A7:B11"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Scatter with Smooth Lines Chart"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.XYScatterSmoothWithMarkers" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.XYScatterSmooth, 250, 20, 360, 230)
            worksheet.Range("A1:B5").Value = New Object(,)  {
                {4, 2},
                {6, 1},
                {1, 2},
                {7, 4},
                {4, 4}
            }
            worksheet.Range("A7:B11").Value = New Object(,)  {
                {9, 5},
                {7, 8},
                {9, 8},
                {5, 9},
                {2, 4}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B5"), RowCol.Columns)
            shape.Chart.SeriesCollection.Add(worksheet.Range("A7:B11"), RowCol.Columns)
            shape.Chart.ChartTitle.Text = "Scatter with Smooth Lines and Markers"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateConnectorLine" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.PieOfPie, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'connector line for pie of pie chart.
            shape.Chart.PieGroups(0).HasSeriesLines = True
            shape.Chart.PieGroups(0).SeriesLines.Format.Line.Color.RGB = Color.Orange
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateDropLine" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
            shape.Chart.LineGroups(0).HasDropLines = True
            shape.Chart.LineGroups(0).DropLines.Format.Line.Color.RGB = Color.LightPink
            shape.Chart.LineGroups(0).DropLines.Format.Line.Weight = 3
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateHiLoLine" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
            shape.Chart.LineGroups(0).HasHiLoLines = True
            shape.Chart.LineGroups(0).HiLoLines.Format.Line.Color.RGB = Color.LightPink
            shape.Chart.LineGroups(0).HiLoLines.Format.Line.Weight = 3
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateSeriesLine" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnStacked, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
            shape.Chart.ColumnGroups(0).HasSeriesLines = True
            shape.Chart.ColumnGroups(0).SeriesLines.Format.Line.Color.RGB = Color.LightPink
            shape.Chart.ColumnGroups(0).SeriesLines.Format.Line.Weight = 3
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateTrendline" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)
            series1.Trendlines.Add()
            series1.Trendlines(0).Type = TrendlineType.Linear
            series1.Trendlines(0).Forward = 1
            series1.Trendlines(0).Backward = 0.5
            series1.Trendlines(0).Intercept = 2.5
            series1.Trendlines(0).DisplayEquation = True
            series1.Trendlines(0).DisplayRSquared = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateUpDownBars" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'config up down bars for line chart.
            shape.Chart.LineGroups(0).HasUpDownBars = True
            shape.Chart.LineGroups(0).UpBars.Format.Fill.Color.RGB = Color.FromArgb(199, 235, 217)
            shape.Chart.LineGroups(0).DownBars.Format.Fill.Color.RGB = Color.LightPink
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartTitle.ConfigChartTitleRichText" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -20, 36, 27},
                {"Item3", 62, 70, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 50, 50}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'config chart title style with rich text
            shape.Chart.HasTitle = True
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs.Add("ChartSubtitle")
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs.Add("ChartTitle", 0)
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs(0).Font.Color.RGB = Color.CornflowerBlue
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs(0).Font.Size = 15
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs(1).Font.Color.RGB = Color.Orange
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs(1).Font.Size = 10
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartTitle.ConfigChartTitleStyle" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -20, 36, 27},
                {"Item3", 62, 70, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 50, 50}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'config chart title style
            shape.Chart.HasTitle = True
            shape.Chart.ChartTitle.Text = "MyChartTitle"
            shape.Chart.ChartTitle.Font.Size = 15
            shape.Chart.ChartTitle.Font.Name = "Bradley Hand ITC"
            shape.Chart.ChartTitle.Format.Fill.Color.RGB = Color.DarkOrange
            shape.Chart.ChartTitle.Format.Line.Color.RGB = Color.CornflowerBlue
            shape.Chart.ChartTitle.Format.Line.Weight = 1.5
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataLabel.ConfigDataLabelFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:B5").Value = New Object(,)  {
                {Nothing, "S1"},
                {"Item1", -20},
                {"Item2", 30},
                {"Item3", 50},
                {"Item3", 40}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B5"), RowCol.Columns, True, True)

            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)
            series1.HasDataLabels = True
            series1.DataLabels.ShowSeriesName = True

            'set series1's all data label's format.
            series1.DataLabels.Format.Fill.Color.RGB = Color.Pink
            series1.DataLabels.Format.Line.Color.RGB = Color.Green
            series1.DataLabels.Format.Line.Weight = 1

            'set series1's specific data label's format.
            series1.DataLabels(2).Format.Fill.Color.RGB = Color.LightGreen
            series1.Points(2).DataLabel.Format.Line.Color.RGB = Color.Gray
            series1.Points(2).DataLabel.Format.Line.Weight = 2
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataLabel.ConfigDataLabelText" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:B5").Value = New Object(,)  {
                {Nothing, "S1", "S2"},
                {"Item1", -20, 10},
                {"Item2", 30, 60},
                {"Item3", 50, 80},
                {"Item3", 40, 70}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B5"), RowCol.Columns, True, True)

            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)
            series1.HasDataLabels = True

            'customize data lables' text.
            series1.DataLabels.ShowCategoryName = True
            series1.DataLabels.ShowSeriesName = True
            series1.DataLabels.ShowLegendKey = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataPoint.ConfigDataPointFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)

            'set data point format.
            series1.Points(2).Format.Fill.Color.RGB = Color.FromArgb(0, 176, 240)
            series1.Points(2).Format.Line.Color.RGB = Color.Blue
            series1.Points(2).Format.Line.Weight = 1.5
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataPoint.ConfigNegativePoint" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)

            'if it is a negative point, it's color is red.
            series1.InvertIfNegative = True
            series1.InvertColor.ObjectThemeColor = ThemeColor.Accent4
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataPoint.ConfigSecondarySection" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.PieOfPie, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)
            series1.HasDataLabels = True

            'config secondary section for pie of pie chart
            shape.Chart.ChartGroups(0).SplitType = ChartSplitType.SplitByCustomSplit
            series1.Points(0).SecondaryPlot = True
            series1.Points(1).SecondaryPlot = False
            series1.Points(2).SecondaryPlot = True
            series1.Points(3).SecondaryPlot = False
            series1.Points(4).SecondaryPlot = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Legend.ConfigLegendEntryFontStyle" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 70, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
            shape.Chart.HasLegend = True
            Dim legend As ILegend = shape.Chart.Legend

            'config legedn entry font style
            Dim legendentry As ILegendEntry = legend.LegendEntries(0)
            legendentry.Font.Color.RGB = Color.Red
            legendentry.Font.Size = 15
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Legend.ConfigLegendFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 70, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
            shape.Chart.HasLegend = True

            'config legend font style
            Dim legend As ILegend = shape.Chart.Legend
            legend.Font.Size = 12
            legend.Font.Name = "Cooper Black"

            'config legend format
            legend.Format.Fill.Color.RGB = Color.LightGray
            legend.Format.Line.Color.RGB = Color.Gray
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Legend.ConfigLegendPositionAndLayout" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -20, 36, 27},
                {"Item3", 52, 70, 30},
                {"Item4", 22, 33, -20},
                {"Item5", 23, 30, 30}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
            shape.Chart.HasLegend = True
            Dim legend As ILegend = shape.Chart.Legend

            'position.
            legend.Position = LegendPosition.Left

            'font.
            legend.Font.Color.RGB = Color.Red
            legend.Font.Italic = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Markers.ConfigMarkersFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkers, 250, 20, 360, 230)
            worksheet.Range("A1:B6").Value = New Object(,)  {
                {Nothing, "S1"},
                {"Item1", 10},
                {"Item2", -51},
                {"Item3", 52},
                {"Item4", 22},
                {"Item5", 40}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B6"), RowCol.Columns, True, True)
            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)

            'config line markers style
            series1.MarkerFormat.Fill.Color.RGB = Color.CornflowerBlue
            series1.MarkerFormat.Line.Style = LineStyle.ThickThin
            series1.MarkerFormat.Line.Color.RGB = Color.LightGreen
            series1.MarkerFormat.Line.Weight = 3
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Markers.ConfigMarkerStyle" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkers, 250, 20, 360, 230)
            worksheet.Range("A1:B6").Value = New Object(,)  {
                {Nothing, "S1"},
                {"Item1", 10},
                {"Item2", -51},
                {"Item3", 52},
                {"Item4", 22},
                {"Item5", 40}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B6"), RowCol.Columns, True, True)
            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)

            'config line markers style
            series1.MarkerStyle = MarkerStyle.Square
            series1.MarkerSize = 10
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.PlotArea.ChartJustPlotVisibleCell" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'Hidden row 3.
            worksheet.Range("3:3").Hidden = True

            'plot visible cells only, does not plot row 3.
            shape.Chart.PlotVisibleOnly = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.PlotArea.ConfigPlotAreaFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 50, -30},
                {"Item4", 22, 65, 30},
                {"Item5", 23, 40, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim plotarea As IPlotArea = shape.Chart.PlotArea
            plotarea.Format.Fill.Color.RGB = Color.LightGray
            plotarea.Format.Line.Color.RGB = Color.Gray
            plotarea.Format.Line.Weight = 1
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.AddSeries" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            'Add series
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.ChangeSeriesType" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            'Add series
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)
            Dim series2 As ISeries = shape.Chart.SeriesCollection(1)

            'change series2's chart type.
            series2.ChartType = ChartType.Line
            series2.Format.Line.Weight = 2
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.ConfigBubbleChartLayout" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Bubble, 250, 20, 350, 220)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)
            series1.HasDataLabels = True
            shape.Chart.XYGroups(0).BubbleScale = 150
            shape.Chart.XYGroups(0).SizeRepresents = SizeRepresents.SizeIsArea
            shape.Chart.XYGroups(0).ShowNegativeBubbles = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.ConfigSeriesFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
            Dim series1 As ISeries = shape.Chart.SeriesCollection(0)

            'set series format.
            series1.Format.Fill.Color.RGB = Color.MediumSeaGreen
            series1.Format.Line.Color.RGB = Color.Green
            series1.Format.Line.Weight = 1.5
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.CreateSecondaryAxis" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:C6").Value = New Object(,)  {
                {Nothing, "S1", "S2"},
                {"Item1", 10, 25},
                {"Item2", -51, -36},
                {"Item3", 32, 64},
                {"Item4", 44, 80},
                {"Item5", 60, 100}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)
            Dim series2 As ISeries = shape.Chart.SeriesCollection(1)

            'add a secondary axis
            series2.AxisGroup = AxisGroup.Secondary
            series2.ChartType = ChartType.Line
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.DeleteSeries" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D6").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            }
            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D6"), RowCol.Columns, True, True)

            'delete chart series, make series count to 1.
            shape.Chart.SeriesCollection(2).Delete()
            shape.Chart.SeriesCollection(1).Delete()

            'Chart's series count is 1.
            Dim count = shape.Chart.SeriesCollection.Count
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.ExtendSeries" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:D4").Value = New Object(,)  {
                {Nothing, "S1", "S2", "S3"},
                {"Item1", 10, 25, 50},
                {"Item2", 15, -36, 40},
                {"Item3", 52, 40, -30}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:D4"), RowCol.Columns, True, True)
            worksheet.Range("A12:D13").Value = New Object(,)  {
                {"Item5", 10, 20, -30},
                {"Item6", 20, 40, 80}
            }

            'add new data point to existing series.
            shape.Chart.SeriesCollection.Extend(worksheet.Range("A12:D13"), RowCol.Columns, True)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.SetVaryColorForColumnChart" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
            worksheet.Range("A1:B6").Value = New Object(,)  {
                {Nothing, "S1"},
                {"Item1", 10},
                {"Item2", -51},
                {"Item3", 52},
                {"Item4", 22},
                {"Item5", 23}
            }

            shape.Chart.SeriesCollection.Add(worksheet.Range("A1:B6"), RowCol.Columns, True, True)

            'set vary colors for column chart which only has one series.
            shape.Chart.ColumnGroups(0).VaryByCategories = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Comments.AddComment" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'create comment for range C3.
            Dim comment As IComment = worksheet.Range!C3.AddComment("Range C3's comment.")

            'change comment's text.
            comment.Text = "Range C3's new comment."
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Comments.ClearComment" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range!C3.AddComment("Range C3's comment.")
            worksheet.Range!D4.AddComment("Range D4's comment.")
            worksheet.Range!D5.AddComment("Range D5's comment.")

            'delete a single cell comment.
            worksheet.Range!D5.Comment.Delete()

            'clear a range of cells comment.
            worksheet.Range("C3:D4").ClearComments()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Comments.ConfigCommentLayout" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim commentC3 As IComment = worksheet.Range!C3.AddComment("Range C3's comment.")

            commentC3.Shape.Line.Color.RGB = Color.LightGreen
            commentC3.Shape.Line.Weight = 3
            commentC3.Shape.Line.Style = LineStyle.ThickThin
            commentC3.Shape.Line.DashStyle = LineDashStyle.Solid
            commentC3.Shape.Fill.Color.RGB = Color.Pink
            commentC3.Shape.Width = 100
            commentC3.Shape.Height = 200
            commentC3.Shape.TextFrame.TextRange.Font.Bold = True
            commentC3.Visible = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Comments.SetRichTextForComment" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim commentC3 As IComment = worksheet.Range!C3.AddComment("This is a rich text comment:" &amp; vbCrLf)

            'config the paragraph's style.
            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Font.Bold = True

            'add runs for the paragraph.
            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Runs.Add("Run1 font size is 15.", 1)
            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Runs.Add("Run2 font strikethrough.", 2)
            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Runs.Add("Run3 font italic, green color.")

            'config the first run of the paragraph's style.
            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Runs(1).Font.Size = 15

            'config the second run of the paragraph's style. 
            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Runs(2).Font.Strikethrough = True

            'config the third run of the paragraph's style. 
            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Runs(3).Font.Italic = True
            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Runs(3).Font.Color.RGB = Color.Green

            'show comment.
            commentC3.Visible = True
            commentC3.Shape.WidthInPixel = 300
            commentC3.Shape.HeightInPixel = 100
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateAverageRule" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("B:C").ColumnWidth = 17
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'weight above 1 std dev average, set its interior color to green.
            Dim averageCondition As IAboveAverage = worksheet.Range("E2:E7").FormatConditions.AddAboveAverage()
            averageCondition.AboveBelow = AboveBelow.BelowAverage
            averageCondition.NumStdDev = 1
            averageCondition.Interior.Color = Color.Pink
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateCellValueRule" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("B:C").ColumnWidth = 17

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data

            'weight between 71 and 79, set its interior color to yellow.
            Dim condition As IFormatCondition = TryCast(worksheet.Range("E2:E7").FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Between, 66, 70), IFormatCondition)
            condition.Interior.Color = Color.LightGreen
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateDatabBarRule" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'data bar rule.
            Dim dataBar As IDataBar = worksheet.Range("E2:E7").FormatConditions.AddDatabar()
            dataBar.MinPoint.Type = ConditionValueTypes.LowestValue
            dataBar.MinPoint.Value = Nothing
            dataBar.MaxPoint.Type = ConditionValueTypes.HighestValue
            dataBar.MaxPoint.Value = Nothing
            dataBar.BarFillType = DataBarFillType.Gradient
            dataBar.BarColor.Color = Color.Green
            dataBar.Direction = DataBarDirection.Context
            dataBar.AxisColor.Color = Color.Red
            dataBar.AxisPosition = DataBarAxisPosition.Automatic
            dataBar.NegativeBarFormat.BorderColorType = DataBarNegativeColorType.Color
            dataBar.NegativeBarFormat.BorderColor.Color = Color.Blue
            dataBar.NegativeBarFormat.ColorType = DataBarNegativeColorType.Color
            dataBar.NegativeBarFormat.Color.Color = Color.Pink
            dataBar.ShowValue = False
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateExpressionRule" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'expression rule, format weight greater than 80.
            Dim condition As IFormatCondition = TryCast(worksheet.Range("E2:E7").FormatConditions.Add(FormatConditionType.Expression, 0, "=E2&gt;68"), IFormatCondition)
            condition.Interior.Color = Color.LightPink
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateIconSetRule" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'icon set rule.
            Dim condition As IIconSetCondition = worksheet.Range("E2:E7").FormatConditions.AddIconSetCondition()
            condition.IconSet = workbook.IconSets(IconSetType.Icon3Symbols)
            condition.IconCriteria(1).Operator = FormatConditionOperator.GreaterEqual
            condition.IconCriteria(1).Value = 30
            condition.IconCriteria(1).Type = ConditionValueTypes.Percent
            condition.IconCriteria(2).Operator = FormatConditionOperator.GreaterEqual
            condition.IconCriteria(2).Value = 70
            condition.IconCriteria(2).Type = ConditionValueTypes.Percent
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateMultiRuleForRange" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'iconset rule
            Dim iconset As IIconSetCondition = worksheet.Range("E2:E7").FormatConditions.AddIconSetCondition()
            iconset.IconSet = workbook.IconSets(IconSetType.Icon3TrafficLights1)

            'cell value rule added later, it has the highest priority, set StopIfTrue to True, if cell match condition, it will not apply icon set rule.
            Dim cellvalueRule As IFormatCondition = TryCast(worksheet.Range("E2:E7").FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Between, "66", "70"), IFormatCondition)
            cellvalueRule.Font.ThemeColor = ThemeColor.Accent1
            cellvalueRule.StopIfTrue = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateThreeColorScaleRule" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'three color scale.
            Dim threeColorScaleRule As IColorScale = worksheet.Range("E2:E7").FormatConditions.AddColorScale(ColorScaleType.ThreeColorScale)
            threeColorScaleRule.ColorScaleCriteria(0).Type = ConditionValueTypes.LowestValue
            threeColorScaleRule.ColorScaleCriteria(0).FormatColor.Color = Color.Red
            threeColorScaleRule.ColorScaleCriteria(1).Type = ConditionValueTypes.Percent
            threeColorScaleRule.ColorScaleCriteria(1).Value = 30
            threeColorScaleRule.ColorScaleCriteria(1).FormatColor.Color = Color.Yellow
            threeColorScaleRule.ColorScaleCriteria(2).Type = ConditionValueTypes.HighestValue
            threeColorScaleRule.ColorScaleCriteria(2).FormatColor.Color = Color.Green
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateTopBottomRule" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'top bottom rule.
            Dim condition As ITop10 = worksheet.Range("E2:E7").FormatConditions.AddTop10()
            condition.TopBottom = TopBottom.Top
            condition.Rank = 50
            condition.Percent = True
            condition.Interior.Color = Color.Red
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateTwoColorScaleRule" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'two color scale.
            Dim twoColorScaleRule As IColorScale = worksheet.Range("E2:E7").FormatConditions.AddColorScale(ColorScaleType.TwoColorScale)
            twoColorScaleRule.ColorScaleCriteria(0).Type = ConditionValueTypes.Number
            twoColorScaleRule.ColorScaleCriteria(0).Value = 62
            twoColorScaleRule.ColorScaleCriteria(0).FormatColor.Color = Color.Red
            twoColorScaleRule.ColorScaleCriteria(1).Type = ConditionValueTypes.Number
            twoColorScaleRule.ColorScaleCriteria(1).Value = 76
            twoColorScaleRule.ColorScaleCriteria(1).FormatColor.Color = Color.Green
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateUniqueRule" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 80, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 72, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 71, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 80, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 58, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 71, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'Unique rule.
            Dim condition As IUniqueValues = worksheet.Range("E2:E7").FormatConditions.AddUniqueValues()
            condition.DupeUnique = DupeUnique.Unique
            condition.Font.Name = "Arial"
            condition.Interior.Color = Color.Pink
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.DeleteConditionalFormatRules" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }
            worksheet.Range("A1:F7").Value = data

            'iconset rule
            Dim iconset As IIconSetCondition = worksheet.Range("E2:E7").FormatConditions.AddIconSetCondition()
            iconset.IconSet = workbook.IconSets(IconSetType.Icon3TrafficLights1)

            'cell value rule added later, it has the highest priority, set StopIfTrue to True, if cell match condition, it will not apply icon set rule.
            Dim cellvalueRule As IFormatCondition = TryCast(worksheet.Range("E2:E7").FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Between, "66", "70"), IFormatCondition)
            cellvalueRule.StopIfTrue = True

            'delete icon set rule.
            TryCast(worksheet.Range("E2:E7").FormatConditions(1), IIconSetCondition).Delete()

            'delete all the rules
            worksheet.Range("E2:E7").FormatConditions.Delete()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyAddFunction" xml:space="preserve">
    <value>
            Excel.Workbook.AddCustomFunction(New MyAddFunctionX)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!A1.Value = 1
            worksheet.Range!B1.Value = 2
            worksheet.Range!C1.Formula = "=MyAdd(A1, B1)"

            ' Range!C1.Value = 3.
            Dim result = worksheet.Range!C1.Value

            worksheet.Range("E1:F2").Value = New Object(,) {
                {1, 3},
                {2, 4}
            }

            ' Custom function use in array formula.
            worksheet.Range("G1:G2").FormulaArray = "=MyAdd(E1:E2, F1:F2)"

            ' Range!G1.Value = 4, Range!G2.Value = 6.
            Dim resultG1 = worksheet.Range!G1.Value
            Dim resultG2 = worksheet.Range!G2.Value

            '    Implementation of MyAddFunctionX
            '    
            '    Public Class MyAddFunctionX
            '        Inherits CustomFunction

            '        Public Sub New()
            '            MyBase.New("MyAdd", FunctionValueType.Number, {
            '                New Parameter(FunctionValueType.Number),
            '                New Parameter(FunctionValueType.Number)
            '            })

            '        End Sub

            '        Public Overrides Function Evaluate(arguments As Object(), context As ICalcContext) As Object
            '            Return CDbl(arguments(0)) + CDbl(arguments(1))
            '        End Function
            '    End Class
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyConcatenateFunction" xml:space="preserve">
    <value>
            Excel.Workbook.AddCustomFunction(New MyConcatenateFunctionX)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!A1.Formula = "=MyConcatenate(""I"", "" "", ""live"", "" "", ""in"", "" "", ""Xi'an"", ""."")"
            worksheet.Range!A2.Formula = "=MyConcatenate(A1, ""haha."")"

            worksheet.Range!B1.Value = 12
            worksheet.Range!B2.Value = 34
            worksheet.Range!B3.Formula = "=MyConcatenate(B1, B2)"

            worksheet.Range("M5:N5").FormulaArray = "=CONCATENATE({""aa"",""bb""}, 12, 34)"

            ' "I live in Xi'an."
            Dim resultA1 = worksheet.Range!A1.Value

            ' "I live in Xi'an.haha."
            Dim resultA2 = worksheet.Range!A2.Value

            ' "1234"
            Dim resultB3 = worksheet.Range!B3.Value

            ' "aa1234"
            Dim resultM5 = worksheet.Range!M5.Value

            ' "bb1234"
            Dim resultN5 = worksheet.Range!N5.Value

            '    Implementation of MyAddFunctionX
            '    
            '    Public Class MyConcatenateFunctionX
            '        Inherits CustomFunction

            '        Public Sub New()
            '            MyBase.New("MyConcatenate", FunctionValueType.Text, CreateParameters())
            '        End Sub

            '        Private Shared Function CreateParameters() As Parameter()
            '            Dim parameters(253) As Parameter
            '            For i As Integer = 0 To 253
            '                parameters(i) = New Parameter(FunctionValueType.Variant)
            '            Next

            '            Return parameters
            '        End Function

            '        Public Overrides Function Evaluate(arguments As Object(), context As ICalcContext) As Object
            '            Dim sb As New StringBuilder

            '            Dim result As String = String.Empty
            '            For Each argument In arguments
            '                If TypeOf argument Is CalcError Then
            '                    Return argument
            '                End If
            '                If TypeOf argument Is String OrElse TypeOf argument Is Double Then
            '                    sb.Append(argument)
            '                End If
            '            Next

            '            Return sb.ToString()
            '        End Function
            '    End Class
            '            
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyConditionalSumFunction" xml:space="preserve">
    <value>
            Excel.Workbook.AddCustomFunction(New MyConditionalSumFunctionX)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:A10").Value = New Object(,) {
                {1}, {2}, {3}, {4}, {5},
                {6}, {7}, {8}, {9}, {10}
            }

            Dim formatConditions As IFormatConditions = worksheet.Range("A1:A10").FormatConditions
            Dim cellValueRule = formatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Greater, 5)
            DirectCast(cellValueRule, IFormatCondition).Interior.Color = System.Drawing.Color.Red

            ' Sum cells value which display format interior color are red.
            worksheet.Range!C1.Formula = "=MyConditionalSum(A1:A10)"

            ' Range!C1.Value = 40.
            Dim result = worksheet.Range!C1.Value

            '    Implementation of MyConditionalSumFunctionX
            '    
            '    Public Class MyConditionalSumFunctionX
            '        Inherits CustomFunction

            '        Public Sub New()
            '            MyBase.New("MyConditionalSum", FunctionValueType.Number, CreateParameters())
            '        End Sub

            '        Private Shared Function CreateParameters() As Parameter()
            '            Dim parameters(253) As Parameter
            '            For i As Integer = 0 To 253
            '                parameters(i) = New Parameter(FunctionValueType.Object, True)
            '            Next

            '            Return parameters
            '        End Function

            '        Public Overrides Function Evaluate(arguments As Object(), context As ICalcContext) As Object
            '            Dim sum As Double = 0R
            '            For Each argument In arguments
            '                For Each item In Enumerate(argument)
            '                    If TypeOf item Is CalcError Then
            '                        Return item
            '                    End If
            '                    If TypeOf item Is Double Then
            '                        sum += CDbl(item)
            '                    End If
            '                Next item
            '            Next argument

            '            Return sum
            '        End Function

            '        Private Shared Iterator Function Enumerate(obj As Object) As IEnumerable(Of Object)
            '            Dim enumerableObjects = TryCast(obj, IEnumerable(Of Object))
            '            If enumerableObjects IsNot Nothing Then
            '                For Each item In enumerableObjects
            '                    For Each item2 In Enumerate(item)
            '                        Yield item2
            '                    Next item2
            '                Next item
            '            Else
            '                Dim objectArray2D = TryCast(obj, Object(,))
            '                If objectArray2D IsNot Nothing Then
            '                    Dim rowCount As Integer = objectArray2D.GetLength(0)
            '                    Dim colCount As Integer = objectArray2D.GetLength(1)
            '                    For i As Integer = 0 To rowCount - 1
            '                        For j As Integer = 0 To colCount - 1
            '                            Yield objectArray2D(i, j)
            '                        Next j
            '                    Next i
            '                Else
            '                    Dim calcReferenceValue = TryCast(obj, CalcReference)
            '                    If calcReferenceValue IsNot Nothing Then
            '                        For Each item In Enumerate(calcReferenceValue)
            '                            Yield item
            '                        Next
            '                    End If
            '                End If
            '            End If

            '            Yield obj
            '        End Function

            '        Private Shared Iterator Function Enumerate(reference As CalcReference) As IEnumerable(Of Object)
            '            For Each range In reference.GetRanges()
            '                Dim rowCount As Integer = range.Rows.Count
            '                Dim colCount As Integer = range.Columns.Count
            '                For i As Integer = 0 To rowCount - 1
            '                    For j As Integer = 0 To colCount - 1
            '                        If range.Cells(i, j).DisplayFormat.Interior.Color = System.Drawing.Color.Red Then
            '                            Yield range.Cells(i, j).Value
            '                        End If
            '                    Next j
            '                Next i
            '            Next range
            '        End Function
            '    End Class
            '
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyIsErrorFunction" xml:space="preserve">
    <value>
            Excel.Workbook.AddCustomFunction(New MyIsErrorFunctionX)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range!A1.Value = CalcError.Num
            worksheet.Range!A2.Value = 100

            worksheet.Range!B1.Formula = "=MyIsError(A1)"
            worksheet.Range!B2.Formula = "=MyIsError(A2)"

            ' Range!B1.Value = True.
            Dim resultB1 = worksheet.Range!B1.Value

            ' Range!B2.Value = False.
            Dim resultB2 = worksheet.Range!B2.Value

            '    Implementation of MyIsErrorFunctionX
            '      
            '    Public Class MyIsErrorFunctionX
            '        Inherits CustomFunction

            '        Public Sub New()
            '            MyBase.New("MyIsError", FunctionValueType.Boolean, {New Parameter(FunctionValueType.Variant)})
            '        End Sub

            '        Public Overrides Function Evaluate(arguments As Object(), context As ICalcContext) As Object
            '            If TypeOf arguments(0) Is CalcError Then
            '                Dim calcError = DirectCast(arguments(0), CalcError)
            '                Return calcError &lt;&gt; CalcError.None AndAlso
            '                       calcError &lt;&gt; CalcError.GettingData
            '            End If
            '            Return False
            '        End Function
            '    End Class
            '            
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyIsMergedRangeFunction" xml:space="preserve">
    <value>
            Excel.Workbook.AddCustomFunction(New MyIsMergedRangeFunctionX)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("A1:B2").Merge()

            worksheet.Range!C1.Formula = "=MyIsMergedRange(A1)"
            worksheet.Range!C2.Formula = "=MyIsMergedRange(H2)"

            ' A1 is a merged cell, Range!C1.Value = True.
            Dim resultC1 = worksheet.Range!C1.Value

            ' H2 is not a merged cell, Range!C2.Value = False.
            Dim resultC2 = worksheet.Range!C2.Value

            '    Implementation of MyIsErrorFunctionX
            '    
            '    Public Class MyIsMergedRangeFunctionX
            '        Inherits CustomFunction

            '        Public Sub New()
            '            MyBase.New("MyIsMergedRange", FunctionValueType.Boolean, {New Parameter(FunctionValueType.Object, True)})
            '        End Sub

            '        Public Overrides Function Evaluate(arguments As Object(), context As ICalcContext) As Object
            '            Dim calcReference = TryCast(arguments(0), CalcReference)
            '            If calcReference IsNot Nothing Then
            '                For Each range In calcReference.GetRanges
            '                    Return range.MergeCells
            '                Next
            '            End If
            '            Return False
            '        End Function
            '    End Class
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MySumFunction" xml:space="preserve">
    <value>
            Excel.Workbook.AddCustomFunction(New MySumFunctionX)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!A1.Value = 1
            worksheet.Range!B1.Value = 2
            worksheet.Range!C1.Formula = "=MySum(A1:B1, 2, {3,4})"

            ' Range!C1.Value = 12.
            Dim result = worksheet.Range!C1.Value

            '    Implementation of MySumFunctionX
            '
            '    Public Class MySumFunctionX
            '        Inherits CustomFunction

            '        Public Sub New()
            '            MyBase.New("MYSUM", FunctionValueType.Number, CreateParameters())
            '        End Sub

            '        Private Shared Function CreateParameters() As Parameter()
            '            Dim parameters(253) As Parameter
            '            For i As Integer = 0 To 253
            '                parameters(i) = New Parameter(FunctionValueType.Object)
            '            Next
            '            Return parameters
            '        End Function

            '        Public Overrides Function Evaluate(arguments As Object(), context As ICalcContext) As Object
            '            Dim sum As Double = 0R
            '            For Each argument In arguments
            '                For Each item In Enumerate(argument)
            '                    If TypeOf item Is CalcError Then
            '                        Return item
            '                    End If
            '                    If TypeOf item Is Double Then
            '                        sum += CDbl(item)
            '                    End If
            '                Next item
            '            Next argument
            '            Return sum
            '        End Function

            '        Private Shared Iterator Function Enumerate(obj As Object) As IEnumerable(Of Object)
            '            Dim objects = TryCast(obj, IEnumerable(Of Object))
            '            If objects IsNot Nothing Then
            '                For Each item In objects
            '                    For Each item2 In Enumerate(item)
            '                        Yield item2
            '                    Next item2
            '                Next item
            '            Else
            '                Dim array = TryCast(obj, Object(,))
            '                If array IsNot Nothing Then
            '                    Dim rowCount As Integer = array.GetLength(0)
            '                    Dim colCount As Integer = array.GetLength(1)
            '                    For i As Integer = 0 To rowCount - 1
            '                        For j As Integer = 0 To colCount - 1
            '                            Yield array(i, j)
            '                        Next j
            '                    Next i
            '                End If
            '            End If
            '            If obj IsNot Nothing Then
            '                Yield obj
            '            End If
            '        End Function
            '    End Class
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateCustomValidation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range!A2.Value = 1
            worksheet.Range!A3.Value = 2
            worksheet.Range!C2.Value = 0

            'create custom validation, if the expression "=$C$2" result is True, the cell's validation will be True, otherwise, it is False.
            'when use custom validation, validationOperator and formula2 parameters will be ignored even if you have given.
            worksheet.Range("A2:A3").Validation.Add(ValidationType.Custom, ValidationAlertStyle.Information, formula1:="=$C$2")

            'judge if Range("A2:A3") has validation.
            For i As Integer = 1 To 2
                If worksheet.Range(i, 0).HasValidation Then
                    'set the range(i, 0)'s interior color.
                    worksheet.Range(i, 0).Interior.Color = Color.LightBlue
                End If
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateDateValidation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("C2:E4").Value = New Object(,)  {
                {
                    #12/1/2020#,
                    #12/14/2020#,
                    #12/15/2020#
                },
                {
                    #12/18/2020#,
                    #12/19/2020#,
                    #12/30/2020#
                },
                {
                    #12/31/2020#,
                    #12/13/2019#,
                    #12/15/2019#
                }
            }
            'create date validation.
            worksheet.Range("C2:E4").Validation.Add(ValidationType.Date, ValidationAlertStyle.Stop, ValidationOperator.Between, #12/13/2020#, #12/18/2020#)

            'set column width just for export shown.
            worksheet.Range("C:E").EntireColumn.ColumnWidthInPixel = 120

            'judge if Range("C2:E4") has validation.
            For i As Integer = 1 To 3
                For j As Integer = 2 To 4
                    If worksheet.Range(i, j).HasValidation Then
                        'set the range(i, j)'s interior color.
                        worksheet.Range(i, j).Interior.Color = Color.LightBlue
                    End If
                Next j
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateDecimalValidation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("C2:E4").Value = New Object(,)  {
                {1, 3.0, 3.4},
                {7, 9, 102.7},
                {102.8, 110, 120}
            }

            'add decimal validation.
            worksheet.Range("C2:E4").Validation.Add(ValidationType.Decimal, ValidationAlertStyle.Stop, ValidationOperator.Between, 3.4, 102.8)

            Dim validation As IValidation = worksheet.Range("C2:E4").Validation
            validation.IgnoreBlank = True
            validation.InputTitle = "Tips"
            validation.InputMessage = "Input a decimal value between 3.4 and 102.8, please."
            validation.ErrorTitle = "Error"
            validation.ErrorMessage = "input value does not between 3.4 and 102.8."
            validation.ShowInputMessage = True
            validation.ShowError = True

            'judge if Range("C2:E4") has validation.
            For i As Integer = 1 To 3
                For j As Integer = 2 To 4
                    If worksheet.Range(i, j).HasValidation Then
                        'set the Range(i, j)'s interior color.
                        worksheet.Range(i, j).Interior.Color = Color.LightBlue
                    End If
                Next j
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateListValidation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range!A1.Value = "aaa"
            worksheet.Range!A2.Value = "bbb"
            worksheet.Range!A3.Value = "ccc"
            worksheet.Range("C2:E4").Value = New Object(,)  {
                {"aaa", "bbb", "ccc"},
                {"aaa1", "bbb1", "ccc1"},
                {"aaa2", "bbb2", "ccc2"}
            }

            'create list validation.
            worksheet.Range("C2:E4").Validation.Add(ValidationType.List, ValidationAlertStyle.Stop, ValidationOperator.Between, "=$a$1:$a$3")
            Dim validation As IValidation = worksheet.Range("C2:E4").Validation
            validation.InCellDropdown = True

            'judge if Range("C2:E4") has validation.
            For i As Integer = 1 To 3
                For j As Integer = 2 To 4
                    If worksheet.Range(i, j).HasValidation Then
                        'set the range(i, j)'s interior color.
                        worksheet.Range(i, j).Interior.Color = Color.LightBlue
                    End If
                Next j
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateTextLength" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("C2:E4").Value = New Object(,)  {
                {"aa", "bb", "aa1"},
                {"ccc", "dddd", "dddd1"},
                {"ff", "ffff", "ffff1"}
            }

            'create text length validation, text length between 2 and 3.
            worksheet.Range("C2:E4").Validation.Add(ValidationType.TextLength, ValidationAlertStyle.Stop, ValidationOperator.Between, 2, 3)

            'judge if Range("C2:E4") has validation.
            For i As Integer = 1 To 3
                For j As Integer = 2 To 4
                    If worksheet.Range(i, j).HasValidation Then
                        'set the range(i, j)'s interior color.
                        worksheet.Range(i, j).Interior.Color = Color.LightBlue
                    End If
                Next j
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateTimeValidation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("C2:E4").Value = New Object(,)  {
                {
                    New TimeSpan(13, 0, 0),
                    New TimeSpan(13, 29, 59),
                    New TimeSpan(13, 30, 0)
                },
                {
                    New TimeSpan(14, 0, 0),
                    New TimeSpan(15, 0, 0),
                    New TimeSpan(16, 30, 0)
                },
                {
                    New TimeSpan(19, 0, 0),
                    New TimeSpan(18, 29, 59),
                    New TimeSpan(18, 30, 0)
                }
            }

            'create time validation.
            worksheet.Range("C2:E4").Validation.Add(ValidationType.Time, ValidationAlertStyle.Stop, ValidationOperator.Between, New TimeSpan(13, 30, 0), New TimeSpan(18, 30, 0))

            'judge if Range("C2:E4") has validation.
            For i As Integer = 1 To 3
                For j As Integer = 2 To 4
                    If worksheet.Range(i, j).HasValidation Then
                        'set the range(i, j)'s interior color.
                        worksheet.Range(i, j).Interior.Color = Color.LightBlue
                    End If
                Next j
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateWholeNumberValidation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("C2:E4").Value = New Object(,)  {
                {1, 3, 5},
                {7, 9, 11},
                {13, 15, 17}
            }

            'add whole number validation.
            worksheet.Range("C2:E4").Validation.Add(ValidationType.Whole, ValidationAlertStyle.Stop, ValidationOperator.Between, 1, 8)
            Dim validation As IValidation = worksheet.Range("C2:E4").Validation
            validation.IgnoreBlank = True
            validation.InputTitle = "Tips"
            validation.InputMessage = "Input a value between 1 and 8, please"
            validation.ErrorTitle = "Error"
            validation.ErrorMessage = "input value does not between 1 and 8"
            validation.ShowInputMessage = True
            validation.ShowError = True

            'judge if Range("C2:E4") has validation.
            For i As Integer = 1 To 3
                For j As Integer = 2 To 4
                    If worksheet.Range(i, j).HasValidation Then
                        'set the range(i, j)'s interior color.
                        worksheet.Range(i, j).Interior.Color = Color.LightBlue
                    End If
                Next j
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.DeleteValidation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("C2:E4").Value = New Object(,)  {
                {
                    New TimeSpan(13, 0, 0),
                    New TimeSpan(13, 29, 59),
                    New TimeSpan(13, 30, 0)
                },
                {
                    New TimeSpan(14, 0, 0),
                    New TimeSpan(15, 0, 0),
                    New TimeSpan(16, 30, 0)
                },
                {
                    New TimeSpan(19, 0, 0),
                    New TimeSpan(18, 29, 59),
                    New TimeSpan(18, 30, 0)
                }
            }

            'create time validation.
            worksheet.Range("C2:E4").Validation.Add(ValidationType.Time, ValidationAlertStyle.Stop, ValidationOperator.Between, New TimeSpan(13, 30, 0), New TimeSpan(18, 30, 0))

            'delete validation.
            worksheet.Range("C2:E4").Validation.Delete()

            'judge if Range("C2:E4") has validation.
            For i As Integer = 1 To 3
                For j As Integer = 2 To 4
                    If worksheet.Range(i, j).HasValidation Then
                        'set the range(i, j)'s interior color.
                        worksheet.Range(i, j).Interior.Color = Color.LightBlue
                    End If
                Next j
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.ModifyValidation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("C2:E4").Value = New Object(,)  {
                {
                    New TimeSpan(13, 0, 0),
                    New TimeSpan(13, 29, 59),
                    New TimeSpan(13, 30, 0)
                },
                {
                    New TimeSpan(14, 0, 0),
                    New TimeSpan(15, 0, 0),
                    New TimeSpan(16, 30, 0)
                },
                {
                    New TimeSpan(19, 0, 0),
                    New TimeSpan(18, 29, 59),
                    New TimeSpan(18, 30, 0)
                }
            }

            'create time validation.
            worksheet.Range("C2:E4").Validation.Add(ValidationType.Time, ValidationAlertStyle.Stop, ValidationOperator.Between, New TimeSpan(13, 30, 0), New TimeSpan(18, 30, 0))

            'Modify validation.
            worksheet.Range("C2:E4").Validation.Formula1 = New TimeSpan(14, 30, 0)
            worksheet.Range("C2:E4").Validation.Formula2 = New TimeSpan(19, 0, 0)

            'judge if Range("C2:E4") has validation.
            For i As Integer = 1 To 3
                For j As Integer = 2 To 4
                    If worksheet.Range(i, j).HasValidation Then
                        'set the range(i, j)'s interior color.
                        worksheet.Range(i, j).Interior.Color = Color.LightBlue
                    End If
                Next j
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.ChangeWorksheetFilterRange" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!D3.Value = "Numbers"
            worksheet.Range!D4.Value = 1
            worksheet.Range!D5.Value = 2
            worksheet.Range!D6.Value = 3

            'first time invoke. worksheet's filter range will be D3:D6.
            worksheet.Range("D3:D6").AutoFilter(0, "&lt;&gt;2")

            'set AutoFilterMode to False. must set this property before, otherwise, subsequent code can not take effort.
            worksheet.AutoFilterMode = False
            worksheet.Range!A5.Value = "Numbers"
            worksheet.Range!A6.Value = 1
            worksheet.Range!A7.Value = 2
            worksheet.Range!A8.Value = 3

            'second time invoke. worksheet's filter range will change to A5:A8.
            worksheet.Range("A5:A8").AutoFilter(0, "&lt;&gt;2")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.ClearFilter" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data

            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F7").AutoFilter(4, "&lt;80")
            worksheet.Range("A1:F7").AutoFilter(0, "*e*")
            worksheet.Range("A1:F7").AutoFilter(1, "=Washington")

            'clear second column filter only.
            worksheet.Range("A1:F7").AutoFilter(1)

            'clear all filters
            worksheet.AutoFilter.ShowAllData()

            'another way to clear all filters, same as AutoFilter.ShowAllData()
            worksheet.ShowAllData()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.MultiSelectFilter" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data

            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("E2:E7").NumberFormat = "0.00"

            'multi select, selcet the weight equals to 80.00 and 58.00.
            worksheet.Range("A1:F7").AutoFilter(4, {"62.00", "76.00"}, AutoFilterOperator.Values)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.ReApplyFilter" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'Weight less than 80.
            worksheet.Range("A1:F7").AutoFilter(4, "&lt;72")

            'change filter range data.
            worksheet.Range!E4.Value = 71

            're-apply filter condition, row 4 will be shown. 
            worksheet.AutoFilter.ApplyFilter()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.DateFiltering.DateDynamicFilter" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'filter all dates in February.
            worksheet.Range("A1:F7").AutoFilter(2, DynamicFilterType.M2, AutoFilterOperator.Dynamic)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.DateFiltering.DateFilter" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            Dim criteria1 = (#7/3/1972#).ToString()
            Dim criteria2 = (#2/15/1993#).ToString()

            'filter date between 1972.7.3 and 1993.2.15
            worksheet.Range("A1:F7").AutoFilter(2, "&gt;=" &amp; criteria1, AutoFilterOperator.And, "&lt;=" &amp; criteria2)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByColor.FilterByAutomaticFontColor" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            worksheet.Range!E2.Font.Color = Color.Green
            worksheet.Range!E5.Font.Color = Color.Green
            worksheet.Range!E6.Font.Color = Color.Red

            'filter in the rows which font color is automatic color.
            worksheet.Range("A1:F7").AutoFilter(4, Nothing, AutoFilterOperator.AutomaticFontColor)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByColor.FilterByCellColor" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            worksheet.Range!E2.Interior.Color = Color.Green
            worksheet.Range!E5.Interior.Color = Color.Green
            worksheet.Range!E6.Interior.Color = Color.Red

            'filter in the rows which cell color is green.
            worksheet.Range("A1:F7").AutoFilter(4, worksheet.Range!E2.Interior.Color, AutoFilterOperator.CellColor)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByColor.FilterByFontColor" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            worksheet.Range!E2.Font.Color = Color.Green
            worksheet.Range!E5.Font.Color = Color.Green
            worksheet.Range!E6.Font.Color = Color.Red

            'filter in the rows which font color is green.
            worksheet.Range("A1:F7").AutoFilter(4, worksheet.Range!E2.Font.Color, AutoFilterOperator.FontColor)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByColor.FilterByNoFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            worksheet.Range!E2.Interior.Color = Color.Green
            worksheet.Range!E5.Interior.Color = Color.Green
            worksheet.Range!E6.Interior.Color = Color.Red

            'filter in the rows which cell color is no fill.
            worksheet.Range("A1:F7").AutoFilter(4, Nothing, AutoFilterOperator.NoFill)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByIcon.FilterByIcon" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            Dim iconset As IIconSetCondition = worksheet.Range("E2:E7").FormatConditions.AddIconSetCondition()
            iconset.IconSet = workbook.IconSets(IconSetType.Icon3TrafficLights1)

            'filter in the rows which icon is green light.
            worksheet.Range("A1:F7").AutoFilter(4, workbook.IconSets(IconSetType.Icon3TrafficLights1)(2), AutoFilterOperator.Icon)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByIcon.FilterByNoIcon" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            Dim iconset As IIconSetCondition = worksheet.Range("E2:E7").FormatConditions.AddIconSetCondition()
            iconset.IconSet = workbook.IconSets(IconSetType.Icon3TrafficLights1)

            Dim condition As IFormatCondition = TryCast(worksheet.Range("E2:E7").FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Between, "71", "79"), IFormatCondition)
            condition.StopIfTrue = True

            'filter in the rows which has no icon.
            worksheet.Range("A1:F7").AutoFilter(4, Nothing, AutoFilterOperator.NoIcon)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.NumberFiltering.NumberFilter" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'Weight less than 80.
            worksheet.Range("A1:F7").AutoFilter(4, "&lt;72")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.TextFiltering.TextFilter" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'Name contains "e".
            worksheet.Range("A1:F7").AutoFilter(0, "*e*")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.ApplyStyle" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Change to build in name style.
            worksheet.Range!A1.Value = "Bad"
            worksheet.Range!A1.Style = workbook.Styles("Bad")

            'Change to custom name style.
            'Add custom name style.
            Dim style As IStyle = workbook.Styles.Add("testStyle")

            'Config custom name style settings begin.

            'Border
            style.Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thin
            style.Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thick
            style.Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Double
            style.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Double
            style.Borders.Color = Color.FromArgb(0, 255, 0)

            'Font
            style.Font.ThemeColor = ThemeColor.Accent1
            style.Font.TintAndShade = 0.8
            style.Font.Italic = True
            style.Font.Bold = True
            style.Font.Name = "LiSu"
            style.Font.Size = 28
            style.Font.Strikethrough = True
            style.Font.Subscript = True
            style.Font.Superscript = False
            style.Font.Underline = UnderlineType.Double

            'Protection
            style.FormulaHidden = True
            style.Locked = False

            'Number
            style.NumberFormat = "#,##0_);[Red](#,##0)"

            'Alignment
            style.HorizontalAlignment = HorizontalAlignment.Right
            style.VerticalAlignment = VerticalAlignment.Bottom
            style.WrapText = True
            style.IndentLevel = 5
            style.Orientation = 45

            'Fill
            style.Interior.ColorIndex = 5
            style.Interior.Pattern = Pattern.Down
            style.Interior.PatternColor = Color.FromArgb(0, 0, 255)
            style.IncludeAlignment = False
            style.IncludeBorder = True
            style.IncludeFont = False
            style.IncludeNumber = True
            style.IncludePatterns = False
            style.IncludeProtection = True

            'Config custom name style settings end.
            'Set range's style to custom name style.
            worksheet.Range!A2.Value = "my test style"
            worksheet.Range!A2.Style = worksheet.Workbook.Styles("testStyle")
            worksheet.Range!A2.RowHeightInPixel = 60
            worksheet.Range!A2.ColumnWidthInPixel = 150
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.CreateCustomStyle" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Add custom name style.
            Dim style As IStyle = workbook.Styles.Add("testStyle")

            'Config custom name style settings begin.

            'Border
            style.Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thin
            style.Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thick
            style.Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Double
            style.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Double
            style.Borders.Color = Color.FromArgb(0, 255, 0)

            'Font
            style.Font.ThemeColor = ThemeColor.Accent1
            style.Font.TintAndShade = 0.8
            style.Font.Italic = True
            style.Font.Bold = True
            style.Font.Name = "LiSu"
            style.Font.Size = 28
            style.Font.Strikethrough = True
            style.Font.Subscript = True
            style.Font.Superscript = False
            style.Font.Underline = UnderlineType.Double

            'Protection
            style.FormulaHidden = True
            style.Locked = False

            'Number
            style.NumberFormat = "#,##0_);[Red](#,##0)"

            'Alignment
            style.HorizontalAlignment = HorizontalAlignment.Right
            style.VerticalAlignment = VerticalAlignment.Bottom
            style.WrapText = True
            style.IndentLevel = 5
            style.Orientation = 45

            'Fill
            style.Interior.ColorIndex = 5
            style.Interior.Pattern = Pattern.Down
            style.Interior.PatternColor = Color.FromArgb(0, 0, 255)
            style.IncludeAlignment = False
            style.IncludeBorder = True
            style.IncludeFont = False
            style.IncludeNumber = True
            style.IncludePatterns = False
            style.IncludeProtection = True

            'Config custom name style settings end.
            'Set range's style to custom name style.
            worksheet.Range!A1.Value = "My test style"
            worksheet.Range!A1.Style = worksheet.Workbook.Styles("testStyle")
            worksheet.Range!A2.RowHeightInPixel = 60
            worksheet.Range!A2.ColumnWidthInPixel = 150
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.CreateStyleBaseOn" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1").Style = workbook.Styles("Good")
            worksheet.Range("A1").Value = "Good"

            'Create a new style based on current existing style
            Dim myGood As IStyle = workbook.Styles.Add("MyGood", workbook.Styles("Good"))
            myGood.Font.Bold = True
            myGood.Font.Italic = True
            worksheet.Range("B1").Style = workbook.Styles("MyGood")
            worksheet.Range("B1").Value = "MyGood"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.GetDisplayFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Range A1's displaying color is table style
            worksheet.Tables.Add(worksheet.Range("A1:E5"), True)
            Dim color_A1 = worksheet.Range!A1.DisplayFormat.Interior.Color

            'Range A1's displaying color will be cell style, yellow.
            worksheet.Range!A1.Interior.Color = Color.Yellow
            Dim color_A1_1 = worksheet.Range!A1.DisplayFormat.Interior.Color

            'Range A1's displaying color will be conditional format style, green.
            Dim condition As IFormatCondition = TryCast(worksheet.Range!A1.FormatConditions.Add(FormatConditionType.NoBlanksCondition), IFormatCondition)
            condition.Interior.Color = Color.Green
            Dim color_A1_2 = worksheet.Range!A1.DisplayFormat.Interior.Color
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.HAlignVAlign" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Columns(0).ColumnWidth = 17

            Dim rangeA1 As IRange = worksheet.Range!A1
            rangeA1.Value = "Right and top"
            rangeA1.HorizontalAlignment = HorizontalAlignment.Right
            rangeA1.VerticalAlignment = VerticalAlignment.Top

            Dim rangeA2 As IRange = worksheet.Range!A2
            rangeA2.Value = "Center"
            rangeA2.HorizontalAlignment = HorizontalAlignment.Center
            rangeA2.VerticalAlignment = VerticalAlignment.Center

            Dim rangeA3 As IRange = worksheet.Range!A3
            rangeA3.Value = "Left and bottom, indent"
            rangeA3.IndentLevel = 1
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.RotateCellContents" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim rangeB2 As IRange = worksheet.Range!B2
            rangeB2.Value = "Rotated Cell Contents"
            rangeB2.HorizontalAlignment = HorizontalAlignment.Center
            rangeB2.VerticalAlignment = VerticalAlignment.Center

            'Rotate cell contents.
            rangeB2.Orientation = 15
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.ShrinkToFit" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim rangeB1 As IRange = worksheet.Range!B1
            rangeB1.Value = "The ShrinkToFit property is applied"
            rangeB1.ShrinkToFit = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.TextOrientation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim rangeC1 As IRange = worksheet.Range!C1
            rangeC1.Value = "The ReadingOrder property is applied to set text direction."
            rangeC1.ReadingOrder = ReadingOrder.RightToLeft
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.WrapText" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim rangeB3 As IRange = worksheet.Range!B3
            rangeB3.Value = "The WrapText property is applied to wrap the text within a cell"
            rangeB3.WrapText = True
            worksheet.Rows(2).RowHeight = 150
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Borders.AddBordersToCell" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim rangeB2 As IRange = worksheet.Range!B2
            'set left, top, right, bottom borders together.

            rangeB2.Borders.LineStyle = BorderLineStyle.DashDot
            rangeB2.Borders.Color = Color.Green

            'set top border individually.
            rangeB2.Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Medium
            rangeB2.Borders(BordersIndex.EdgeTop).Color = Color.Red

            'set diagonal down border individually.
            rangeB2.Borders(BordersIndex.DiagonalDown).LineStyle = BorderLineStyle.Hair
            rangeB2.Borders(BordersIndex.DiagonalDown).Color = Color.Blue

            'set diagonal up border individually.
            rangeB2.Borders(BordersIndex.DiagonalUp).LineStyle = BorderLineStyle.Dotted
            rangeB2.Borders(BordersIndex.DiagonalUp).Color = Color.Blue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Borders.AddingBordersToRange" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            Dim rangeB2_E6 As IRange = worksheet.Range("B2:E6")

            'set left, top, right, bottom borders together.
            rangeB2_E6.Borders.LineStyle = BorderLineStyle.DashDot
            rangeB2_E6.Borders.Color = Color.Green

            'set inside horizontal border.
            rangeB2_E6.Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Dashed
            rangeB2_E6.Borders(BordersIndex.InsideHorizontal).Color = Color.Tomato

            'set inside vertical border.
            rangeB2_E6.Borders(BordersIndex.InsideVertical).LineStyle = BorderLineStyle.Double
            rangeB2_E6.Borders(BordersIndex.InsideVertical).Color = Color.Blue

            'set top border individually.
            rangeB2_E6.Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Medium
            rangeB2_E6.Borders(BordersIndex.EdgeTop).Color = Color.Red
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fill.LinearGradientFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range!A1.Interior.Pattern = Pattern.LinearGradient
            With TryCast(worksheet.Range!A1.Interior.Gradient, ILinearGradient)
                .ColorStops(0).Color = Color.Red
                .ColorStops(1).Color = Color.Yellow
                .Degree = 90
            End With
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fill.PatternFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            With worksheet.Range!A1.Interior
                .Pattern = Pattern.LightDown
                .Color = Color.Pink
                .PatternColorIndex = 5
            End With
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fill.RectangularGradientFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range!A1.Interior.Pattern = Pattern.RectangularGradient
            With TryCast(worksheet.Range!A1.Interior.Gradient, IRectangularGradient)
                .ColorStops(0).Color = Color.Red
                .ColorStops(1).Color = Color.Green
                .Bottom = 0.2
                .Right = 0.3
                .Top = 0.4
                .Left = 0.5
            End With
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fill.SolidFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!A2.Interior.Color = Color.Green
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontColor" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!A1.Value = "font"
            worksheet.Range!A1.Font.Color = Color.Green
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontEffect" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!A1.Value = "Strikethrough"
            worksheet.Range!A1.Font.Strikethrough = True
            worksheet.Range!A2.Value = "Superscript"
            worksheet.Range!A2.Font.Superscript = True
            worksheet.Range!A3.Value = "Subscript"
            worksheet.Range!A3.Font.Subscript = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontName" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'use Name property to set font name.
            worksheet.Range!A1.Value = "Calibri"
            worksheet.Range!A1.Font.Name = "Calibri"

            'use ThemeFont property to set font name.
            worksheet.Range!A2.Value = "Major theme font"
            worksheet.Range!A2.Font.ThemeFont = ThemeFont.Major
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontSize" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!A1.Value = "Font size is 15"
            worksheet.Range!A1.Font.Size = 15
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontStyle" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!A1.Value = "Bold"
            worksheet.Range!A1.Font.Bold = True
            worksheet.Range!A2.Value = "Italic"
            worksheet.Range!A2.Font.Italic = True
            worksheet.Range!A3.Value = "Bold Italic"
            worksheet.Range!A3.Font.Bold = True
            worksheet.Range!A3.Font.Italic = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontUnderline" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!A1.Value = "Single Underline"
            worksheet.Range!A1.Font.Underline = UnderlineType.Single
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.NumberFormat.CustomNumberFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set range values.
            worksheet.Range("A2:B2").Value = -15.5
            worksheet.Range("A3:B3").Value = 555
            worksheet.Range("A4:B4").Value = 0
            worksheet.Range("A5:B5").Value = "Name"

            'Apply custom number format.
            worksheet.Range("B2:B5").NumberFormat = "[Green]#.00;[Red]#.00;[Blue]0.00;[Cyan]""product: ""@"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.NumberFormat.DateAndTimeFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A:F").ColumnWidth = 17
            worksheet.Range("A1:F1").Formula = "= Now()"

            'Apply different date formats.
            worksheet.Range!A1.NumberFormat = "m/d/yy"
            worksheet.Range!B1.NumberFormat = "d-mmm-yy"
            worksheet.Range!C1.NumberFormat = "dddd"

            'Apply different time formats.
            worksheet.Range!D1.NumberFormat = "m/d/yy h:mm"
            worksheet.Range!E1.NumberFormat = "h:mm AM/PM"
            worksheet.Range!F1.NumberFormat = "h:mm:ss"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.NumberFormat.NumberFormats" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("A:H").ColumnWidth = 17

            ' Display 111 as 111.
            worksheet.Range!A1.Value = 111
            worksheet.Range!A1.NumberFormat = "#####"

            ' Display 222 as 00222.
            worksheet.Range!B1.Value = 222
            worksheet.Range!B1.NumberFormat = "00000"

            ' Display 12345678 as 12,345,678.
            worksheet.Range!C1.Value = 12345678
            worksheet.Range!C1.NumberFormat = "#,#"

            ' Display .126 as 0.13.
            worksheet.Range!D1.Value = 0.126
            worksheet.Range!D1.NumberFormat = "0.##"

            ' Display 74.4 as 74.400.
            worksheet.Range!E1.Value = 74.4
            worksheet.Range!E1.NumberFormat = "##.000"

            ' Display 1.6 as 160.0%.
            worksheet.Range!F1.Value = 1.6
            worksheet.Range!F1.NumberFormat = "0.0%"

            ' Display 4321 as $4,321.00.
            worksheet.Range!G1.Value = 4321
            worksheet.Range!G1.NumberFormat = "$#,##0.00"

            ' Display 8.75 as 8 3/4.
            worksheet.Range!H1.Value = 8.75
            worksheet.Range!H1.NumberFormat = "# ?/?"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Protection.SetRangeFormulaHidden" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range!B1.Formula = "=A1"

            'config range B1's FormulaHidden property.
            worksheet.Range!B1.FormulaHidden = True

            'protect worksheet, range B1's formula will not show in exported xlsx file.
            worksheet.Protection = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Protection.SetRangeLocked" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'config range B1's Locked property.
            worksheet.Range!B1.Locked = False

            'protect worksheet, range B1 can be modified in exported xlsx file.
            worksheet.Protection = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.AddCustomName" xml:space="preserve">
    <value>
            Dim worksheet1 As IWorksheet = workbook.Worksheets(0)

            Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()

            worksheet1.Range!C8.NumberFormat = "0.0000"
            worksheet1.Names.Add("test1", "=Sheet1!$A$1")
            worksheet1.Names.Add("test2", "=Sheet1!test1*2")

            workbook.Names.Add("test3", "=Sheet1!$A$1")
            worksheet1.Range!A1.Value = 1

            'C6's value is 1.
            worksheet1.Range!C6.Formula = "=test1"

            'C7's value is 3.
            worksheet1.Range!C7.Formula = "=test1 + test2"

            'C8's value is 6.283185307
            worksheet1.Range!C8.Formula = "=test2*PI()"

            'judge if Range C6:C8 have formula.
            For i As Integer = 5 To 7
                If worksheet1.Range(i, 2).HasFormula Then
                    worksheet1.Range(i, 2).Interior.Color = Color.LightBlue
                End If
            Next i

            'worksheet1 range A2's value is 1.
            worksheet2.Range!A2.Formula = "=test3"

            'judge if Range A2 has formula.
            If worksheet2.Range!A2.HasFormula Then
                worksheet2.Range!A2.Interior.Color = Color.LightBlue
            End If

            'set r1c1 formula.
            worksheet2.Range!A3.FormulaR1C1 = "=R[-1]C"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.ConfigWorkbookReferenceStyle" xml:space="preserve">
    <value>
            'set workbook's reference style to R1C1. exported xlsx file will be R1C1 style.
            workbook.ReferenceStyle = ReferenceStyle.R1C1
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.DirtyAndCalculation" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range!A1.Value = 1
            worksheet.Range!A2.Formula = "=A1"
            worksheet.Range!A3.Formula = "=SUM(A1, A2)"

            'when get value, calc engine will first calculate and cache the result, then returns the cached result.
            Dim value_A2 = worksheet.Range!A2.Value
            Dim value_A3 = worksheet.Range!A3.Value

            'disable calc engine.
            workbook.EnableCalculation = False

            'Dirty() method will clear the cached value of the workbook.
            workbook.Dirty()

            'Calculate() will not work, because of workbook.EnablCalculation is False.
            workbook.Calculate()

            'it returns 0 because of no cache value exist.
            Dim value_A2_1 = worksheet.Range!A2.Value
            Dim value_A3_1 = worksheet.Range!A3.Value
            worksheet.Range!A1.Value = 2

            'enable calc engine.
            workbook.EnableCalculation = True

            'Dirty() method will clear the cached value of Range A2:A3.
            worksheet.Range("A2:A3").Dirty()

            'Calculate() method will calculate and cache the result, it will return the cache value directly when get value later.
            worksheet.Range("A2:A3").Calculate()

            'it returns cache value directly, does not calculate again.
            Dim value_A2_2 = worksheet.Range!A2.Value
            Dim value_A3_2 = worksheet.Range!A3.Value
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.UseArrayFormula" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("E4:J5").Value = New Object(,)  {
                {1, 2, 3},
                {4, 5, 6}
            }
            worksheet.Range("I6:J8").Value = New Object(,)  {
                {2, 2},
                {3, 3},
                {4, 4}
            }

            'O     P      Q
            '2     4      #N/A
            '12    15     #N/A
            '#N/A  #N/A   #N/A
            worksheet.Range("O9:Q11").FormulaArray = "=E4:G5*I6:J8"

            'judge if Range O9 has array formula.
            If worksheet.Range!O9.HasArray Then
                'set O9's entire array's interior color.
                Dim currentarray = worksheet.Range!O9.CurrentArray
                currentarray.Interior.Color = Color.Green
            End If
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.UseTableFormula" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("A:E").ColumnWidth = 15
            worksheet.Range("A1:E3").Value = New Object(,)  {
                {"SalesPerson", "Region", "SalesAmount", "ComPct", "ComAmt"},
                {"Joe", "North", 260, 0.1, Nothing},
                {"Nia", "South", 660, 0.15, Nothing}
            }
            worksheet.Tables.Add(worksheet.Range("A1:E3"), True)
            worksheet.Tables(0).Name = "DeptSales"
            worksheet.Tables(0).Columns("ComPct").DataBodyRange.NumberFormat = "0%"

            'Use table formula in table range.
            worksheet.Tables(0).Columns("ComAmt").DataBodyRange.Formula = "=[@ComPct]*[@SalesAmount]"

            'Use table formula out of table range.
            worksheet.Range!F2.Formula = "=SUM(DeptSales[@SalesAmount])"
            worksheet.Range!G2.Formula = "=SUM(DeptSales[[#Data],[SalesAmount]])"
            worksheet.Range!H2.Formula = "=SUM(DeptSales[SalesAmount])"
            worksheet.Range!I2.Formula = "=SUM(DeptSales[@ComPct], DeptSales[@ComAmt])"

            'judge if Range F2:I2 have formula.
            For i As Integer = 5 To 8
                If worksheet.Range(1, i).HasFormula Then
                    worksheet.Range(1, i).Interior.Color = Color.LightBlue
                End If
            Next i
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.ClearOutline" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            '1:20 rows' outline level will be 2.
            worksheet.Range("1:20").Group()

            '1:10 rows' outline level will be 3.
            worksheet.Range("1:10").Group()

            '1:20 rows' outline level will be 1.
            worksheet.Range("1:20").ClearOutline()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.CollapseGroup" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            '1:20 rows' outline level will be 2.
            worksheet.Range("1:20").Group()

            '1:10 rows' outline level will be 3.
            worksheet.Range("1:10").Group()

            '1:10 rows will be collapsed.
            worksheet.Range("11:11").ShowDetail = False
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.CreateRangeGroup" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            '1:20 rows' outline level will be 2.
            worksheet.Range("1:20").Group()

            '1:10 rows' outline level will be 3.
            worksheet.Range("1:10").Group()

            'A:N columns' outline level will be 2.
            worksheet.Range("A:N").Group()

            'A:E columns' outline level will be 3.
            worksheet.Range("A:E").Group()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.ShowSpecificLevel" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("A:N").Group()
            worksheet.Range("A:F").Group()
            worksheet.Range("A:C").Group()
            worksheet.Range("Q:Z").Group()
            worksheet.Range("Q:T").Group()

            'level 3 and level 4 will be collapsed. level 2 and level 1 expand.
            worksheet.Outline.ShowLevels(columnLevels:=2)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.UngroupRange" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            '1:20 rows' outline level will be 2.
            worksheet.Range("1:20").Group()

            '1:10 rows' outline level will be 3.
            worksheet.Range("1:10").Group()

            '1:10 rows' outline level will be 2.
            worksheet.Range("1:10").Ungroup()

            '1:20 rows' outline level will be 1.
            worksheet.Range("1:20").Ungroup()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Hyperlinks.CreateHyperlinks" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("A:A").ColumnWidth = 30

            'add a hyperlink link to web page.
            worksheet.Range("A1:B2").Hyperlinks.Add(worksheet.Range!A1, "http://www.google.com/", Nothing, "open google web site.", "Google")

            'add a hyperlink link to a range in this document.
            worksheet.Range("A3:B4").Hyperlinks.Add(worksheet.Range!A3, Nothing, "Sheet1!$C$3:$E$4", "Go to sheet1 C3:E4")

            'add a hyperlink link to email address.
            worksheet.Range("A5:B6").Hyperlinks.Add(worksheet.Range!A5, "mailto:us.sales@grapecity.com", Nothing, "Send an email to sales", "Send an email to sales")

            'add a hyperlink link to external file.
            'change the path to real picture file path.
            Dim path As String = "external.xlsx"
            worksheet.Range("A7:B8").Hyperlinks.Add(worksheet.Range!A7, path, Nothing, "link to external.xlsx file.", "External.xlsx")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Hyperlinks.DeleteHyperlinks" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("A:A").ColumnWidth = 30

            'add a hyperlink link to web page.
            worksheet.Range("A1:B2").Hyperlinks.Add(worksheet.Range!A1, "http://www.google.com/", Nothing, "open google web site.", "Google")

            'add a hyperlink link to a range in this document.
            worksheet.Range("A3:B4").Hyperlinks.Add(worksheet.Range!A3, Nothing, "Sheet1!$C$3:$E$4", "Go to sheet1 C3:E4")

            'add a hyperlink link to email address.
            worksheet.Range("A5:B6").Hyperlinks.Add(worksheet.Range!A5, "mailto:us.sales@grapecity.com", Nothing, "Send an email to sales", "Send an email to sales")

            'add a hyperlink link to external file.
            'change the path to real picture file path.
            Dim path As String = "external.xlsx"
            worksheet.Range("A7:B8").Hyperlinks.Add(worksheet.Range!A7, path, Nothing, "link to external.xlsx file.", "External.xlsx")

            'delete hyperlinks in range A1:A2.
            worksheet.Range("A1:A2").Hyperlinks.Delete()

            'delete all hyperlinks in this worksheet.
            worksheet.Hyperlinks.Delete()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigEvenPageHeaderFooter" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set even page headerfooter
            worksheet.PageSetup.OddAndEvenPagesHeaderFooter = True
            worksheet.PageSetup.EvenPage.CenterHeader.Text = "&amp;T"
            worksheet.PageSetup.EvenPage.RightFooter.Text = "&amp;D"

            'Set even page headerfooter's graphic
            worksheet.PageSetup.EvenPage.LeftFooter.Text = "&amp;G"
            Dim stream As IO.Stream = GetResourceStream("logo.png")
            worksheet.PageSetup.EvenPage.LeftFooter.Picture.SetGraphicStream(stream, ImageType.PNG)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigFirstPageHeaderFooter" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set first page headerfooter
            worksheet.PageSetup.DifferentFirstPageHeaderFooter = True
            worksheet.PageSetup.FirstPage.CenterHeader.Text = "&amp;T"
            worksheet.PageSetup.FirstPage.RightFooter.Text = "&amp;D"

            'Set first page headerfooter's graphic
            worksheet.PageSetup.FirstPage.LeftFooter.Text = "&amp;G"

            Dim stream As IO.Stream = GetResourceStream("logo.png")
            worksheet.PageSetup.FirstPage.LeftFooter.Picture.SetGraphicStream(stream, ImageType.PNG)
            worksheet.PageSetup.FirstPage.LeftFooter.Picture.Width = 100
            worksheet.PageSetup.FirstPage.LeftFooter.Picture.Height = 13
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigFirstPageNumber" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.PageSetup.CenterFooter = "&amp;P"

            'Set first page number, default is p1.
            worksheet.PageSetup.FirstPageNumber = 3
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigHeaderFooter" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set page headerfooter
            worksheet.PageSetup.LeftHeader = "&amp;""Arial,Italic""LeftHeader"
            worksheet.PageSetup.CenterHeader = "&amp;P"

            'Set page headerfooter's graphic
            worksheet.PageSetup.CenterFooter = "&amp;G"
            Dim stream As IO.Stream = GetResourceStream("logo.png")
            worksheet.PageSetup.CenterFooterPicture.SetGraphicStream(stream, ImageType.PNG)
            'If you have picture resources locally, you can also set graphic in this way.
            'worksheet.PageSetup.CenterFooter = "&amp;G"
            'worksheet.PageSetup.CenterFooterPicture.Filename = "C:\picture.png"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPageCenter" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set center, default is False.
            worksheet.PageSetup.CenterHorizontally = True
            worksheet.PageSetup.CenterVertically = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPageMargins" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set margins, in points.
            worksheet.PageSetup.TopMargin = 36
            worksheet.PageSetup.BottomMargin = 36
            worksheet.PageSetup.RightMargin = 72
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPageOrder" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set page order, default is DownThenOver.
            worksheet.PageSetup.Order = Order.OverThenDown
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPageOrientation" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set page orientation, default is portrait.
            worksheet.PageSetup.Orientation = PageOrientation.Landscape
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPaperScaling" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set paper scaling
            'Method 1: Set percent scale 
            worksheet.PageSetup.IsPercentScale = True
            worksheet.PageSetup.Zoom = 150
            'Or Method 2: Fit to page's wide &amp; tall
            'worksheet.PageSetup.IsPercentScale = False
            'worksheet.PageSetup.FitToPagesWide = 3
            'worksheet.PageSetup.FitToPagesTall = 4
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPaperSize" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set A4 paper size
            worksheet.PageSetup.PaperSize = PaperSize.A4
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPrintArea" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Print Area.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set print area &amp; print titles
            worksheet.PageSetup.PrintArea = "$D$5:$G$10"
            worksheet.PageSetup.PrintTitleRows = "$5:$10"
            worksheet.PageSetup.PrintTitleColumns = "$D:$G"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPrintTitleColumns" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Print Title Columns.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set columns to repeat at left
            worksheet.PageSetup.PrintTitleColumns = "$D:$G"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPrintTitleRows" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Print Title Rows.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set rows to repeat at top
            worksheet.PageSetup.PrintTitleRows = "$5:$10"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigSheetPrintSettings" xml:space="preserve">
    <value>
            Dim fileStream = GetResourceStream("PageSetup Demo.xlsx")
            workbook.Open(fileStream)

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Set sheet
            worksheet.PageSetup.PrintGridlines = True
            worksheet.PageSetup.PrintHeadings = True
            worksheet.PageSetup.BlackAndWhite = True
            worksheet.PageSetup.PrintComments = PrintLocation.InPlace
            worksheet.PageSetup.PrintErrors = PrintErrors.Dash
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.ConvertExcelToPDF" xml:space="preserve">
    <value>
            'Open an excel file
            Dim fileStream = GetResourceStream("Employee absence schedule.xlsx")
            workbook.Open(fileStream)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveBorder" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'Single cell border
            sheet.Range!B2.Borders.ThemeColor = ThemeColor.Accent1
            sheet.Range!B2.Borders.LineStyle = BorderLineStyle.SlantDashDot
            sheet.Range!B2.Borders(BordersIndex.DiagonalUp).ThemeColor = ThemeColor.Accent1
            sheet.Range!B2.Borders(BordersIndex.DiagonalUp).LineStyle = BorderLineStyle.SlantDashDot
            sheet.Range!B2.Borders(BordersIndex.DiagonalDown).ThemeColor = ThemeColor.Accent1
            sheet.Range!B2.Borders(BordersIndex.DiagonalDown).LineStyle = BorderLineStyle.SlantDashDot

            'Range border
            sheet.Range("D2:E3").Borders.ThemeColor = ThemeColor.Accent1
            sheet.Range("D2:E3").Borders.LineStyle = BorderLineStyle.DashDot
            sheet.Range("D2:E3").Borders(BordersIndex.DiagonalDown).ThemeColor = ThemeColor.Accent1
            sheet.Range("D2:E3").Borders(BordersIndex.DiagonalDown).LineStyle = BorderLineStyle.DashDot

            'Merge cell border
            sheet.Range("B6:C7").Merge()
            sheet.Range("B6:C7").Borders.ThemeColor = ThemeColor.Accent1
            sheet.Range("B6:C7").Borders.LineStyle = BorderLineStyle.Double
            sheet.Range("B6:C7").Borders(BordersIndex.DiagonalUp).ThemeColor = ThemeColor.Accent1
            sheet.Range("B6:C7").Borders(BordersIndex.DiagonalUp).LineStyle = BorderLineStyle.Double

            'Border style on table
            Dim table As ITable = sheet.Tables.Add(sheet.Range("B12:G22"), True)

            'Create custom table style
            Dim customTableStyle As ITableStyle = workbook.TableStyles("TableStyleMedium10").Duplicate()

            'Set outline border for "whole table" style
            Dim wholeTableStyle = customTableStyle.TableStyleElements(TableStyleElementType.WholeTable)
            wholeTableStyle.Borders(BordersIndex.EdgeTop).ThemeColor = ThemeColor.Accent1
            wholeTableStyle.Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thick
            wholeTableStyle.Borders(BordersIndex.EdgeRight).ThemeColor = ThemeColor.Accent1
            wholeTableStyle.Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Thick
            wholeTableStyle.Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Accent1
            wholeTableStyle.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick
            wholeTableStyle.Borders(BordersIndex.EdgeLeft).ThemeColor = ThemeColor.Accent1
            wholeTableStyle.Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thick

            'Set vertical border for "first row strip" style
            Dim firstRowStripStyle = customTableStyle.TableStyleElements(TableStyleElementType.FirstRowStripe)
            firstRowStripStyle.Borders(BordersIndex.InsideVertical).ThemeColor = ThemeColor.Accent6
            firstRowStripStyle.Borders(BordersIndex.InsideVertical).LineStyle = BorderLineStyle.Dashed

            'Apply custom style to table
            table.TableStyle = customTableStyle
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveConditionalFormatting" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'Conditional formatting on merge cell
            sheet.Range("B2:C4").Merge()
            sheet.Range("B2:C4").Value = 123

            Dim cf = DirectCast(sheet.Range("B2:C4").FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Greater, 0), IFormatCondition)
            cf.Borders.ThemeColor = ThemeColor.Accent1
            cf.Borders.LineStyle = BorderLineStyle.Thin

            'Set cell values
            Dim data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
            sheet.Range("B10:B19").Value = data
            sheet.Range("C10:C19").Value = data
            sheet.Range("D10:D19").Value = data

            'Set conditional formattings

            'Color scale
            Dim cf1 As IColorScale = sheet.Range("B10:B19").FormatConditions.AddColorScale(ColorScaleType.ThreeColorScale)
            cf1.ColorScaleCriteria(0).Type = ConditionValueTypes.LowestValue
            cf1.ColorScaleCriteria(0).FormatColor.Color = Color.FromArgb(248, 105, 107)
            cf1.ColorScaleCriteria(1).Type = ConditionValueTypes.Percentile
            cf1.ColorScaleCriteria(1).Value = 50
            cf1.ColorScaleCriteria(1).FormatColor.Color = Color.FromArgb(255, 235, 132)
            cf1.ColorScaleCriteria(2).Type = ConditionValueTypes.HighestValue
            cf1.ColorScaleCriteria(2).FormatColor.Color = Color.FromArgb(99, 190, 123)

            'Data bar
            sheet.Range("C14").Value = -5
            sheet.Range("C17").Value = -8

            Dim cf2 As IDataBar = sheet.Range("C10:C19").FormatConditions.AddDatabar()
            cf2.MinPoint.Type = ConditionValueTypes.AutomaticMin
            cf2.MaxPoint.Type = ConditionValueTypes.AutomaticMax
            cf2.BarFillType = DataBarFillType.Gradient
            cf2.BarColor.Color = Color.FromArgb(0, 138, 239)
            cf2.BarBorder.Color.Color = Color.FromArgb(0, 138, 239)
            cf2.NegativeBarFormat.Color.Color = Color.FromArgb(255, 0, 0)
            cf2.NegativeBarFormat.BorderColorType = DataBarNegativeColorType.Color
            cf2.NegativeBarFormat.BorderColor.Color = Color.FromArgb(255, 0, 0)
            cf2.AxisColor.Color = Color.Black
            cf2.AxisPosition = DataBarAxisPosition.Automatic

            'Icon set
            Dim cf3 As IIconSetCondition = sheet.Range("D10:D19").FormatConditions.AddIconSetCondition()
            cf3.IconSet = workbook.IconSets(IconSetType.Icon3Symbols)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SavePictureToPDF" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.PageSetup.Orientation = PageOrientation.Landscape

            Dim stream As IO.Stream = GetResourceStream("logo.png")
            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 690, 100)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveRangeFillToPDF" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim rangeA1B2 As IRange = worksheet.Range("A1:B2")
            rangeA1B2.Merge()
            rangeA1B2.Interior.Pattern = Pattern.LinearGradient

            Dim gradientA1B2 As ILinearGradient = TryCast(rangeA1B2.Interior.Gradient, ILinearGradient)
            gradientA1B2.ColorStops(0).Color = Color.Red
            gradientA1B2.ColorStops(1).Color = Color.Yellow
            gradientA1B2.Degree = 90

            Dim rangeE1E2 As IRange = worksheet.Range("D1:E2")
            rangeE1E2.Merge()
            rangeE1E2.Interior.Pattern = Pattern.LightDown
            rangeE1E2.Interior.Color = Color.Pink
            rangeE1E2.Interior.PatternColorIndex = 5

            Dim rangeG1H2 As IRange = worksheet.Range("G1:H2")
            rangeG1H2.Merge()
            rangeG1H2.Interior.Pattern = Pattern.RectangularGradient

            Dim gradientG1H2 As IRectangularGradient = TryCast(rangeG1H2.Interior.Gradient, IRectangularGradient)
            gradientG1H2.ColorStops(0).Color = Color.Red
            gradientG1H2.ColorStops(1).Color = Color.Green
            gradientG1H2.Bottom = 0.2
            gradientG1H2.Right = 0.3
            gradientG1H2.Top = 0.4
            gradientG1H2.Left = 0.5
            worksheet.Range("J1:K2").Merge()
            worksheet.Range("J1:K2").Interior.Color = Color.Green
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveSparklinesToPDF" xml:space="preserve">
    <value>
            Dim data = {
                {"Customer", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days"},
                {"Customer A", 1200.15, 1916.18, 1105.23, 1806.53},
                {"Customer B", 896.23, 1005.53, 1800.56, 1150.49},
                {"Customer C", 827.63, 1009.23, 1869.23, 1002.56}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("B2:E5").Value = data
            worksheet.Range("B:F").ColumnWidth = 15
            worksheet.Range("B:E").HorizontalAlignment = HorizontalAlignment.Center

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("B2:F5"), True)
            table.TableStyle = workbook.TableStyles("TableStyleMedium3")
            table.Columns(4).Name = "Sparklines"

            'create a new group of sparklines.
            worksheet.Range!F3.SparklineGroups.Add(SparkType.Line, "C3:E3")
            worksheet.Range!F4.SparklineGroups.Add(SparkType.Column, "C4:E4")
            worksheet.Range!F5.SparklineGroups.Add(SparkType.ColumnStacked100, "C5:E5")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveTable" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'Add Table
            Dim table As ITable = sheet.Tables.Add(sheet.Range("B5:G16"), True)
            table.ShowTotals = True

            'Set values
            Dim data() As Integer = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}
            sheet.Range("C6:C16").Value = data
            sheet.Range("D6:D16").Value = data

            'Set total functions
            table.Columns(1).TotalsCalculation = TotalsCalculation.Average
            table.Columns(2).TotalsCalculation = TotalsCalculation.Sum

            'Create custom table style
            Dim customTableStyle As ITableStyle = workbook.TableStyles("TableStyleMedium10").Duplicate()

            Dim wholeTableStyle = customTableStyle.TableStyleElements(TableStyleElementType.WholeTable)
            wholeTableStyle.Font.Italic = True
            wholeTableStyle.Borders(BordersIndex.EdgeTop).ThemeColor = ThemeColor.Accent1
            wholeTableStyle.Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thick
            wholeTableStyle.Borders(BordersIndex.EdgeRight).ThemeColor = ThemeColor.Accent1
            wholeTableStyle.Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Thick
            wholeTableStyle.Borders(BordersIndex.EdgeBottom).ThemeColor = ThemeColor.Accent1
            wholeTableStyle.Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Thick
            wholeTableStyle.Borders(BordersIndex.EdgeLeft).ThemeColor = ThemeColor.Accent1
            wholeTableStyle.Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thick

            Dim firstRowStripStyle = customTableStyle.TableStyleElements(TableStyleElementType.FirstRowStripe)
            firstRowStripStyle.Font.Bold = True

            'Apply custom style to table
            table.TableStyle = customTableStyle
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveWorkbookToPDF" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'set style.
            sheet.Range!A1.Value = "Sheet1"
            sheet.Range!A1.Font.Name = "Wide Latin"
            sheet.Range!A1.Font.Color = Color.Red
            sheet.Range!A1.Interior.Color = Color.Green

            'change the path to real export path when save.
            workbook.Save(CurrentDirectory &amp; "dest.pdf", SaveFileFormat.Pdf)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveWorksheetToPDF" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'set style.
            sheet.Range!A1.Value = "Sheet1"
            sheet.Range!A1.Font.Name = "Wide Latin"
            sheet.Range!A1.Font.Color = Color.Red
            sheet.Range!A1.Interior.Color = Color.Green

            'change the path to real export path when save.
            sheet.Save(CurrentDirectory &amp; "dest.pdf", SaveFileFormat.Pdf)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SetFontsFolderPath" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'set style.
            sheet.Range!A1.Value = "Sheet1"
            sheet.Range!A1.Font.Name = "Wide Latin"
            sheet.Range!A1.Font.Color = Color.Red
            sheet.Range!A1.Interior.Color = Color.Green

            'specify font path.
            GrapeCity.Documents.Excel.Workbook.FontsFolderPath = "D:\Fonts"

            'get the used fonts list in workbook, the list are:"Wide Latin", "Calibri"
            Dim fonts = workbook.GetUsedFonts()

            'change the path to real export path when save.
            sheet.Save(CurrentDirectory &amp; "dest.pdf", SaveFileFormat.Pdf)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigureBlackAndWhite" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)
            Dim stream As IO.Stream = GetResourceStream("logo.png")
            Dim picture As IShape = sheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)

            'Set text font color.
            sheet.Range("A1:D4").Value = "Font"
            sheet.Range("A1:D4").Font.Color = Color.Red

            'Set cell color
            sheet.Range("A7:D10").Value = "Green"
            sheet.Range("A7:D10").Interior.Color = Color.Green

            'Set print black and white.
            sheet.PageSetup.BlackAndWhite = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigureDraft" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'Set text.
            sheet.Range("A1:G10").Value = "Text"

            'Add picture in sheet.
            Dim stream As IO.Stream = GetResourceStream("logo.png")
            Dim picture As IShape = sheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)

            'Add header graphic.
            Dim stream1 As IO.Stream = GetResourceStream("logo.png")
            sheet.PageSetup.CenterHeader = "&amp;G"
            sheet.PageSetup.CenterHeaderPicture.SetGraphicStream(stream1, ImageType.PNG)
            sheet.PageSetup.CenterHeaderPicture.Width = 100
            sheet.PageSetup.CenterHeaderPicture.Height = 13
            'Set print without graphics in page content area.
            sheet.PageSetup.Draft = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigureHeaderFooter" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'Set data.
            sheet.Range("A1:G10").Value = "Text"

            'Set page header.
            sheet.PageSetup.LeftHeader = "&amp;""Arial,Italic""LeftHeader"
            sheet.PageSetup.RightHeader = "&amp;KFF0000GrapeCity"
            sheet.PageSetup.CenterHeader = "&amp;P"

            'Set page footer picture.
            Dim stream As IO.Stream = GetResourceStream("logo.png")
            sheet.PageSetup.CenterFooter = "&amp;G"
            sheet.PageSetup.CenterFooterPicture.SetGraphicStream(stream, ImageType.PNG)
            sheet.PageSetup.CenterFooterPicture.Width = 100
            sheet.PageSetup.CenterFooterPicture.Height = 13
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigureOritation" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)
            sheet.Range("A1:G10").Value = "Text"

            'Set page orientation.
            sheet.PageSetup.Orientation = PageOrientation.Landscape
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigurePageBreaks" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            sheet.Range("A1:B5").Value = New Object(,)  {
                {1, 2},
                {3, 4},
                {5, 6},
                {7, 8},
                {9, 10}
            }

            'Add page break
            sheet.HPageBreaks.Add(sheet.Range!B3)
            sheet.VPageBreaks.Add(sheet.Range!B3)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigurePageOrder" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'Set pages' data.
            sheet.Range("A1:J46").Value = "Page1"
            sheet.Range("A1:J46").Interior.Color = Color.LightGreen

            sheet.Range("A47:J92").Value = "Page2"
            sheet.Range("A47:J92").Interior.Color = Color.LightYellow

            sheet.Range("K1:T46").Value = "Page3"
            sheet.Range("K1:T46").Interior.Color = Color.OrangeRed

            sheet.Range("K47:T92").Value = "Page4"
            sheet.Range("K47:T92").Interior.Color = Color.DarkOrange

            sheet.PageSetup.PrintHeadings = True

            'Set page order. Now the page order is p1-p3-p2-p4. Origin is p1-p2-p3-p4.
            sheet.PageSetup.Order = Order.OverThenDown
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigurePageSetup" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'Set data.
            sheet.Range("A1:G10").Value = "Text"

            'Print rowheader and columnheader.
            sheet.PageSetup.PrintHeadings = True

            'Print gridlines.
            sheet.PageSetup.PrintGridlines = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigurePagination" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            Dim row As Integer = 50
            Dim column As Integer = 14
            Dim data(row - 1, column - 1) As Object
            For i As Integer = 0 To row - 1
                For j As Integer = 0 To column - 1
                    data(i, j) = "R" &amp; i &amp; "C" &amp; j
                Next j
            Next i

            'Set data
            sheet.Range("A1:N50").Value = data

            'Set paper size
            sheet.PageSetup.PaperSize = PaperSize.A5

            'With API the margin's unit is pound, with Excel the margins display unit is inch.
            'One inch eaquals to 72 pounds. If the top margin is 0.8 inch, then please set PageSetup.TopMargin = 0.8*72(57.6)
            sheet.PageSetup.TopMargin = 57.6

            'Top margin in excel is 0.8 inch
            sheet.PageSetup.BottomMargin = 21.6
            sheet.PageSetup.LeftMargin = 28.8
            sheet.PageSetup.RightMargin = 0
            sheet.PageSetup.HeaderMargin = 0
            sheet.PageSetup.FooterMargin = 93.6
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigurePrintArea" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            Dim row As Integer = 50
            Dim column As Integer = 14
            Dim data(row - 1, column - 1) As Object
            For i As Integer = 0 To row - 1
                For j As Integer = 0 To column - 1
                    data(i, j) = "R" &amp; i &amp; "C" &amp; j
                Next j
            Next i

            'Set data.
            sheet.Range("A1:N50").Value = data
            sheet.Range("C10:H20").Value = "PrintArea"
            sheet.Range("C10:H20").Interior.Color = Color.Yellow
            sheet.PageSetup.PrintHeadings = True

            'Set print area.
            sheet.PageSetup.PrintArea = "$C$10:$H$20"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigurePrintPageRange" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            'Set pages' data.
            sheet.Range("A1:J46").Value = "Page1"
            sheet.Range("A1:J46").Interior.Color = Color.LightGreen

            sheet.Range("A47:J92").Value = "Page2"
            sheet.Range("A47:J92").Interior.Color = Color.LightYellow

            sheet.Range("K1:T46").Value = "Page3"
            sheet.Range("K1:T46").Interior.Color = Color.OrangeRed

            sheet.Range("K47:T92").Value = "Page4"
            sheet.Range("K47:T92").Interior.Color = Color.DarkOrange

            sheet.Range("U1:AD46").Value = "Page5"
            sheet.Range("U1:AD46").Interior.Color = Color.LightBlue

            sheet.Range("U47:AD92").Value = "Page6"
            sheet.Range("U47:AD92").Interior.Color = Color.IndianRed

            sheet.PageSetup.PrintHeadings = True

            'Set print page range, print p1, p3 to p5.
            sheet.PageSetup.PrintPageRange = "1,3-5"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigurePrintTitles" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            Dim row As Integer = 50
            Dim column As Integer = 14
            Dim data(row - 1, column - 1) As Object
            For i As Integer = 0 To row - 1
                For j As Integer = 0 To column - 1
                    data(i, j) = "R" &amp; i &amp; "C" &amp; j
                Next j
            Next i

            'Set data.
            sheet.Range("A1:N50").Value = data
            sheet.Range("A2:N4").Value = "TitleRows"
            sheet.Range("A2:N4").Interior.Color = Color.Green
            sheet.Range("C1:E50").Value = "TitleColumns"
            sheet.Range("C1:E50").Interior.Color = Color.Yellow
            sheet.PageSetup.PrintHeadings = True

            'Set print titles.
            sheet.PageSetup.PrintTitleRows = "$2:$4"
            sheet.PageSetup.PrintTitleColumns = "$C:$E"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.ConfigureScaling" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)
            Dim stream As IO.Stream = GetResourceStream("logo.png")

            Dim picture As IShape = sheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)

            sheet.Range("B2:D4").Value = "Text"
            sheet.PageSetup.PrintGridlines = True

            'Set scaling.
            sheet.PageSetup.Zoom = 200
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.Text.ExportCellRichText" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim a1 As IRange = worksheet.Range("A1")
            a1.Value = "Perfect square trinomial"

            a1.Font.Size = 26
            a1.Font.Bold = True

            a1.VerticalAlignment = VerticalAlignment.Bottom
            a1.EntireRow.RowHeight = 42
            a1.EntireColumn.ColumnWidth = 50

            Dim run1 As ITextRun = a1.Characters(8, 7)
            run1.Font.Italic = True
            run1.Font.ThemeColor = ThemeColor.Accent1

            Dim b1 As IRange = worksheet.Range("B1")
            b1.Font.Size = 22
            b1.EntireColumn.ColumnWidth = 40
            b1.Value = "(a+b)2 = a2+2ab+b2"
            b1.VerticalAlignment = VerticalAlignment.Center

            Dim superRun1 As ITextRun = b1.Characters(5, 1)
            superRun1.Font.Superscript = True
            superRun1.Font.Color = System.Drawing.Color.Red

            Dim superRun2 As ITextRun = b1.Characters(10, 1)
            superRun2.Font.Superscript = True
            superRun2.Font.Color = System.Drawing.Color.Green

            Dim superRun3 As ITextRun = b1.Characters(17, 1)
            superRun3.Font.Superscript = True
            superRun3.Font.Color = System.Drawing.Color.Blue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.Text.NumberFormating" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            sheet.Range("B3:B7").Value = 123456.789
            sheet.Range("B9:B13").Value = -123456.789

            sheet.Range("B4, B10").NumberFormat = "0.00;[Red]0.00"
            sheet.Range("B5, B11").NumberFormat = "$#,##0.00;[Red]$#,##0.00"
            sheet.Range("B6, B12").NumberFormat = "0.00E+00"
            sheet.Range("B7, B13").NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* "" - ""??_);_(@_)"

            'Other settings
            sheet.Columns(1).ColumnWidthInPixel = 100
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.Text.Overflow" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

            sheet.Range("F2, F4").Value = "This is a test string of overflow"
            sheet.Range("F6, F8").Value = "This is a test string of overflow with right alignment"
            sheet.Range("F6, F8").HorizontalAlignment = HorizontalAlignment.Right
            sheet.Range("D8, H4").Value = 123

            'Other settings
            sheet.Range("A1:J10").Borders.LineStyle = BorderLineStyle.Thin
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.Text.TextStyle" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)

#Region "Aligment"
            sheet.Range!A1.Value = "Alignment"
            sheet.Range!B2.Value = "Left Alignment"
            sheet.Range!B2.HorizontalAlignment = HorizontalAlignment.Left

            sheet.Range!C2.Value = "Center Alignment"
            sheet.Range!C2.HorizontalAlignment = HorizontalAlignment.Center

            sheet.Range!D2.Value = "Right Alignment"
            sheet.Range!D2.HorizontalAlignment = HorizontalAlignment.Right

            sheet.Range!B3.Value = "Top Alignment"
            sheet.Range!B3.VerticalAlignment = VerticalAlignment.Top

            sheet.Range!C3.Value = "Middle Alignment"
            sheet.Range!C3.VerticalAlignment = VerticalAlignment.Center

            sheet.Range!D3.Value = "Bottom Alignment"
            sheet.Range!D3.VerticalAlignment = VerticalAlignment.Bottom

            sheet.Range!B4.Value = "This is  a test string for Justify Alignment. " &amp; vbLf &amp; "This is a test string for Justify Alignment. "
            sheet.Range!B4.HorizontalAlignment = HorizontalAlignment.Justify
            sheet.Range!B4.VerticalAlignment = VerticalAlignment.Justify

            sheet.Range!C4.Value = "This is  a test string for Distributed Alignment. " &amp; vbLf &amp; "This is a test string for Distributed Alignment. "
            sheet.Range!C4.HorizontalAlignment = HorizontalAlignment.Distributed
            sheet.Range!C4.VerticalAlignment = VerticalAlignment.Distributed
#End Region

            'Wordwrap
            sheet.Range!A6.Value = "Wordwrap"
            sheet.Range!B7.Value = "This is a test string for Wordwrap"
            sheet.Range!C7.Value = "This is a test string " &amp; vbLf &amp; " for Wordwrap"
            sheet.Range("B7:C7").WrapText = True

            'Indent
            sheet.Range!A9.Value = "Indent"
            sheet.Range("B10").Value = "Left Indent"
            sheet.Range("B10").IndentLevel = 3
            sheet.Range("C10").Value = "Right Indent"
            sheet.Range("C10").IndentLevel = 3
            sheet.Range("C10").HorizontalAlignment = HorizontalAlignment.Right

            'Shrink to fit
            sheet.Range("A12").Value = "Shrink to fit"
            sheet.Range("B13").Value = "This is a test string for ""Shrink to fit"""
            sheet.Range("B13").ShrinkToFit = True

            'Underline
            sheet.Range("A15").Value = "Underline"
            sheet.Range("B16").Value = "Single Underline"
            sheet.Range("B16").Font.Underline = UnderlineType.Single

            'Strikthrough
            sheet.Range("A18").Value = "Strikthrough"
            sheet.Range("B19").Value = "Strikthrough"
            sheet.Range("B19").Font.Strikethrough = True

            'Other settings
            sheet.Columns(0).Font.Bold = True
            sheet.Columns(0).ColumnWidthInPixel = 100
            sheet.Columns(1).ColumnWidthInPixel = 200
            sheet.Columns(2).ColumnWidthInPixel = 245
            sheet.Columns(3).ColumnWidthInPixel = 234
            sheet.Rows(2).RowHeightInPixel = 72
            sheet.Rows(3).RowHeightInPixel = 123
            sheet.Rows(6).RowHeightInPixel = 48

            sheet.Range("A1:D19").Borders.LineStyle = BorderLineStyle.Thin
            sheet.PageSetup.PaperSize = PaperSize.A3
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.Text.VerticalText" xml:space="preserve">
    <value>
            Dim sheet As IWorksheet = workbook.Worksheets(0)
            sheet.Range!A1.Font.Name = "@Meiryo"
            sheet.Range!A1.Value = "日本語（にほんご、にっぽんご）は、主として、日本列島で使用されてきた言語である。GrapeCity"
            sheet.Range!A1.HorizontalAlignment = HorizontalAlignment.Right
            sheet.Range!A1.VerticalAlignment = VerticalAlignment.Top
            sheet.Range!A1.Orientation = -90
            sheet.Range!A1.WrapText = True

            sheet.Range!A1.ColumnWidth = 27
            sheet.Range!A1.RowHeight = 190
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Picture.CreatePicture" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            Dim stream As IO.Stream = GetResourceStream("logo.png")
            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 790, 120)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Picture.DeletePicture" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim stream As IO.Stream = GetResourceStream("logo.png")
            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 100, 100)

            'set picture size.
            picture.WidthInPixel = 700
            picture.HeightInPixel = 120

            'config picture layout.
            picture.Fill.Solid()
            picture.Fill.Color.ObjectThemeColor = ThemeColor.Accent1

            'delete picture.
            picture.Delete()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Picture.PictureCopy" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim stream As IO.Stream = GetResourceStream("logo.png")

            'Create a shape in worksheet, picture's range is Range("A2:I6")
            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)

            'Range("A2:I6") must contain picture's range, copy a new picture to Range("J2:R6")
            worksheet.Range("A2:I6").Copy(worksheet.Range!J2)
            'worksheet.Range("A2:I6").Copy(worksheet.Range("J2:R6"))
            'Cross sheet copy, copy a new shape to worksheet2's Range("J2:R6")
            'Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            'worksheet.Range("A2:I6").Copy(worksheet2.Range!J2)
            'worksheet.Range("A2:I6").Copy(worksheet2.Range("J2:R6"))
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Picture.PictureCut" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim stream As IO.Stream = GetResourceStream("logo.png")

            'Create a shape in worksheet, picture's range is Range("A2:I6")
            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)

            'Range("A2:I6") must contain picture's range, cut a new picture to Range("J2:R6")
            worksheet.Range("A2:I6").Cut(worksheet.Range!J2)
            'worksheet.Range("A2:I6").Cut(worksheet.Range("J2:R6"))
            'Cross sheet cut, cut a new shape to worksheet2's Range("J2:R6")
            'Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            'worksheet.Range("A2:I6").Cut(worksheet2.Range!J2)
            'worksheet.Range("A2:I6").Cut(worksheet2.Range("J2:R6"))
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Picture.PictureDuplicate" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            Dim stream As IO.Stream = GetResourceStream("logo.png")

            'Create a shape in worksheet
            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)

            'Duplicate picture
            Dim newPicture As IShape = picture.Duplicate()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.ChangeDataFieldSummarizeFunction" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F16").Value = sourceData
            worksheet.Range("A:F").ColumnWidth = 15

            Dim pivotcache = workbook.PivotCaches.Create(worksheet.Range("A1:F16"))
            Dim pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range!H7, "pivottable1")
            worksheet.Range("D2:D16").NumberFormat = "$#,##0.00"
            worksheet.Range("I9:O11").NumberFormat = "$#,##0.00"
            worksheet.Range("H:O").ColumnWidth = 12

            'config pivot table's fields
            Dim field_Category = pivottable.PivotFields("Category")
            field_Category.Orientation = PivotFieldOrientation.RowField
            Dim field_Product = pivottable.PivotFields("Product")
            field_Product.Orientation = PivotFieldOrientation.ColumnField
            Dim field_Amount = pivottable.PivotFields("Amount")
            field_Amount.Orientation = PivotFieldOrientation.DataField
            Dim field_Country = pivottable.PivotFields("Country")
            field_Country.Orientation = PivotFieldOrientation.PageField

            'Change data field's summarize function.
            field_Amount.Function = ConsolidationFunction.Average
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.CreatePivotTable" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F16").Value = sourceData
            worksheet.Range("A:F").ColumnWidth = 15

            Dim pivotcache = workbook.PivotCaches.Create(worksheet.Range("A1:F16"))
            Dim pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range!H7, "pivottable1")
            worksheet.Range("D2:D16").NumberFormat = "$#,##0.00"
            worksheet.Range("I9:O11").NumberFormat = "$#,##0.00"
            worksheet.Range("H:O").ColumnWidth = 12

            'config pivot table's fields
            Dim field_Category = pivottable.PivotFields("Category")
            field_Category.Orientation = PivotFieldOrientation.RowField
            Dim field_Product = pivottable.PivotFields("Product")
            field_Product.Orientation = PivotFieldOrientation.ColumnField
            Dim field_Amount = pivottable.PivotFields("Amount")
            field_Amount.Orientation = PivotFieldOrientation.DataField
            Dim field_Country = pivottable.PivotFields("Country")
            field_Country.Orientation = PivotFieldOrientation.PageField
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.FilterItemsInPivotTable" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F16").Value = sourceData

            Dim pivotcache = workbook.PivotCaches.Create(worksheet.Range("A1:F16"))
            Dim pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range!I7, "pivottable1")
            worksheet.Range("D2:D16").NumberFormat = "$#,##0.00"
            worksheet.Range("J8:J11").NumberFormat = "$#,##0.00"

            Dim field_product = pivottable.PivotFields(1)
            field_product.Orientation = PivotFieldOrientation.RowField

            Dim field_Amount = pivottable.PivotFields(3)
            field_Amount.Orientation = PivotFieldOrientation.DataField

            Dim field_Country = pivottable.PivotFields(5)
            field_Country.Orientation = PivotFieldOrientation.PageField

            'row field filter.
            field_product.PivotItems("Apple").Visible = False
            field_product.PivotItems("Beans").Visible = False
            field_product.PivotItems("Orange").Visible = False

            'page filter.
            field_Country.PivotItems("United States").Visible = False
            field_Country.PivotItems("Canada").Visible = False
            worksheet.Range("E:E").ColumnWidth = 12
            worksheet.Range("I:I").ColumnWidth = 12
            worksheet.Range("J:J").ColumnWidth = 16
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.ModifySubtotalsForPivotField" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("A1:F16").Value = sourceData
            Dim pivotcache = workbook.PivotCaches.Create(worksheet.Range("A1:F16"))
            Dim pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range!I2, "pivottable1")
            worksheet.Range("D2:D16").NumberFormat = "$#,##0.00"
            worksheet.Range("J4:J17, J9:J33").NumberFormat = "$#,##0.00"

            Dim field_Category = pivottable.PivotFields(2)
            field_Category.Orientation = PivotFieldOrientation.RowField

            Dim field_Product = pivottable.PivotFields(1)
            field_Product.Orientation = PivotFieldOrientation.RowField

            Dim field_Amount = pivottable.PivotFields(3)
            field_Amount.Orientation = PivotFieldOrientation.DataField

            'modify subtotals for pivot field.
            field_Category.Subtotals = SubtotalType.Sum Or SubtotalType.Count Or SubtotalType.Average Or SubtotalType.Max Or SubtotalType.Min Or SubtotalType.CountNums Or SubtotalType.StdDev Or SubtotalType.StdDevP Or SubtotalType.Var Or SubtotalType.VarP
            worksheet.Range("E:E").ColumnWidth = 12
            worksheet.Range("I:J").ColumnWidth = 20
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.RefreshPivotTable" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F16").Value = sourceData

            Dim pivotcache = workbook.PivotCaches.Create(worksheet.Range("A1:F16"))
            Dim pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range!I5, "pivottable1")
            worksheet.Range("D2:D16").NumberFormat = "$#,##0.00"
            worksheet.Range("J6:J12").NumberFormat = "$#,##0.00"

            Dim field_product = pivottable.PivotFields("Product")
            field_product.Orientation = PivotFieldOrientation.RowField

            Dim field_Amount = pivottable.PivotFields(3)
            field_Amount.Orientation = PivotFieldOrientation.DataField

            'change pivot cache's source data.
            worksheet.Range!D8.Value = 3000

            'sync cache's data to pivot table.
            worksheet.PivotTables(0).Refresh()
            worksheet.Range("E:E").ColumnWidth = 12
            worksheet.Range("I:I").ColumnWidth = 12
            worksheet.Range("J:J").ColumnWidth = 16
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.AccessCellsRowsColumns" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim range = worksheet.Range("A5:B7")

            'set value for cell A7.
            range.Cells(4).Value = "A7"

            'cell is B6
            range.Cells(1, 1).Value = "B6"

            'row count is 3 and range is A6:B6.
            Dim rowCount = range.Rows.Count
            Dim row = range.Rows(1).ToString()

            'set interior color for row range A6:B6.
            range.Rows(1).Interior.Color = Color.LightBlue

            'column count is 2 and range is B5:B7.
            Dim columnCount = range.Columns.Count
            Dim column = range.Columns(1).ToString()

            'set values for column range B5:B7.
            range.Columns(1).Interior.Color = Color.LightSkyBlue

            'entire rows are from row 5 to row 7
            Dim entirerow = range.EntireRow.ToString()

            'entire columns are from column A to column B
            Dim entireColumn = range.EntireColumn.ToString()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.AccessEachAreaOfRange" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim range = worksheet.Range("A5:B7, C3, H5:N6")

            'set interior color for area1 A5:B7.
            Dim area1 = worksheet.Range("A5:B7, C3, H5:N6").Areas(0)

            area1.Interior.Color = Color.Pink

            'set interior color for area2 C3.
            Dim area2 = worksheet.Range("A5:B7, C3, H5:N6").Areas(1)
            area2.Interior.Color = Color.LightGreen

            'set interior color for area3 H5:N6.
            Dim area3 = worksheet.Range("A5:B7, C3, H5:N6").Areas(2)
            area3.Interior.Color = Color.LightBlue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.AccessRange" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'use index to access cell A1.
            worksheet.Range(0, 0).Interior.Color = Color.LightGreen

            'use index to access range A1:B2
            worksheet.Range(0, 0, 2, 2).Value = 5

            'use string to access range.
            worksheet.Range!A2.Interior.Color = Color.LightYellow
            worksheet.Range("C3:D4").Interior.Color = Color.Tomato
            worksheet.Range("A5:B7, C3, H5:N6").Value = 2

            'use index to access rows
            worksheet.Rows(2).Interior.Color = Color.LightSalmon

            'use string to access rows
            worksheet.Range("4:4").Interior.Color = Color.LightSkyBlue

            'use index to access columns
            worksheet.Columns(2).Interior.Color = Color.LightSalmon

            'use string to access columns
            worksheet.Range("D:D").Interior.Color = Color.LightSkyBlue

            'use Cells to access range.
            worksheet.Cells(5).Interior.Color = Color.LightBlue
            worksheet.Cells(5, 5).Interior.Color = Color.LightYellow

            'access all rows in worksheet
            Dim allRows = worksheet.Rows.ToString()

            'access all columns in worksheet
            Dim allColumns = worksheet.Columns.ToString()

            'access the entire sheet range
            Dim entireSheet = worksheet.Cells.ToString()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.CellInfo" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            ' cell's value B2
            Dim cell As String = GrapeCity.Documents.Excel.CellInfo.CellIndexToName(1, 1)
            worksheet.Range(cell).Interior.Color = Color.LightBlue
            Dim rowIndex, columnIndex As Integer

            ' rowIndex is 3 and columnIndex is 2
            GrapeCity.Documents.Excel.CellInfo.CellNameToIndex("C4", rowIndex, columnIndex)
            worksheet.Range(rowIndex, columnIndex).Interior.Color = Color.LightCoral

            ' column is D
            Dim column As String = GrapeCity.Documents.Excel.CellInfo.ColumnIndexToName(3)
            worksheet.Range(String.Format("{0}:{0}", column)).Interior.Color = Color.LightGreen

            ' columnIndex is 4
            columnIndex = GrapeCity.Documents.Excel.CellInfo.ColumnNameToIndex("E")
            worksheet.Columns(columnIndex).Interior.Color = Color.LightSalmon

            ' row is 3
            Dim row As String = GrapeCity.Documents.Excel.CellInfo.RowIndexToName(2)
            worksheet.Range(String.Format("{0}:{0}", row)).Interior.Color = Color.LightSteelBlue

            ' rowIndex is 4
            rowIndex = GrapeCity.Documents.Excel.CellInfo.RowNameToIndex("5")
            worksheet.Rows(rowIndex).Interior.Color = Color.LightSkyBlue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.CutCopyRange" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            worksheet.Range("B3:D12").Value = 5
            worksheet.Range("B3:D12").Interior.Color = Color.LightGreen

            'Copy
            worksheet.Range("B3:D12").Copy(worksheet.Range!E5)

            'Cut
            worksheet.Range("B3:D12").Cut(worksheet.Range("I5:K14"))
            worksheet.Range("I1:K2").Value = 2
            worksheet.Range("I1:K2").Interior.Color = Color.Pink

            'cross sheet cut copy.
            worksheet.Range("I1:K2").Cut(worksheet2.Range!H5)
            worksheet.Range("G4:H5").Copy(worksheet2.Range!A1)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.GetFeatureRelatedUsedRange" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("A1:B2").Value = New Object(,)  {
                {1, 2},
                {"aaa", "bbb"}
            }
            worksheet.Range("A2:C3").Interior.Color = Color.Green

            'style used range is A2:C3.
            Dim UsedRange_style = worksheet.GetUsedRange(UsedRangeType.Style)
            UsedRange_style.Interior.Color = Color.LightBlue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.GetRangeRowCountColumnCount" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim range = worksheet.Range("A5:B7")

            'cell count is 6.
            Dim cellcount = range.Count

            'cell count is 6.
            Dim cellcount1 = range.Cells.Count

            'row count is 3.
            Dim rowcount = range.Rows.Count

            'column count is 2.
            Dim columncount = range.Columns.Count
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.GetWorksheetUsedRange" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("H6:M7").Value = 1
            worksheet.Range("J9:J10").Merge()

            'set interior color for worksheet usedRange "H6:M10".
            Dim usedrange = worksheet.UsedRange
            usedrange.Interior.Color = Color.LightBlue
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.HiddenRowColumn" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range!E1.Value = 1

            'Hidden row 2:6.
            worksheet.Range("2:6").Hidden = True

            'Hidden column A:D.
            worksheet.Range("A:D").Hidden = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.InsertCellsDeleteCells" xml:space="preserve">
    <value>
            Dim worksheet1 As IWorksheet = workbook.Worksheets(0)

            Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            Dim data = New Object(,) {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
            }
            worksheet1.Range("A1:C3").Value = data
            worksheet2.Range("A1:C3").Value = data

            'Insert cells
            worksheet1.Range!A2.Insert() 'Auto
            worksheet1.Range!B2.Insert(InsertShiftDirection.Down)
            worksheet1.Range!C2.Insert(InsertShiftDirection.Right)

            'Delete cells
            worksheet2.Range!A2.Delete() 'Auto
            worksheet2.Range!B2.Delete(DeleteShiftDirection.Left)
            worksheet2.Range!C2.Delete(DeleteShiftDirection.Up)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.InsertDeleteRowsColumns" xml:space="preserve">
    <value>
            Dim worksheet1 As IWorksheet = workbook.Worksheets(0)

            Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            Dim data = New Object(,) {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
            }
            worksheet1.Range("A1:C3").Value = data
            worksheet2.Range("A1:C3").Value = data

            'Insert rows
            worksheet1.Range("A2:B2").EntireRow.Insert()
            worksheet1.Range("3:5").Insert()

            'Insert columns
            worksheet1.Range("B3:B5").EntireColumn.Insert()
            worksheet1.Range("A:A").Insert()

            'Delete rows
            worksheet2.Range("A3:A5").EntireRow.Delete()
            worksheet2.Range("2:4").Delete()

            'Delete columns
            worksheet2.Range("B3:B5").EntireColumn.Delete()
            worksheet2.Range("A:A").Delete()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.MergeCells" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'A1:C4 is a single merged cell.
            worksheet.Range("A1:C4").Merge()

            'H5:J5 is a single merged cell.
            'H6:J6 is a single merged cell.
            worksheet.Range("H5:J6").Merge(True)

            'select A1:H5's entire merge area A1:J5, entire merge area is a bounding rectangle.
            Dim entireMergeArea = worksheet.Range("A1:H5").EntireMergeArea
            entireMergeArea.Select()

            'judge if H5 is a merged cell.
            If worksheet.Range!J5.MergeCells Then
                'set value to the top left cell of the merge area.
                worksheet.Range!J5.EntireMergeArea(0, 0).Value = 1
            End If
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.SetRangeValue" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            worksheet.Range("A:F").ColumnWidth = 15
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            'set two-dimension array value to range A1:F7
            worksheet.Range("A1:F7").Value = data

            'return a two-dimension array when get range A1:B7's value.
            Dim result = worksheet.Range("A1:B7").Value
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.SetRowHeightColumnWidth" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'set row height for row 1:2.
            worksheet.Range("1:2").RowHeight = 50

            'set column width for column C:D.
            worksheet.Range("C:D").ColumnWidth = 20
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShape3DFormat" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 50, 30, 200, 100)
            shape.ThreeD.RotationX = 50
            shape.ThreeD.RotationY = 20
            shape.ThreeD.RotationZ = 30
            shape.ThreeD.Depth = 7
            shape.ThreeD.Z = 20
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeLine" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
            shape.Line.DashStyle = LineDashStyle.Dash
            shape.Line.Style = LineStyle.Single
            shape.Line.Weight = 2
            shape.Line.Color.ObjectThemeColor = ThemeColor.Accent6
            shape.Line.Transparency = 0.3
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithGradientFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
            shape.Fill.PresetGradient(Drawing.GradientStyle.Vertical, 3, Drawing.PresetGradientType.Silver)
            shape.Fill.RotateWithObject = False
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithPatternFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
            shape.Fill.Patterned(Drawing.PatternType.Percent10)
            shape.Fill.Color.ObjectThemeColor = ThemeColor.Accent2
            shape.Fill.PatternColor.ObjectThemeColor = ThemeColor.Accent6
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithPictureFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 20, 20, 200, 100)
            Dim stream As IO.Stream = GetResourceStream("logo.png")

            shape.Fill.UserPicture(stream, ImageType.JPG)
            shape.PictureFormat.ColorType = PictureColorType.Grayscale
            shape.PictureFormat.Brightness = 0.6
            shape.PictureFormat.Contrast = 0.3
            shape.PictureFormat.Crop.PictureOffsetX = 10
            shape.PictureFormat.Crop.PictureOffsetY = -5
            shape.PictureFormat.Crop.PictureWidth = 120
            shape.PictureFormat.Crop.PictureHeight = 80
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithSolidFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
            shape.Fill.Solid()
            shape.Fill.Color.RGB = Color.Red
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithTextureFill" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
            shape.Fill.PresetTextured(Drawing.PresetTexture.Canvas)
            shape.Fill.TextureAlignment = TextureAlignment.Center
            shape.Fill.TextureOffsetX = 2.5
            shape.Fill.TextureOffsetY = 3.2
            shape.Fill.TextureHorizontalScale = 0.9
            shape.Fill.TextureVerticalScale = 0.2
            shape.Fill.Transparency = 0.5
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConnectShapesByConnector" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim ShapeBegin As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 1, 1, 100, 100)
            Dim EndBegin As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 200, 200, 100, 100)
            Dim ConnectorShape As IShape = worksheet.Shapes.AddConnector(Drawing.ConnectorType.Straight, 1, 1, 101, 101)

            'connect shapes by connector shape.
            ConnectorShape.ConnectorFormat.BeginConnect(ShapeBegin, 3)
            ConnectorShape.ConnectorFormat.EndConnect(EndBegin, 0)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.SetShapeText" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
            shape.Width = 500
            shape.Height = 200
            shape.TextFrame.TextRange.Font.Color.RGB = Color.FromArgb(0, 255, 0)
            shape.TextFrame.TextRange.Font.Bold = True
            shape.TextFrame.TextRange.Font.Italic = True
            shape.TextFrame.TextRange.Font.Size = 20
            shape.TextFrame.TextRange.Font.Strikethrough = True
            shape.TextFrame.TextRange.Paragraphs.Add("This is a parallelogram shape.")
            shape.TextFrame.TextRange.Paragraphs.Add("My name is XXX")
            shape.TextFrame.TextRange.Paragraphs(1).Runs.Add("Hello World!")
            shape.TextFrame.TextRange.Paragraphs(1).Runs(0).Font.Strikethrough = False
            shape.TextFrame.TextRange.Paragraphs(1).Runs(0).Font.Size = 35
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ShapeCopy" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Create a shape in worksheet, shape's range is Range("A7:B7")
            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 1, 1, 100, 100)

            'Range("A1:D10") must contain Range("A7:B7"), copy a new shape to Range("C1:F7")
            worksheet.Range("A1:D10").Copy(worksheet.Range!E1)
            'worksheet.Range("A1:D10").Copy(worksheet.Range("E1:I9"))
            'Cross sheet copy, copy a new shape to worksheet2's Range("C1:F7")
            'Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            'worksheet.Range("A1:D10").Copy(worksheet2.Range!E1)
            'worksheet.Range("A1:D10").Copy(worksheet2.Range("E1:I9"))
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ShapeCut" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Create a shape in worksheet, shape's range is Range("A7:B7")
            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 1, 1, 100, 100)

            'Range("A1:D10") must contain Range("A7:B7"), cut a new shape to Range("C1:F7")
            worksheet.Range("A1:D10").Cut(worksheet.Range!E1)
            'worksheet.Range("A1:D10").Cut(worksheet.Range("E1:I9"))
            'Cross sheet cut, cut a new shape to worksheet2's Range("C1:F7")
            'Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            'worksheet.Range("A1:D10").Cut(worksheet2.Range!E1)
            'worksheet.Range("A1:D10").Cut(worksheet2.Range("E1:I9"))
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ShapeDuplicate" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Create shape
            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 50, 50, 200, 200)

            'Duplicate shape
            Dim newShape As IShape = shape.Duplicate()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.AddCustomSlicerStyle" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Category", "categoryCache")

            'add slicer
            Dim slicer As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate2", "Category", 30, 550, 100, 200)

            'create custom slicer style.
            Dim slicerStyle As ITableStyle = workbook.TableStyles.Add("test")

            'set ShowAsAvailableSlicerStyle to True, the style will be treated as slicer style.
            slicerStyle.ShowAsAvailableSlicerStyle = True
            slicerStyle.TableStyleElements(TableStyleElementType.WholeTable).Font.Name = "Arial"
            slicerStyle.TableStyleElements(TableStyleElementType.WholeTable).Font.Bold = False
            slicerStyle.TableStyleElements(TableStyleElementType.WholeTable).Font.Italic = False
            slicerStyle.TableStyleElements(TableStyleElementType.WholeTable).Font.Color = Color.White
            slicerStyle.TableStyleElements(TableStyleElementType.WholeTable).Borders.Color = Color.LightPink
            slicerStyle.TableStyleElements(TableStyleElementType.WholeTable).Interior.Color = Color.LightGreen

            'set slicer style to custom style.
            slicer.Style = slicerStyle
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.AddSlicersForPivotTable" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F16").Value = sourceData
            worksheet.Range("A:F").ColumnWidth = 15

            'Create pivot cache.
            Dim pivotcache As IPivotCache = workbook.PivotCaches.Create(worksheet.Range("A1:F16"))

            'Create pivot tables.
            Dim pivottable1 As IPivotTable = worksheet.PivotTables.Add(pivotcache, worksheet.Range!K5, "pivottable1")
            Dim pivottable2 As IPivotTable = worksheet.PivotTables.Add(pivotcache, worksheet.Range!N3, "pivottable2")
            worksheet.Range("D2:D16").NumberFormat = "$#,##0.00"

            'Config pivot fields
            Dim field_product1 As IPivotField = pivottable1.PivotFields(1)
            field_product1.Orientation = PivotFieldOrientation.RowField

            Dim field_Amount1 As IPivotField = pivottable1.PivotFields(3)
            field_Amount1.Orientation = PivotFieldOrientation.DataField

            Dim field_product2 As IPivotField = pivottable2.PivotFields(5)
            field_product2.Orientation = PivotFieldOrientation.RowField

            Dim field_Amount2 As IPivotField = pivottable2.PivotFields(2)
            field_Amount2.Orientation = PivotFieldOrientation.DataField
            field_Amount2.Function = ConsolidationFunction.Count

            'create slicer cache, the slicers base the slicer cache just control pivot table1.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(pivottable1, "Product")
            Dim slicer1 As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "p1", "Product", 30, 550, 100, 200)

            'add pivot table2 for slicer cache, the slicers base the slicer cache will control pivot tabl1 and pivot table2.
            cache.PivotTables.AddPivotTable(pivottable2)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.AddSlicersForTable" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Category", "categoryCache")

            'add two slicers for Category column.
            Dim slicer1 As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate1", "Category", 30, 550, 100, 200)
            Dim slicer2 As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate2", "Category", 30, 700, 100, 200)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.ApplySlicerStyle" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Category", "categoryCache")

            'add slicer
            Dim slicer As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate1", "Category", 30, 550, 100, 200)

            'set slicer style to build in style.
            slicer.Style = workbook.TableStyles("SlicerStyleLight2")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.ConfigSlicerLayout" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Product", "productCache")

            'add slicer
            Dim slicer1 As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "product1", "Product", 30, 550, 100, 200)

            'config slicer's layout.
            slicer1.NumberOfColumns = 2
            slicer1.RowHeight = 25
            slicer1.DisplayHeader = False
            slicer1.Shape.Placement = Placement.Move
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.DoTableFilter" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Category", "categoryCache")

            'add slicer
            Dim slicer1 As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate1", "Category", 20, 550, 100, 200)

            'Apply table filter, this will synchronize to the slicer, the slicer1's selected item is "Fruit".
            worksheet.Range("A1:F16").AutoFilter(2, "Fruit")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.SlicerCopy" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'Create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Category", "categoryCache")

            'Add slicer, slicer's range is Range("H3:J16")
            Dim slicer As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate1", "Category", 30, 550, 100, 200)

            'Range("H3:J16") must contain slicer's range, copy a new shape to Range("K3:M16")
            worksheet.Range("H3:J16").Copy(worksheet.Range!K3)
            'worksheet.Range("H3:J16").Copy(worksheet.Range("K3:M16"))
            'Cross sheet copy, copy a new shape to worksheet2's Range("K3:M16")
            'Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            'worksheet.Range("H3:J16").Copy(worksheet2.Range!K3)
            'worksheet.Range("H3:J16").Copy(worksheet2.Range("K3:M16"))
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.SlicerCut" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'Create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Category", "categoryCache")

            'Add slicer, slicer's range is Range("H3:J16")
            Dim slicer As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate1", "Category", 30, 550, 100, 200)

            'Range("H3:J16") must contain slicer's range, cut a new shape to Range("K3:M16")
            worksheet.Range("H3:J16").Cut(worksheet.Range!K3)
            'worksheet.Range("H3:J16").Cut(worksheet.Range("K3:M16"))
            'Cross sheet cut, cut a new shape to worksheet2's Range("K3:M16")
            'Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
            'worksheet.Range("H3:J16").Cut(worksheet2.Range!K3)
            'worksheet.Range("H3:J16").Cut(worksheet2.Range("K3:M16"))
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.SlicerDuplicate" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'Create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Category", "categoryCache")

            'Add slicer
            Dim slicer As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate1", "Category", 30, 550, 100, 200)

            'Duplicate slicer
            Dim newShape As IShape = slicer.Shape.Duplicate()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.UseSlicerDoFilter" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Category", "categoryCache")

            'add slicer
            Dim slicer1 As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate1", "Category", 30, 550, 100, 200)

            'do filter operation. filter out vegetables.
            slicer1.SlicerCache.SlicerItems("Vegetables").Selected = False
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.UseSlicerToClearFilter" xml:space="preserve">
    <value>
            Dim sourceData = {
                {"Order ID", "Product", "Category", "Amount", "Date", "Country"},
                {1, "Carrots", "Vegetables", 4270, #1/6/2018#, "United States"},
                {2, "Broccoli", "Vegetables", 8239, #1/7/2018#, "United Kingdom"},
                {3, "Banana", "Fruit", 617, #1/8/2018#, "United States"},
                {4, "Banana", "Fruit", 8384, #1/10/2018#, "Canada"},
                {5, "Beans", "Vegetables", 2626, #1/10/2018#, "Germany"},
                {6, "Orange", "Fruit", 3610, #1/11/2018#, "United States"},
                {7, "Broccoli", "Vegetables", 9062, #1/11/2018#, "Australia"},
                {8, "Banana", "Fruit", 6906, #1/16/2018#, "New Zealand"},
                {9, "Apple", "Fruit", 2417, #1/16/2018#, "France"},
                {10, "Apple", "Fruit", 7431, #1/16/2018#, "Canada"},
                {11, "Banana", "Fruit", 8250, #1/16/2018#, "Germany"},
                {12, "Broccoli", "Vegetables", 7012, #1/18/2018#, "United States"},
                {13, "Carrots", "Vegetables", 1903, #1/20/2018#, "Germany"},
                {14, "Broccoli", "Vegetables", 2824, #1/22/2018#, "Canada"},
                {15, "Apple", "Fruit", 6946, #1/24/2018#, "France"}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range("A1:F16").Value = sourceData

            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F16"), True)
            table.Columns(3).DataBodyRange.NumberFormat = "$#,##0.00"

            'create slicer cache for table.
            Dim cache As ISlicerCache = workbook.SlicerCaches.Add(table, "Category", "categoryCache")

            'add slicer
            Dim slicer1 As ISlicer = cache.Slicers.Add(workbook.Worksheets("Sheet1"), "cate1", "Category", 30, 550, 100, 200)

            'do filter operation. filter out vegetables.
            slicer1.SlicerCache.SlicerItems("Vegetables").Selected = False

            'clear slicer filter.
            slicer1.SlicerCache.ClearAllFilters()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.CustomSort" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'give a custom sort values string. "Angela" and "Damon" should be the top1 and top2.
            Dim sortkey = New ValueSortField(worksheet.Range("A2:A7"), """Angela"", ""Damon""")
            worksheet.Range("A2:F7").Sort(SortOrientation.Columns, False, sortkey)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.SortRangeByFontColor" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range!F2.Font.Color = Color.Red
            worksheet.Range!F3.Font.Color = Color.Gainsboro
            worksheet.Range!F4.Font.Color = Color.Green
            worksheet.Range!F5.Font.Color = Color.Gainsboro
            worksheet.Range!F6.Font.Color = Color.Gainsboro
            worksheet.Range!F7.Font.Color = Color.Gainsboro

            'The font colors which are same to "F7" cell's color will in the top.
            worksheet.Sort.SortFields.Add(New FontColorSortField(worksheet.Range("F2:F7"), worksheet.Range!F7.Font.Color, SortOrder.Ascending))
            worksheet.Sort.Range = worksheet.Range("A2:F7")
            worksheet.Sort.Orientation = SortOrientation.Columns
            worksheet.Sort.Apply()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.SortRangeByIcon" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15
            Dim iconset As IIconSetCondition = worksheet.Range("F2:F7").FormatConditions.AddIconSetCondition()
            iconset.IconSet = workbook.IconSets(IconSetType.Icon3TrafficLights1)

            'green traffic light will in the top.
            worksheet.Sort.SortFields.Add(New IconSortField(worksheet.Range("F2:F7"), workbook.IconSets(IconSetType.Icon3TrafficLights1)(2), SortOrder.Ascending))
            worksheet.Sort.Range = worksheet.Range("A2:F7")
            worksheet.Sort.Orientation = SortOrientation.Columns
            worksheet.Sort.Apply()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.SortRangeByInterior" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15
            worksheet.Range!F2.Interior.Color = Color.LightPink
            worksheet.Range!F3.Interior.Color = Color.LightGreen
            worksheet.Range!F4.Interior.Color = Color.LightPink
            worksheet.Range!F5.Interior.Color = Color.LightGreen
            worksheet.Range!F6.Interior.Color = Color.LightBlue
            worksheet.Range!F7.Interior.Color = Color.LightPink

            '"F4" will in the top.
            worksheet.Sort.SortFields.Add(New CellColorSortField(worksheet.Range("F2:F7"), worksheet.Range!F4.DisplayFormat.Interior, SortOrder.Ascending))
            worksheet.Sort.Range = worksheet.Range("A2:F7")
            worksheet.Sort.Orientation = SortOrientation.Columns
            worksheet.Sort.Apply()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.SortRangeByValue" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'Sort by column F, ascending.
            worksheet.Range("A2:F7").Sort(worksheet.Range("F2:F7"), SortOrder.Ascending, SortOrientation.Columns)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.ClearSparklineGroup" xml:space="preserve">
    <value>
            Dim data = {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", #5/21/2017#, "Customer A", "Invoice 1001", Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
                {"1002", #3/18/2017#, "Customer B", "Invoice 1002", Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
                {"1003", #6/15/2017#, "Customer C", "Invoice 1003", Nothing, 827.63, 1009.23, 1869.23, 1002.56, Nothing}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("B2:K5").Value = data
            worksheet.Range("B:K").ColumnWidth = 15
            worksheet.Tables.Add(worksheet.Range("B2:K5"), True)
            worksheet.Tables(0).Columns(9).DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])"

            'create a new group of sparklines.
            worksheet.Range!F3.SparklineGroups.Add(SparkType.Line, "G3:J3")

            'create another new group of sparklines.
            worksheet.Range("F4:F5").SparklineGroups.Add(SparkType.Column, "G4:J5")

            'clear sparkline group, all sparklines in the group will be cleaned.
            worksheet.Range("F3, F4").SparklineGroups.ClearGroups()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.ClearSparklines" xml:space="preserve">
    <value>
            Dim data = {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", #5/21/2017#, "Customer A", "Invoice 1001", Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
                {"1002", #3/18/2017#, "Customer B", "Invoice 1002", Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
                {"1003", #6/15/2017#, "Customer C", "Invoice 1003", Nothing, 827.63, 1009.23, 1869.23, 1002.56, Nothing}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("B2:K5").Value = data
            worksheet.Range("B:K").ColumnWidth = 15
            worksheet.Tables.Add(worksheet.Range("B2:K5"), True)
            worksheet.Tables(0).Columns(9).DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])"

            'create a new group of sparklines.
            worksheet.Range!F3.SparklineGroups.Add(SparkType.Line, "G3:J3")

            'create another new group of sparklines.
            worksheet.Range("F4:F5").SparklineGroups.Add(SparkType.Column, "G4:J5")

            'clear F3 and F4 cell's sparkline. F5 cell's sparkline still exist.
            worksheet.Range("F3, F4").SparklineGroups.Clear()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.ConfigSparklineSettings" xml:space="preserve">
    <value>
            Dim data = {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", #5/21/2017#, "Customer A", "Invoice 1001", Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
                {"1002", #3/18/2017#, "Customer B", "Invoice 1002", Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
                {"1003", #6/15/2017#, "Customer C", "Invoice 1003", Nothing, 827.63, 1009.23, 1869.23, 1002.56, Nothing}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("B2:K5").Value = data
            worksheet.Range("B:K").ColumnWidth = 15
            worksheet.Tables.Add(worksheet.Range("B2:K5"), True)
            worksheet.Tables(0).Columns(9).DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])"

            'create a new group of sparklines.
            worksheet.Range("F3:F5").SparklineGroups.Add(SparkType.Line, "G3:J5")
            Dim sparklinegroup = worksheet.Range!F3.SparklineGroups(0)

            'Config sparkline settings.
            sparklinegroup.LineWeight = 2.5
            sparklinegroup.Points.Markers.Color.ThemeColor = ThemeColor.Accent2
            sparklinegroup.Points.Markers.Visible = True
            sparklinegroup.SeriesColor.ThemeColor = ThemeColor.Accent6
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.CreateSparklines" xml:space="preserve">
    <value>
            Dim data = {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", #5/21/2017#, "Customer A", "Invoice 1001", Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
                {"1002", #3/18/2017#, "Customer B", "Invoice 1002", Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
                {"1003", #6/15/2017#, "Customer C", "Invoice 1003", Nothing, 827.63, 1009.23, 1869.23, 1002.56, Nothing}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("B2:K5").Value = data
            worksheet.Range("B:K").ColumnWidth = 15
            worksheet.Tables.Add(worksheet.Range("B2:K5"), True)
            worksheet.Tables(0).Columns(9).DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])"

            'create a new group of sparklines.
            worksheet.Range("F3:F5").SparklineGroups.Add(SparkType.Line, "G3:J5")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.GroupExistSparklines" xml:space="preserve">
    <value>
            Dim data = {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", #5/21/2017#, "Customer A", "Invoice 1001", Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
                {"1002", #3/18/2017#, "Customer B", "Invoice 1002", Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
                {"1003", #6/15/2017#, "Customer C", "Invoice 1003", Nothing, 827.63, 1009.23, 1869.23, 1002.56, Nothing}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("B2:K5").Value = data
            worksheet.Range("B:K").ColumnWidth = 15
            worksheet.Tables.Add(worksheet.Range("B2:K5"), True)
            worksheet.Tables(0).Columns(9).DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])"

            'create a new group of sparklines.
            worksheet.Range!F3.SparklineGroups.Add(SparkType.Line, "G3:J3")

            'create another new group of sparklines.
            worksheet.Range("F4:F5").SparklineGroups.Add(SparkType.Column, "G4:J5")

            'Create a new group, group exist sparklines, according to Range!F4's sparkline group setting.
            worksheet.Range("F3:F5").SparklineGroups.Group(worksheet.Range!F4)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.UseDateAxis" xml:space="preserve">
    <value>
            Dim data = New Object(,) {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", #5/21/2017#, "Customer A", "Invoice 1001", Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
                {"1002", #3/18/2017#, "Customer B", "Invoice 1002", Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
                {"1003", #6/15/2017#, "Customer C", "Invoice 1003", Nothing, 827.63, 1009.23, 1869.23, 1002.56, Nothing}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("B2:K5").Value = data
            worksheet.Range("B:K").ColumnWidth = 15
            worksheet.Tables.Add(worksheet.Range("B2:K5"), True)
            worksheet.Tables(0).Columns(9).DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])"

            'create a new group of sparklines.
            worksheet.Range("F3:F5").SparklineGroups.Add(SparkType.Line, "G3:J5")
            worksheet.Range("G7:J7").Value = New Object() {
                #12/16/2011#,
                #12/17/2011#,
                #12/18/2011#,
                #12/19/2011#
            }
            worksheet.Range!F3.SparklineGroups(0).DateRange = "G7:J7"
            worksheet.Range!F3.SparklineGroups(0).Axes.Horizontal.Axis.Visible = True
            worksheet.Range!F3.SparklineGroups(0).Axes.Horizontal.Axis.Color.Color = Color.Green
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Tables.AccessTableRanges" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'add table.
            worksheet.Tables.Add(worksheet.Range("A1:F7"), True)

            'show totals
            worksheet.Tables(0).ShowTotals = True

            'set each range's interior color.
            worksheet.Tables(0).HeaderRange.Interior.Color = Color.Green
            worksheet.Tables(0).DataRange.Interior.Color = Color.Pink
            worksheet.Tables(0).TotalsRange.Interior.Color = Color.LightGray
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Tables.AddCustomTableStyle" xml:space="preserve">
    <value>
            'Add one custom table style.
            Dim style As ITableStyle = workbook.TableStyles.Add("test")

            'Set WholeTable element style.
            style.TableStyleElements(TableStyleElementType.WholeTable).Font.Italic = True
            style.TableStyleElements(TableStyleElementType.WholeTable).Font.Color = Color.White
            style.TableStyleElements(TableStyleElementType.WholeTable).Font.Strikethrough = True
            style.TableStyleElements(TableStyleElementType.WholeTable).Borders.LineStyle = BorderLineStyle.Dotted
            style.TableStyleElements(TableStyleElementType.WholeTable).Borders.Color = Color.FromArgb(0, 193, 213)
            style.TableStyleElements(TableStyleElementType.WholeTable).Interior.Color = Color.FromArgb(59, 92, 170)

            'Set FirstColumnStripe element style.
            style.TableStyleElements(TableStyleElementType.FirstColumnStripe).Font.Bold = True
            style.TableStyleElements(TableStyleElementType.FirstColumnStripe).Font.Color = Color.FromArgb(255, 0, 0)
            style.TableStyleElements(TableStyleElementType.FirstColumnStripe).Borders.LineStyle = BorderLineStyle.Thick
            style.TableStyleElements(TableStyleElementType.FirstColumnStripe).Borders.ThemeColor = ThemeColor.Accent5
            style.TableStyleElements(TableStyleElementType.FirstColumnStripe).Interior.Color = Color.FromArgb(255, 255, 0)
            style.TableStyleElements(TableStyleElementType.FirstColumnStripe).StripeSize = 2

            'Set SecondColumnStripe element style.
            style.TableStyleElements(TableStyleElementType.SecondColumnStripe).Font.Color = Color.FromArgb(255, 0, 255)
            style.TableStyleElements(TableStyleElementType.SecondColumnStripe).Borders.LineStyle = BorderLineStyle.DashDot
            style.TableStyleElements(TableStyleElementType.SecondColumnStripe).Borders.Color = Color.FromArgb(42, 105, 162)
            style.TableStyleElements(TableStyleElementType.SecondColumnStripe).Interior.Color = Color.FromArgb(204, 204, 255)

            'add table.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F7"), True)
            worksheet.Range("A:F").ColumnWidth = 15

            'set custom table style to table.
            table.TableStyle = style
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Tables.ApplyTableStyle" xml:space="preserve">
    <value>
            'add table.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F7"), True)
            worksheet.Range("A:F").ColumnWidth = 15

            'Add one custom table style.
            Dim style As ITableStyle = workbook.TableStyles.Add("test")

            'set custom table style for table.
            table.TableStyle = style

            'Use table style name get one build in table style.
            Dim tableStyle As ITableStyle = workbook.TableStyles("TableStyleMedium3")

            'set built-in table style for table.
            table.TableStyle = tableStyle
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Tables.CreateTable" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'add table.
            worksheet.Tables.Add(worksheet.Range("A1:F7"), True)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Tables.InsertDeleteTableRowColumns" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'add table.
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F7"), True)

            'add table column before first column.
            table.Columns.Add(0)

            'add table column before second column.
            table.Columns.Add(1)

            'delete first table column.
            table.Columns(0).Delete()

            'delete "City" table column.
            table.Columns("City").Delete()

            'insert a table row in table's last row.
            table.Rows.Add()

            'delete second table row.
            table.Rows(1).Delete()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Tables.PerformCalculationsInTable" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'add table.
            worksheet.Tables.Add(worksheet.Range("A1:F7"), True)

            '"Name" column's total row calculation function will be "=SUBTOTAL(103,[Name])"
            worksheet.Tables(0).Columns(0).TotalsCalculation = TotalsCalculation.Count

            '"Weight" column's total row calculation function will be "=SUBTOTAL(101,[Weight])"
            worksheet.Tables(0).Columns(4).TotalsCalculation = TotalsCalculation.Average
            worksheet.Tables(0).ShowTotals = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Tables.RemoveTable" xml:space="preserve">
    <value>
            Dim data = {
                    {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                    {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                    {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                    {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                    {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                    {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                    {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
                }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data

            'add table.
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F7"), True)

            'remove table
            table.Delete()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Tables.TableFilter" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'add table.
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F7"), True)

            'Filter table 
            table.Range.AutoFilter(0, {"Richard", "Nia"}, AutoFilterOperator.Values)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Tables.TableSort" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", #6/8/1968#, "Blue", 67, 165},
                {"Nia", "New York", #7/3/1972#, "Brown", 62, 134},
                {"Jared", "New York", #3/2/1964#, "Hazel", 72, 180},
                {"Natalie", "Washington", #8/8/1972#, "Blue", 66, 163},
                {"Damon", "Washington", #2/2/1986#, "Hazel", 76, 176},
                {"Angela", "Washington", #2/15/1993#, "Brown", 68, 145}
            }

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range("A1:F7").Value = data
            worksheet.Range("A:F").ColumnWidth = 15

            'add table.
            Dim table As ITable = worksheet.Tables.Add(worksheet.Range("A1:F7"), True)

            'sort table 
            Dim key1 As New ValueSortField(worksheet.Range("A1:A2"), SortOrder.Ascending)
            table.Sort.SortFields.Add(key1)
            table.Sort.Apply()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Theme.AddCustomThemes" xml:space="preserve">
    <value>
            'Base theme is office theme when not give parameter.
            Dim theme As ITheme = New GrapeCity.Documents.Excel.Theme("testTheme")

            'ITheme theme = new Theme("testTheme", Themes.Badge)
            'Customize theme's color.
            theme.ThemeColorScheme(ThemeColor.Light1).RGB = Color.AntiqueWhite
            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.Aqua
            theme.ThemeColorScheme(ThemeColor.Light2).RGB = Color.Beige
            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.Black
            theme.ThemeColorScheme(ThemeColor.Accent1).RGB = Color.CadetBlue
            theme.ThemeColorScheme(ThemeColor.Accent2).RGB = Color.Chartreuse
            theme.ThemeColorScheme(ThemeColor.Accent3).RGB = Color.Chocolate
            theme.ThemeColorScheme(ThemeColor.Accent4).RGB = Color.Coral
            theme.ThemeColorScheme(ThemeColor.Accent5).RGB = Color.CornflowerBlue
            theme.ThemeColorScheme(ThemeColor.Accent6).RGB = Color.Cornsilk
            theme.ThemeColorScheme(ThemeColor.Hyperlink).RGB = Color.Honeydew
            theme.ThemeColorScheme(ThemeColor.FollowedHyperlink).RGB = Color.HotPink

            'Customize theme's font.
            theme.ThemeFontScheme.Major(FontLanguageIndex.Latin).Name = "Kristen ITC"
            theme.ThemeFontScheme.Minor(FontLanguageIndex.Latin).Name = "Segoe Script"

            'Change workbook's theme to custom theme.
            workbook.Theme = theme
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!B2.Value = "Major Font:"
            worksheet.Range!B3.Value = "Minor Font:"
            worksheet.Range!C2.Value = "Kristen ITC"
            worksheet.Range!C3.Value = "Segoe Script"
            worksheet.Range!C2.Font.ThemeFont = ThemeFont.Major
            worksheet.Range!C3.Font.ThemeFont = ThemeFont.Minor
            worksheet.Range("E2:E13").Value = New Object() {"Light1", "Dark1", "Light2", "Dark2", "Accent1", "Accent2", "Accent3", "Accent4", "Accent5", "Accent6", "Hyperlink", "FollowedHyperlink"}
            worksheet.Range!F2.Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range!F3.Interior.ThemeColor = ThemeColor.Dark1
            worksheet.Range!F4.Interior.ThemeColor = ThemeColor.Light2
            worksheet.Range!F5.Interior.ThemeColor = ThemeColor.Dark2
            worksheet.Range!F6.Interior.ThemeColor = ThemeColor.Accent1
            worksheet.Range!F7.Interior.ThemeColor = ThemeColor.Accent2
            worksheet.Range!F8.Interior.ThemeColor = ThemeColor.Accent3
            worksheet.Range!F9.Interior.ThemeColor = ThemeColor.Accent4
            worksheet.Range("F10").Interior.ThemeColor = ThemeColor.Accent5
            worksheet.Range("F11").Interior.ThemeColor = ThemeColor.Accent6
            worksheet.Range("F12").Interior.ThemeColor = ThemeColor.Hyperlink
            worksheet.Range("F13").Interior.ThemeColor = ThemeColor.FollowedHyperlink
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Theme.ChangeWorkbookTheme" xml:space="preserve">
    <value>
            'Change workbook's theme to builtin theme.
            workbook.Theme = Themes.Berlin

            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            worksheet.Range!B2.Value = "Major Font:"
            worksheet.Range!B3.Value = "Minor Font:"
            worksheet.Range!C2.Value = "Trebuchet MS"
            worksheet.Range!C3.Value = "Trebuchet MS"

            worksheet.Range!C2.Font.ThemeFont = ThemeFont.Major
            worksheet.Range!C3.Font.ThemeFont = ThemeFont.Minor

            worksheet.Range("E2:E13").Value = New Object() {"Light1", "Dark1", "Light2", "Dark2", "Accent1", "Accent2", "Accent3", "Accent4", "Accent5", "Accent6", "Hyperlink", "FollowedHyperlink"}

            worksheet.Range!F2.Interior.ThemeColor = ThemeColor.Light1
            worksheet.Range!F3.Interior.ThemeColor = ThemeColor.Dark1
            worksheet.Range!F4.Interior.ThemeColor = ThemeColor.Light2
            worksheet.Range!F5.Interior.ThemeColor = ThemeColor.Dark2
            worksheet.Range!F6.Interior.ThemeColor = ThemeColor.Accent1
            worksheet.Range!F7.Interior.ThemeColor = ThemeColor.Accent2
            worksheet.Range!F8.Interior.ThemeColor = ThemeColor.Accent3
            worksheet.Range!F9.Interior.ThemeColor = ThemeColor.Accent4

            worksheet.Range("F10").Interior.ThemeColor = ThemeColor.Accent5
            worksheet.Range("F11").Interior.ThemeColor = ThemeColor.Accent6
            worksheet.Range("F12").Interior.ThemeColor = ThemeColor.Hyperlink
            worksheet.Range("F13").Interior.ThemeColor = ThemeColor.FollowedHyperlink

            worksheet.Range("B:F").ColumnWidth = 15
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ConfigureWorkbookView" xml:space="preserve">
    <value>
            'Workbook view settings.
            Dim bookView As IWorkbookView = workbook.BookView
            bookView.DisplayVerticalScrollBar = False
            bookView.DisplayWorkbookTabs = True
            bookView.TabRatio = 0.5
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.CreateNewWorkbook" xml:space="preserve">
    <value>
            'Create empty workbook, contains one worksheet default.
            Dim workbookNew As New Excel.Workbook
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportCsvFileToWorkbook" xml:space="preserve">
    <value>
            Dim stream As Stream = GetResourceStream("Information.csv")
            'Open csv file stream.
            workbook.Open(stream, OpenFileFormat.Csv)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportCsvFileToWorkbookWithOptions" xml:space="preserve">
    <value>
            'Open csv with more settings.
            Dim options As New CsvOpenOptions
            options.SeparatorString = "-"

            'Change the path to the real file path when open.
            workbook.Open(CurrentDirectory &amp; "source.csv", options)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportExcelFileDataOnly" xml:space="preserve">
    <value>
            'Use XlsxOpenOptions.ImportFlags to control what you want to import from excel, ImportFlags.Data means only the data will be imported
            'Change the path to the real file path when open.
            Dim options As New XlsxOpenOptions
            options.ImportFlags = ImportFlags.Data
            workbook.Open(CurrentDirectory &amp; "source.xlsx", options)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportExcelFileToWorkbook" xml:space="preserve">
    <value>
            'Change the path to the real file path when open.
            workbook.Open(CurrentDirectory &amp; "source.xlsx", OpenFileFormat.Xlsx)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportExcelFileWithoutCalculation" xml:space="preserve">
    <value>
            'When XlsxOpenOptions.DoNotRecalculateAfterOpened means GrapeCity Documents for Excel will just read all the cached values without calculating again after
            'opening an Excel file.
            'Change the path to the real file path when open.
            Dim options As New XlsxOpenOptions
            options.DoNotRecalculateAfterOpened = True
            workbook.Open(CurrentDirectory &amp; "source.xlsx", options)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportExcelFileWithPassword" xml:space="preserve">
    <value>
            'Change the path to the real file path when open.
            Dim options As New XlsxOpenOptions
            options.Password = "123456"
            workbook.Open(CurrentDirectory &amp; "source.xlsx", options)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportXlsmToWorkbook" xml:space="preserve">
    <value>

            'GcExcel supports open xlsm file
            workbook.Open(Me.CurrentDirectory &amp; "macros.xlsm")
            'Macros can be preserved after saving
            workbook.Save(Me.CurrentDirectory &amp; "macros-exported.xlsm")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.LoadAndSaveJsonWithShapes" xml:space="preserve">
    <value>
            Dim workbookWithShape As GrapeCity.Documents.Excel.Workbook = New GrapeCity.Documents.Excel.Workbook()
            Dim worksheet As IWorksheet = workbookWithShape.Worksheets(0)

            'Add a shape in worksheet
            Dim shape As GrapeCity.Documents.Excel.Drawing.IShape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 1, 1, 200, 100)
            shape.Line.DashStyle = GrapeCity.Documents.Excel.Drawing.LineDashStyle.Dash
            shape.Line.Style = GrapeCity.Documents.Excel.Drawing.LineStyle.Single
            shape.Line.Weight = 2
            shape.Line.Color.ObjectThemeColor = ThemeColor.Accent6
            shape.Line.Transparency = 0.3

            'jsonString contains shapes
            Dim jsonString As String = workbookWithShape.ToJson()

            'GcExcel can load json string contains shapes now
            workbook.FromJson(jsonString)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.SaveWorkbookToCsvFile" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Sex", "Weight", "Height"},
                {"Bob", "NewYork", #6/8/1968#, "male", 80, 180},
                {"Betty", "NewYork", #7/3/1972#, "female", 72, 168},
                {"Gary", "NewYork", #3/2/1964#, "male", 71, 179},
                {"Hunk", "Washington", #8/8/1972#, "male", 80, 171},
                {"Cherry", "Washington", #2/2/1986#, "female", 58, 161},
                {"Eva", "Washington", #2/5/1993#, "female", 71, 180}
            }

            'Set data.
            Dim sheet As IWorksheet = workbook.Worksheets(0)
            sheet.Range("A1:F7").Value = data
            sheet.Tables.Add(sheet.Range("A1:F7"), True)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.SaveWorkbookToCsvFileWithOptions" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Sex", "Weight", "Height"},
                {"Bob", "NewYork", #6/8/1968#, "male", 80, 180},
                {"Betty", "NewYork", #7/3/1972#, "female", 72, 168},
                {"Gary", "NewYork", #3/2/1964#, "male", 71, 179},
                {"Hunk", "Washington", #8/8/1972#, "male", 80, 171},
                {"Cherry", "Washington", #2/2/1986#, "female", 58, 161},
                {"Eva", "Washington", #2/5/1993#, "female", 71, 180}
            }

            'Set data.
            Dim sheet As IWorksheet = workbook.Worksheets(0)
            sheet.Range("A1:F7").Value = data
            sheet.Tables.Add(sheet.Range("A1:F7"), True)

            'Save csv options
            Dim options As New CsvSaveOptions
            options.SeparatorString = "-"

            'Change the path to real export path when save.
            workbook.Save(CurrentDirectory &amp; "dest.csv", options)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.SaveWorkbookToExcelFile" xml:space="preserve">
    <value>
            'change the path to real export path when save.
            workbook.Save(CurrentDirectory &amp; "dest.xlsx", SaveFileFormat.Xlsx)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.SaveWorkbookWithPassword" xml:space="preserve">
    <value>
            'Change the path to real export path when save.
            Dim options As New XlsxSaveOptions
            options.Password = "123456"
            workbook.Save(CurrentDirectory &amp; "dest.xlsx", options)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ToJsonFromJson" xml:space="preserve">
    <value>
            'ToJson&amp;FromJson can be used in combination with spread.sheets product:http://spread.grapecity.com/spreadjs/sheets/
            'GrapeCity Documents for Excel import an excel file.
            'change the path to real source file path.
            Dim source As String = CurrentDirectory &amp; "source.xlsx"
            workbook.Open(source)

            'GrapeCity Documents for Excel export to a json string.
            Dim jsonstr = workbook.ToJson()

            'use the json string to initialize spread.sheets product.
            'spread.sheets will show the excel file contents.
            'spread.sheets product export a json string.
            'GrapeCity Documents for Excel use the json string to initialize.
            workbook.FromJson(jsonstr)

            'GrapeCity Documents for Excel export workbook to an excel file.
            'change the path to real export file path.
            Dim export As String = CurrentDirectory &amp; "export.xlsx"

            workbook.Save(export)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.AccessWorksheet" xml:space="preserve">
    <value>
            'Use sheet index to get worksheet.
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Use sheet name to get worksheet.
            Dim worksheet1 As IWorksheet = workbook.Worksheets("Sheet1")
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.ActivateWorksheet" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets.Add()
            'Activate new created worksheet.
            worksheet.Activate()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.AddWorksheet" xml:space="preserve">
    <value>
            ' Add a new worksheet to the workbook. The worksheet will be inserted into the end of the existing worksheet collection.
            workbook.Worksheets.Add()

            'Add a new worksheet to the specified position in the collection of worksheets.
            workbook.Worksheets.AddBefore(workbook.Worksheets(0))
            workbook.Worksheets.AddAfter(workbook.Worksheets(1))

            'Set worksheet's name.
            workbook.Worksheets(2).Name = "Product Plan"
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.ConfigureWorksheetView" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'Worksheet view settings.
            Dim sheetView As IWorksheetView = worksheet.SheetView
            sheetView.DisplayFormulas = False
            sheetView.DisplayRightToLeft = True
            sheetView.GridlineColor = Color.Red
            sheetView.Zoom = 200
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.ConfigWorksheet" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            'Set worksheet tab color.
            worksheet.TabColor = Color.Green

            'Set worksheet default row height.
            worksheet.StandardHeight = 20

            'Set worksheet default column width.
            worksheet.StandardWidth = 50

            'Split worksheet to panes.
            worksheet.SplitPanes(worksheet.Range!B3.Row, worksheet.Range!B3.Column)
            Dim worksheet1 As IWorksheet = workbook.Worksheets.Add()

            'Hide worksheet.
            worksheet1.Visible = Visibility.Hidden
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.DeleteWorksheet" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets.Add()
            'workbook must contain one visible worksheet at least, if delete the one visible worksheet, it will throw exception.
            worksheet.Delete()
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.ProtectWorksheet" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            'protect worksheet, allow insert column.
            worksheet.Protection = True
            worksheet.ProtectionSettings.AllowInsertingColumns = True
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.SaveWorksheetToCsvFile" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Sex", "Weight", "Height"},
                {"Bob", "NewYork", #6/8/1968#, "male", 80, 180},
                {"Betty", "NewYork", #7/3/1972#, "female", 72, 168},
                {"Gary", "NewYork", #3/2/1964#, "male", 71, 179},
                {"Hunk", "Washington", #8/8/1972#, "male", 80, 171},
                {"Cherry", "Washington", #2/2/1986#, "female", 58, 161},
                {"Eva", "Washington", #2/5/1993#, "female", 71, 180}
            }

            'Set data.
            Dim sheet As IWorksheet = workbook.Worksheets(0)
            sheet.Range("A1:F7").Value = data
            sheet.Tables.Add(sheet.Range("A1:F7"), True)

            'Change the path to real export path when save.
            sheet.Save(CurrentDirectory &amp; "dest.csv", SaveFileFormat.Csv)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.SaveWorksheetToCsvFileWithOptions" xml:space="preserve">
    <value>
            Dim data = {
                {"Name", "City", "Birthday", "Sex", "Weight", "Height"},
                {"Bob", "NewYork", #6/8/1968#, "male", 80, 180},
                {"Betty", "NewYork", #7/3/1972#, "female", 72, 168},
                {"Gary", "NewYork", #3/2/1964#, "male", 71, 179},
                {"Hunk", "Washington", #8/8/1972#, "male", 80, 171},
                {"Cherry", "Washington", #2/2/1986#, "female", 58, 161},
                {"Eva", "Washington", #2/5/1993#, "female", 71, 180}
            }

            'Set data.
            Dim sheet As IWorksheet = workbook.Worksheets(0)
            sheet.Range("A1:F7").Value = data
            sheet.Tables.Add(sheet.Range("A1:F7"), True)

            'Save csv options
            Dim options As New CsvSaveOptions
            options.SeparatorString = "-"

            'Change the path to real export path when save.
            sheet.Save(CurrentDirectory &amp; "dest.csv", options)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.SetBackgroundImage" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)
            Dim stream As Stream = GetResourceStream("logo.png")
            Dim imageBytes As Byte() = New Byte(stream.Length - 1) {}
            stream.Read(imageBytes, 0, imageBytes.Length)
            worksheet.BackgroundPicture = imageBytes
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.UnprotectWorksheet" xml:space="preserve">
    <value>
            Dim worksheet As IWorksheet = workbook.Worksheets(0)

            'protect worksheet, allow insert column.
            worksheet.Protection = True
            worksheet.ProtectionSettings.AllowInsertingColumns = True

            'Unprotect worksheet.
            worksheet.Protection = False
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.AgingReport" xml:space="preserve">
    <value>
            'Load template file
            Dim fileStream = GetResourceStream("AgingReport.xlsx")
            workbook.Open(fileStream)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.AnnualFinancialReport" xml:space="preserve">
    <value>
            'Load template file
            Dim fileStream = GetResourceStream("Annual financial report.xlsx")
            workbook.Open(fileStream)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.FamilyBudget" xml:space="preserve">
    <value>
            'Load template file
            Dim fileStream = GetResourceStream("Family budget.xlsx")
            workbook.Open(fileStream)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.HomeInventory" xml:space="preserve">
    <value>
            'Load template file
            Dim fileStream = GetResourceStream("Home inventory.xlsx")
            workbook.Open(fileStream)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.ProjectCostTracker" xml:space="preserve">
    <value>
            'Load template file
            Dim fileStream = GetResourceStream("Project cost tracker.xlsx")
            workbook.Open(fileStream)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.SimplePersonalBudget" xml:space="preserve">
    <value>
            'Load template file
            Dim fileStream = GetResourceStream("Simple personal budget.xlsx")
            workbook.Open(fileStream)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.StudentCalendar" xml:space="preserve">
    <value>
            'Load template file
            Dim fileStream = GetResourceStream("Student calendar (Mon).xlsx")
            workbook.Open(fileStream)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.TravelExpenseReport" xml:space="preserve">
    <value>
            'Load template file
            Dim fileStream = GetResourceStream("Travel expense report.xlsx")
            workbook.Open(fileStream)
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.VB.Tutorial" xml:space="preserve">
    <value>
        Dim worksheet As IWorksheet = workbook.Worksheets(0)
        '-----------------------------Set Value------------------------------
        worksheet.Range("B3:C7").Value = New Object(,)  {
            {"ITEM", "AMOUNT"},
            {"Income 1", 2500},
            {"Income 2", 1000},
            {"Income 3", 250},
            {"Other", 250}
        }
        worksheet.Range("B10:C23").Value = New Object(,)  {
            {"ITEM", "AMOUNT"},
            {"Rent/mortgage", 800},
            {"Electric", 120},
            {"Gas", 50},
            {"Cell phone", 45},
            {"Groceries", 500},
            {"Car payment", 273},
            {"Auto expenses", 120},
            {"Student loans", 50},
            {"Credit cards", 100},
            {"Auto Insurance", 78},
            {"Personal care", 50},
            {"Entertainment", 100},
            {"Miscellaneous", 50}
        }

        worksheet.Range("B2:C2").Merge()
        worksheet.Range!B2.Value = "MONTHLY INCOME"
        worksheet.Range("B9:C9").Merge()
        worksheet.Range!B9.Value = "MONTHLY EXPENSES"
        worksheet.Range("E2:G2").Merge()
        worksheet.Range!E2.Value = "PERCENTAGE OF INCOME SPENT"
        worksheet.Range("E5:G5").Merge()
        worksheet.Range!E5.Value = "SUMMARY"
        worksheet.Range("E3:F3").Merge()
        worksheet.Range!E9.Value = "BALANCE"
        worksheet.Range!E6.Value = "Total Monthly Income"
        worksheet.Range!E7.Value = "Total Monthly Expenses"

        '--------------------------------Set Height &amp; Width--------------------------------
        worksheet.StandardHeight = 26.25
        worksheet.StandardWidth = 8.43
        worksheet.Range("2:24").RowHeight = 27
        worksheet.Range("A:A").ColumnWidth = 2.855
        worksheet.Range("B:B").ColumnWidth = 33.285
        worksheet.Range("C:C").ColumnWidth = 25.57
        worksheet.Range("D:D").ColumnWidth = 1
        worksheet.Range("E:F").ColumnWidth = 25.57
        worksheet.Range("G:G").ColumnWidth = 14.285

        '------------------------------Set Table--------------------------------------
        Dim incomeTable As ITable = worksheet.Tables.Add(worksheet.Range("B3:C7"), True)
        incomeTable.Name = "tblIncome"
        incomeTable.TableStyle = workbook.TableStyles("TableStyleMedium4")
        Dim expensesTable As ITable = worksheet.Tables.Add(worksheet.Range("B10:C23"), True)
        expensesTable.Name = "tblExpenses"
        expensesTable.TableStyle = workbook.TableStyles("TableStyleMedium4")

        '------------------------------Set Formulas-----------------------------------
        worksheet.Names.Add("TotalMonthlyIncome", "=SUM(tblIncome[AMOUNT])")
        worksheet.Names.Add("TotalMonthlyExpenses", "=SUM(tblExpenses[AMOUNT])")
        worksheet.Range!E3.Formula = "=TotalMonthlyExpenses"
        worksheet.Range!G3.Formula = "=TotalMonthlyExpenses/TotalMonthlyIncome"
        worksheet.Range!G6.Formula = "=TotalMonthlyIncome"
        worksheet.Range!G7.Formula = "=TotalMonthlyExpenses"
        worksheet.Range!G9.Formula = "=TotalMonthlyIncome-TotalMonthlyExpenses"

        '----------------------------Set Styles-------------------------
        Dim currencyStyle As IStyle = workbook.Styles("Currency")
        currencyStyle.IncludeAlignment = True
        currencyStyle.HorizontalAlignment = HorizontalAlignment.Left
        currencyStyle.VerticalAlignment = VerticalAlignment.Bottom
        currencyStyle.NumberFormat = "$#,##0.00"

        Dim heading1Style As IStyle = workbook.Styles("Heading 1")
        heading1Style.IncludeAlignment = True
        heading1Style.HorizontalAlignment = HorizontalAlignment.Center
        heading1Style.VerticalAlignment = VerticalAlignment.Center
        heading1Style.Font.Name = "Century Gothic"
        heading1Style.Font.Bold = True
        heading1Style.Font.Size = 11
        heading1Style.Font.Color = Color.White
        heading1Style.IncludeBorder = False
        heading1Style.IncludePatterns = True
        heading1Style.Interior.Color = Color.FromArgb(32, 61, 64)

        Dim percentStyle As IStyle = workbook.Styles("Percent")
        percentStyle.IncludeAlignment = True
        percentStyle.HorizontalAlignment = HorizontalAlignment.Center
        percentStyle.IncludeFont = True
        percentStyle.Font.Color = Color.FromArgb(32, 61, 64)
        percentStyle.Font.Name = "Century Gothic"
        percentStyle.Font.Bold = True
        percentStyle.Font.Size = 14
        worksheet.SheetView.DisplayGridlines = False
        worksheet.Range("C4:C7, C11:C23, G6:G7, G9").Style = currencyStyle
        worksheet.Range("B2, B9, E2, E5").Style = heading1Style
        worksheet.Range!G3.Style = percentStyle
        worksheet.Range("E6:G6").Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Medium
        worksheet.Range("E6:G6").Borders(BordersIndex.EdgeBottom).Color = Color.FromArgb(32, 61, 64)
        worksheet.Range("E7:G7").Borders(BordersIndex.EdgeBottom).LineStyle = BorderLineStyle.Medium
        worksheet.Range("E7:G7").Borders(BordersIndex.EdgeBottom).Color = Color.FromArgb(32, 61, 64)
        worksheet.Range("E9:G9").Interior.Color = Color.FromArgb(32, 61, 64)
        worksheet.Range("E9:G9").HorizontalAlignment = HorizontalAlignment.Left
        worksheet.Range("E9:G9").VerticalAlignment = VerticalAlignment.Center
        worksheet.Range("E9:G9").Font.Name = "Century Gothic"
        worksheet.Range("E9:G9").Font.Bold = True
        worksheet.Range("E9:G9").Font.Size = 11
        worksheet.Range("E9:G9").Font.Color = Color.White
        worksheet.Range("E3:F3").Borders.Color = Color.FromArgb(32, 61, 64)

        '----------------------------Set Conditional Format-------------------------
        Dim dataBar As IDataBar = worksheet.Range!E3.FormatConditions.AddDatabar()
        dataBar.MinPoint.Type = ConditionValueTypes.Number
        dataBar.MinPoint.Value = 1
        dataBar.MaxPoint.Type = ConditionValueTypes.Number
        dataBar.MaxPoint.Value = "=TotalMonthlyIncome"
        dataBar.BarFillType = DataBarFillType.Gradient
        dataBar.BarColor.Color = Color.Red
        dataBar.ShowValue = False

        '--------------------------------Set Shape--------------------------------
        Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 339, 247, 316.5, 346)
        shape.Chart.ChartArea.Format.Line.Transparency = 1
        shape.Chart.ColumnGroups(0).Overlap = 0
        shape.Chart.ColumnGroups(0).GapWidth = 37

        Dim category_axis As IAxis = shape.Chart.Axes.Item(AxisType.Category)
        category_axis.Format.Line.Color.RGB = Color.Black
        category_axis.TickLabels.Font.Size = 11
        category_axis.TickLabels.Font.Color.RGB = Color.Black

        Dim series_axis As IAxis = shape.Chart.Axes.Item(AxisType.Value)
        series_axis.Format.Line.Weight = 1
        series_axis.Format.Line.Color.RGB = Color.Black
        series_axis.TickLabels.NumberFormat = "$###0"
        series_axis.TickLabels.Font.Size = 11
        series_axis.TickLabels.Font.Color.RGB = Color.Black

        Dim chartSeries As ISeries = shape.Chart.SeriesCollection.NewSeries()
        chartSeries.Formula = "=SERIES(""Simple Budget"",{""Income"",""Expenses""},'Sheet1'!$G$6:$G$7,1)"
        chartSeries.Points(0).Format.Fill.Color.RGB = Color.FromArgb(176, 21, 19)
        chartSeries.Points(1).Format.Fill.Color.RGB = Color.FromArgb(234, 99, 18)
        chartSeries.DataLabels.Font.Size = 11
        chartSeries.DataLabels.Font.Color.RGB = Color.Black
        chartSeries.DataLabels.ShowValue = True
        chartSeries.DataLabels.Position = DataLabelPosition.OutsideEnd
    </value>
  </data>
</root>