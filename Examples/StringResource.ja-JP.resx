<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessWorksheet.Name" xml:space="preserve">
    <value>ワークシートへのアクセス</value>
    <comment>Access a worksheet</comment>
  </data>
  <data name="ActivateWorksheet.Name" xml:space="preserve">
    <value>ワークシートのアクティブ化</value>
    <comment>Activate a worksheet</comment>
  </data>
  <data name="AddCustomTableStyle.Name" xml:space="preserve">
    <value>カスタムテーブルスタイルの追加</value>
    <comment>Add a custom table style</comment>
  </data>
  <data name="AddCustomThemes.Name" xml:space="preserve">
    <value>カスタムテーマの追加</value>
    <comment>Add custom themes</comment>
  </data>
  <data name="AddWorksheet.Name" xml:space="preserve">
    <value>ワークシートの追加</value>
    <comment>Add a worksheet</comment>
  </data>
  <data name="ApplyTableStyle.Name" xml:space="preserve">
    <value>テーブルへの組み込みスタイルの適用</value>
    <comment>Apply built-in styles to tables</comment>
  </data>
  <data name="ChangeWorkbookTheme.Name" xml:space="preserve">
    <value>ワークブックテーマの変更</value>
    <comment>Change workbook themes</comment>
  </data>
  <data name="ClearSparklineGroup.Name" xml:space="preserve">
    <value>スパークライングループのクリア</value>
    <comment>Clear the sparkline group</comment>
  </data>
  <data name="ClearSparklines.Name" xml:space="preserve">
    <value>スパークラインのクリア</value>
    <comment>Clear sparklines</comment>
  </data>
  <data name="ConfigSparklineSettings.Name" xml:space="preserve">
    <value>スパークライン設定の構成</value>
    <comment>Configure sparkline settings</comment>
  </data>
  <data name="ConfigWorksheet.Name" xml:space="preserve">
    <value>ワークシートプロパティの構成</value>
    <comment>Configure worksheet properties</comment>
  </data>
  <data name="CreateNewWorkbook.Name" xml:space="preserve">
    <value>新しいワークブックの作成</value>
    <comment>Create new workbook</comment>
  </data>
  <data name="CreateSparklines.Name" xml:space="preserve">
    <value>スパークラインの作成</value>
    <comment>Create sparklines</comment>
  </data>
  <data name="CreateTable.Name" xml:space="preserve">
    <value>テーブルの作成</value>
    <comment>Create a table</comment>
  </data>
  <data name="CustomSort.Name" xml:space="preserve">
    <value>カスタムパラメータでリストをソート</value>
    <comment>Sort list by custom parameter</comment>
  </data>
  <data name="DeleteWorksheet.Name" xml:space="preserve">
    <value>ワークシートの削除</value>
    <comment>Delete a worksheet</comment>
  </data>
  <data name="Filtering.Name" xml:space="preserve">
    <value>フィルタ処理</value>
    <comment>Filtering</comment>
  </data>
  <data name="GroupExistSparklines.Name" xml:space="preserve">
    <value>既存スパークラインのグループ化</value>
    <comment>Group exist sparklines</comment>
  </data>
  <data name="ImportExcelFileToWorkbook.Name" xml:space="preserve">
    <value>Excel ファイルのインポート</value>
    <comment>Import Excel file</comment>
  </data>
  <data name="ImportExcelFileWithPassword.Name" xml:space="preserve">
    <value>パスワード付き Excel ファイルのインポート</value>
    <comment>Import Excel file with password</comment>
  </data>
  <data name="InsertDeleteTableRowColumns.Name" xml:space="preserve">
    <value>テーブル行および列の挿入または削除</value>
    <comment>Insert or delete table rows and columns</comment>
  </data>
  <data name="PerformCalculationsInTable.Name" xml:space="preserve">
    <value>テーブル内の計算を実行</value>
    <comment>Perform calculations in the table</comment>
  </data>
  <data name="ProtectWorksheet.Name" xml:space="preserve">
    <value>ワークシートの保護</value>
    <comment>Protect worksheet</comment>
  </data>
  <data name="RemoveTable.Name" xml:space="preserve">
    <value>テーブルの削除</value>
    <comment>Remove table</comment>
  </data>
  <data name="SaveWorkbookToExcelFile.Name" xml:space="preserve">
    <value>Excel ファイルに保存</value>
    <comment>Save to Excel file</comment>
  </data>
  <data name="SaveWorkbookWithPassword.Name" xml:space="preserve">
    <value>パスワード付き Excel ファイルに保存</value>
    <comment>Save to Excel file with password</comment>
  </data>
  <data name="Sorting.Name" xml:space="preserve">
    <value>ソート</value>
    <comment>Sorting</comment>
  </data>
  <data name="SortRangeByFontColor.Name" xml:space="preserve">
    <value>フォントの色によるソート</value>
    <comment>Sort by font color</comment>
  </data>
  <data name="SortRangeByIcon.Name" xml:space="preserve">
    <value>アイコンによるソート</value>
    <comment>Sort by icon</comment>
  </data>
  <data name="SortRangeByInterior.Name" xml:space="preserve">
    <value>コンテンツによる範囲のソート</value>
    <comment>Sort range by content</comment>
  </data>
  <data name="SortRangeByValue.Name" xml:space="preserve">
    <value>値による範囲のソート</value>
    <comment>Sort range by value</comment>
  </data>
  <data name="Sparklines.Name" xml:space="preserve">
    <value>スパークライン</value>
    <comment>Sparklines</comment>
  </data>
  <data name="TableFilter.Name" xml:space="preserve">
    <value>テーブル範囲のフィルタ</value>
    <comment>Filter table range</comment>
  </data>
  <data name="Tables.Name" xml:space="preserve">
    <value>テーブル</value>
    <comment>Tables</comment>
  </data>
  <data name="TableSort.Name" xml:space="preserve">
    <value>テーブル範囲のソート</value>
    <comment>Sort table range</comment>
  </data>
  <data name="TextFilter.Name" xml:space="preserve">
    <value>テキストフィルタの適用</value>
    <comment>Apply text filter</comment>
  </data>
  <data name="Theme.Name" xml:space="preserve">
    <value>テーマ</value>
    <comment>Theme</comment>
  </data>
  <data name="UnprotectWorksheet.Name" xml:space="preserve">
    <value>ワークシートの保護の解除</value>
    <comment>Unprotect worksheet</comment>
  </data>
  <data name="UseDateAxis.Name" xml:space="preserve">
    <value>日付軸の使用</value>
    <comment>Use date axis</comment>
  </data>
  <data name="ValueFilter.Descrip" xml:space="preserve">
    <value>値フィルタの作成</value>
    <comment>Create value filter</comment>
  </data>
  <data name="ValueFilter.Name" xml:space="preserve">
    <value>値フィルタ</value>
    <comment>Value Filter</comment>
  </data>
  <data name="Workbook.Name" xml:space="preserve">
    <value>ワークブック</value>
    <comment>Workbook</comment>
  </data>
  <data name="Worksheets.Name" xml:space="preserve">
    <value>ワークシート</value>
    <comment>Worksheets</comment>
  </data>
  <data name="AddSlicersForTable.Name" xml:space="preserve">
    <value>スライサーをテーブルに追加</value>
    <comment>Add slicers to tables</comment>
  </data>
  <data name="Slicer.Name" xml:space="preserve">
    <value>スライサー</value>
    <comment>Slicer</comment>
  </data>
  <data name="AddSlicersForPivotTable.Name" xml:space="preserve">
    <value>スライサーをピボットテーブルに追加</value>
    <comment>Add slicers to pivot tables</comment>
  </data>
  <data name="DoTableFilter.Name" xml:space="preserve">
    <value>テーブルをスライサーで自動フィルタ処理</value>
    <comment>Auto-filter table with slicer</comment>
  </data>
  <data name="ApplySlicerStyle.Name" xml:space="preserve">
    <value>スライサーに組み込みスタイルを適用</value>
    <comment>Apply built-in style to slicer</comment>
  </data>
  <data name="UseSlicerDoFilter.Name" xml:space="preserve">
    <value>スライサーを使用してテーブルをフィルタ処理</value>
    <comment>Use slicer to filter table</comment>
  </data>
  <data name="ConfigSlicerLayout.Name" xml:space="preserve">
    <value>スライサーレイアウトの構成</value>
    <comment>Configure slicer layout</comment>
  </data>
  <data name="CreateConnectorShape.Name" xml:space="preserve">
    <value>接続線図形の作成</value>
    <comment>Create connector shape</comment>
  </data>
  <data name="Shape.Name" xml:space="preserve">
    <value>図形</value>
    <comment>Shape</comment>
  </data>
  <data name="ConnectShapesByConnector.Name" xml:space="preserve">
    <value>図形を接続線図形で接続</value>
    <comment>Connect shapes with connector shape</comment>
  </data>
  <data name="ConfigShapeWithPictureFill.Name" xml:space="preserve">
    <value>図形のピクチャ塗りつぶしの設定</value>
    <comment>Set shape's picture fill</comment>
  </data>
  <data name="ConfigShapeWithGradientFill.Name" xml:space="preserve">
    <value>図形のグラデーション塗りつぶしの設定</value>
    <comment>Set shape's gradient fill</comment>
  </data>
  <data name="ConfigShapeWithPatternFill.Name" xml:space="preserve">
    <value>図形のパターン塗りつぶしの設定</value>
    <comment>Set shape's pattern fill</comment>
  </data>
  <data name="ConfigShapeWithTextureFill.Name" xml:space="preserve">
    <value>図形のテクスチャ塗りつぶしの設定</value>
    <comment>Set shape's texture fill</comment>
  </data>
  <data name="ConfigShapeWithSolidFill.Name" xml:space="preserve">
    <value>図形の単色塗りつぶしの設定</value>
    <comment>Set shape's solid fill</comment>
  </data>
  <data name="ConfigShapeLine.Name" xml:space="preserve">
    <value>図形のライン形式の設定</value>
    <comment>Set shape's line format</comment>
  </data>
  <data name="ConfigShape3DFormat.Name" xml:space="preserve">
    <value>図形の 3D 形式の設定</value>
    <comment>Set shape's 3D format</comment>
  </data>
  <data name="SetShapeText.Name" xml:space="preserve">
    <value>図形のテキストの設定</value>
    <comment>Set shape's text</comment>
  </data>
  <data name="CreatePicture.Name" xml:space="preserve">
    <value>画像の作成</value>
    <comment>Create picture</comment>
  </data>
  <data name="DeletePicture.Name" xml:space="preserve">
    <value>画像の削除</value>
    <comment>Delete picture</comment>
  </data>
  <data name="MergeCells.Name" xml:space="preserve">
    <value>セルの結合</value>
    <comment>Merge cells</comment>
  </data>
  <data name="RangeOperations.Name" xml:space="preserve">
    <value>範囲（Range）の操作</value>
    <comment>Range Operations</comment>
  </data>
  <data name="AccessEachAreaOfRange.Name" xml:space="preserve">
    <value>範囲内の領域へのアクセス</value>
    <comment>Access areas in a range</comment>
  </data>
  <data name="GetRangeRowCountColumnCount.Name" xml:space="preserve">
    <value>行と列のカウントの取得</value>
    <comment>Get row and column count</comment>
  </data>
  <data name="AccessCellsRowsColumns.Name" xml:space="preserve">
    <value>範囲内のセル、行、列へのアクセス</value>
    <comment>Access cells, rows and columns in a range</comment>
  </data>
  <data name="GetWorksheetUsedRange.Name" xml:space="preserve">
    <value>使用範囲の取得</value>
    <comment>Get used range</comment>
  </data>
  <data name="SetRowHeightColumnWidth.Name" xml:space="preserve">
    <value>行の高さと列の幅の設定</value>
    <comment>Set row height and column width</comment>
  </data>
  <data name="AccessRange.Name" xml:space="preserve">
    <value>範囲へのアクセス</value>
    <comment>Access a range</comment>
  </data>
  <data name="InsertCellsDeleteCells.Name" xml:space="preserve">
    <value>セルの挿入または削除</value>
    <comment>Insert or delete cells</comment>
  </data>
  <data name="InsertDeleteRowsColumns.Name" xml:space="preserve">
    <value>行および列の挿入または削除</value>
    <comment>Insert or delete rows and columns</comment>
  </data>
  <data name="CutCopyRange.Name" xml:space="preserve">
    <value>範囲の切り取りまたはコピー</value>
    <comment>Cut or copy ranges</comment>
  </data>
  <data name="GetFeatureRelatedUsedRange.Name" xml:space="preserve">
    <value>使用範囲の取得の応用</value>
    <comment>Get used range features</comment>
  </data>
  <data name="PivotTable.Name" xml:space="preserve">
    <value>ピボットテーブル</value>
    <comment>Pivot Table</comment>
  </data>
  <data name="CreatePivotTable.Name" xml:space="preserve">
    <value>ピボットテーブルの作成</value>
    <comment>Create pivot tables</comment>
  </data>
  <data name="ChangeDataFieldSummarizeFunction.Name" xml:space="preserve">
    <value>フィールドの集計関数の設定</value>
    <comment>Set field's summarize function</comment>
  </data>
  <data name="ModifySubtotalsForPivotField.Name" xml:space="preserve">
    <value>ピボットフィールドの小計タイプの変更</value>
    <comment>Modify pivot field subtotal type</comment>
  </data>
  <data name="FilterItemsInPivotTable.Name" xml:space="preserve">
    <value>ピボットテーブル内の項目のフィルタ</value>
    <comment>Filter items in pivot tables</comment>
  </data>
  <data name="RefreshPivotTable.Name" xml:space="preserve">
    <value>ピボットテーブルの更新</value>
    <comment>Refresh pivot table</comment>
  </data>
  <data name="DeleteHyperlinks.Name" xml:space="preserve">
    <value>ハイパーリンクの削除</value>
    <comment>Delete hyperlinks</comment>
  </data>
  <data name="CreateRangeGroup.Name" xml:space="preserve">
    <value>範囲グループの作成</value>
    <comment>Create range group</comment>
  </data>
  <data name="UngroupRange.Name" xml:space="preserve">
    <value>範囲のグループ解除</value>
    <comment>Ungroup range</comment>
  </data>
  <data name="ClearOutline.Name" xml:space="preserve">
    <value>アウトラインのクリア</value>
    <comment>Clear outline</comment>
  </data>
  <data name="ShowSpecificLevel.Name" xml:space="preserve">
    <value>特定のレベルのグループを表示</value>
    <comment>Show specific level group</comment>
  </data>
  <data name="AddCustomName.Name" xml:space="preserve">
    <value>カスタム名の追加</value>
    <comment>Add custom names</comment>
  </data>
  <data name="Grouping.Name" xml:space="preserve">
    <value>グループ化</value>
    <comment>Grouping</comment>
  </data>
  <data name="Hyperlinks.Name" xml:space="preserve">
    <value>ハイパーリンク</value>
    <comment>Hyperlinks</comment>
  </data>
  <data name="Picture.Name" xml:space="preserve">
    <value>画像</value>
    <comment>Picture</comment>
  </data>
  <data name="ConfigWorkbookReferenceStyle.Name" xml:space="preserve">
    <value>ワークブックの参照スタイルの設定</value>
    <comment>Set workbook's reference style</comment>
  </data>
  <data name="Formulas.Name" xml:space="preserve">
    <value>数式</value>
    <comment>Formulas</comment>
  </data>
  <data name="UseArrayFormula.Name" xml:space="preserve">
    <value>配列式の使用</value>
    <comment>Use array formulas</comment>
  </data>
  <data name="UseTableFormula.Name" xml:space="preserve">
    <value>テーブル式の使用</value>
    <comment>Use table formulas</comment>
  </data>
  <data name="DirtyAndCalculation.Name" xml:space="preserve">
    <value>Dirty メソッドと Calculate メソッド</value>
    <comment>Dirty and Calculate methods</comment>
  </data>
  <data name="SetRangeValue.Name" xml:space="preserve">
    <value>範囲に値を設定</value>
    <comment>Set values to a range</comment>
  </data>
  <data name="ToJsonFromJson.Name" xml:space="preserve">
    <value>JSON形式の操作(SpreadJSを利用)</value>
    <comment>ToJson and FromJson</comment>
  </data>
  <data name="CustomNumberFormat.Name" xml:space="preserve">
    <value>カスタム数値書式の設定</value>
    <comment>Set custom number format</comment>
  </data>
  <data name="DateAndTimeFormat.Name" xml:space="preserve">
    <value>日付/時刻書式の設定</value>
    <comment>Set date and time format</comment>
  </data>
  <data name="Formatting.Name" xml:space="preserve">
    <value>書式設定</value>
    <comment>Formatting</comment>
  </data>
  <data name="NumberFormats.Name" xml:space="preserve">
    <value>数値書式の設定</value>
    <comment>Set number format</comment>
  </data>
  <data name="HAlignVAlign.Name" xml:space="preserve">
    <value>水平／垂直方向の配置設定</value>
    <comment>Set horizontal and vertical alignment</comment>
  </data>
  <data name="ShrinkToFit.Name" xml:space="preserve">
    <value>縮小して全体を表示</value>
    <comment>Shrink to fit</comment>
  </data>
  <data name="RotateCellContents.Name" xml:space="preserve">
    <value>セルコンテンツの回転</value>
    <comment>Rotate cell contents</comment>
  </data>
  <data name="WrapText.Name" xml:space="preserve">
    <value>テキストの折り返し</value>
    <comment>Wrap text</comment>
  </data>
  <data name="AddBordersToCell.Name" xml:space="preserve">
    <value>セルに境界線を追加</value>
    <comment>Add borders to cell</comment>
  </data>
  <data name="AddingBordersToRange.Name" xml:space="preserve">
    <value>範囲に境界線を追加</value>
    <comment>Add borders to range</comment>
  </data>
  <data name="FontColor.Name" xml:space="preserve">
    <value>フォント色の設定</value>
    <comment>Set font color</comment>
  </data>
  <data name="FontEffect.Name" xml:space="preserve">
    <value>フォント効果の設定</value>
    <comment>Set font effect</comment>
  </data>
  <data name="FontName.Name" xml:space="preserve">
    <value>フォント名の設定</value>
    <comment>Set font name</comment>
  </data>
  <data name="FontSize.Name" xml:space="preserve">
    <value>フォントサイズの設定</value>
    <comment>Set font size</comment>
  </data>
  <data name="FontStyle.Name" xml:space="preserve">
    <value>フォントスタイルの設定</value>
    <comment>Set font style</comment>
  </data>
  <data name="FontUnderline.Name" xml:space="preserve">
    <value>フォント下線の設定</value>
    <comment>Set font underline</comment>
  </data>
  <data name="LinearGradientFill.Name" xml:space="preserve">
    <value>直線グラデーション塗りつぶしの設定</value>
    <comment>Set linear gradient fill</comment>
  </data>
  <data name="PatternFill.Name" xml:space="preserve">
    <value>パターン塗りつぶしの設定</value>
    <comment>Set pattern fill</comment>
  </data>
  <data name="RectangularGradientFill.Name" xml:space="preserve">
    <value>四角形グラデーション塗りつぶしの設定</value>
    <comment>Set rectangular gradient fill</comment>
  </data>
  <data name="SolidFill.Name" xml:space="preserve">
    <value>単色塗りつぶしの設定</value>
    <comment>Set solid fill</comment>
  </data>
  <data name="TextOrientation.Name" xml:space="preserve">
    <value>テキスト方向の設定</value>
    <comment>Set text orientation</comment>
  </data>
  <data name="Alignment.Name" xml:space="preserve">
    <value>配置</value>
    <comment>Alignment</comment>
  </data>
  <data name="ApplyStyle.Name" xml:space="preserve">
    <value>範囲にスタイルを適用</value>
    <comment>Apply style to range</comment>
  </data>
  <data name="Borders.Name" xml:space="preserve">
    <value>境界線</value>
    <comment>Borders</comment>
  </data>
  <data name="CreateCustomStyle.Name" xml:space="preserve">
    <value>カスタムスタイルの作成</value>
    <comment>Create custom style</comment>
  </data>
  <data name="Fill.Name" xml:space="preserve">
    <value>塗りつぶし</value>
    <comment>Fill</comment>
  </data>
  <data name="Fonts.Name" xml:space="preserve">
    <value>フォント</value>
    <comment>Fonts</comment>
  </data>
  <data name="GetDisplayFormat.Name" xml:space="preserve">
    <value>表示形式の取得</value>
    <comment>Get display format</comment>
  </data>
  <data name="Protection.Name" xml:space="preserve">
    <value>保護</value>
    <comment>Protection</comment>
  </data>
  <data name="SetRangeFormulaHidden.Name" xml:space="preserve">
    <value>数式の非表示</value>
    <comment>Hide formula</comment>
  </data>
  <data name="SetRangeLocked.Name" xml:space="preserve">
    <value>範囲のロック</value>
    <comment>Lock range</comment>
  </data>
  <data name="AddComment.Name" xml:space="preserve">
    <value>セルにコメントを追加</value>
    <comment>Add comment to cell</comment>
  </data>
  <data name="ClearComment.Name" xml:space="preserve">
    <value>コメントのクリア</value>
    <comment>Clear comments</comment>
  </data>
  <data name="Comments.Name" xml:space="preserve">
    <value>コメント</value>
    <comment>Comments</comment>
  </data>
  <data name="ConfigCommentLayout.Name" xml:space="preserve">
    <value>コメントのレイアウトの構成</value>
    <comment>Configure comment's layout</comment>
  </data>
  <data name="SetRichTextForComment.Name" xml:space="preserve">
    <value>コメントにリッチテキストを設定</value>
    <comment>Set rich text for comment</comment>
  </data>
  <data name="ConditionalFormatting.Name" xml:space="preserve">
    <value>条件付き書式設定</value>
    <comment>Conditional Formatting</comment>
  </data>
  <data name="CreateAverageRule.Name" xml:space="preserve">
    <value>平均ルールの作成</value>
    <comment>Create average rule</comment>
  </data>
  <data name="CreateCellValueRule.Name" xml:space="preserve">
    <value>セル値ルールの作成</value>
    <comment>Create cell value rule</comment>
  </data>
  <data name="CreateDatabBarRule.Name" xml:space="preserve">
    <value>データバールールの作成</value>
    <comment>Create data bar rule</comment>
  </data>
  <data name="CreateExpressionRule.Name" xml:space="preserve">
    <value>式ルールの作成</value>
    <comment>Create expression rule</comment>
  </data>
  <data name="CreateIconSetRule.Name" xml:space="preserve">
    <value>アイコン設定ルールの作成</value>
    <comment>Create icon set rule</comment>
  </data>
  <data name="CreateMultiRuleForRange.Name" xml:space="preserve">
    <value>1 つの範囲に複数のルールを作成</value>
    <comment>Create multiple rules for a range</comment>
  </data>
  <data name="CreateThreeColorScaleRule.Name" xml:space="preserve">
    <value>3 色スケールルールの作成</value>
    <comment>Create three color scale rule</comment>
  </data>
  <data name="CreateTopBottomRule.Name" xml:space="preserve">
    <value>上位/下位ルールの作成</value>
    <comment>Create top bottom rule</comment>
  </data>
  <data name="CreateTwoColorScaleRule.Name" xml:space="preserve">
    <value>2 色スケールルールの作成</value>
    <comment>Create two color scale rule</comment>
  </data>
  <data name="CreateUniqueRule.Name" xml:space="preserve">
    <value>一意ルールの作成</value>
    <comment>Create unique rule</comment>
  </data>
  <data name="DeleteConditionalFormatRules.Name" xml:space="preserve">
    <value>条件付き書式設定ルールの削除</value>
    <comment>Delete conditional format rules</comment>
  </data>
  <data name="RootExample.Descrip" xml:space="preserve">
    <value>DioDocs for Excel の機能</value>
    <comment>GrapeCity Documents for Excel Features</comment>
  </data>
  <data name="RootExample.Name" xml:space="preserve">
    <value>すべて</value>
    <comment>All</comment>
  </data>
  <data name="CreateCustomValidation.Name" xml:space="preserve">
    <value>カスタム入力規則の作成</value>
    <comment>Create custom validation</comment>
  </data>
  <data name="CreateDateValidation.Name" xml:space="preserve">
    <value>日付入力規則の作成</value>
    <comment>Create date validation</comment>
  </data>
  <data name="CreateDecimalValidation.Name" xml:space="preserve">
    <value>小数点入力規則の作成</value>
    <comment>Create decimal validation</comment>
  </data>
  <data name="CreateListValidation.Name" xml:space="preserve">
    <value>リスト入力規則の作成</value>
    <comment>Create list validation</comment>
  </data>
  <data name="CreateTextLength.Name" xml:space="preserve">
    <value>テキスト長さ入力規則の作成</value>
    <comment>Create text length validation</comment>
  </data>
  <data name="CreateTimeValidation.Name" xml:space="preserve">
    <value>時間入力規則の作成</value>
    <comment>Create time validation</comment>
  </data>
  <data name="CreateWholeNumberValidation.Name" xml:space="preserve">
    <value>整数入力規則の作成</value>
    <comment>Create whole number validation</comment>
  </data>
  <data name="DataValidation.Name" xml:space="preserve">
    <value>データ検証</value>
    <comment>Data Validation</comment>
  </data>
  <data name="DeleteValidation.Name" xml:space="preserve">
    <value>入力規則の削除</value>
    <comment>Delete validation</comment>
  </data>
  <data name="ModifyValidation.Name" xml:space="preserve">
    <value>検証の変更</value>
    <comment>Modify validation</comment>
  </data>
  <data name="AddSeries.Name" xml:space="preserve">
    <value>チャートの系列の追加</value>
    <comment>Add series for chart</comment>
  </data>
  <data name="Charts.Name" xml:space="preserve">
    <value>チャート</value>
    <comment>Charts</comment>
  </data>
  <data name="ConfigBubbleChartLayout.Name" xml:space="preserve">
    <value>バブルチャートのレイアウトの構成</value>
    <comment>Configure bubble chart's layout</comment>
  </data>
  <data name="ConfigDataLabelText.Name" xml:space="preserve">
    <value>データラベルのテキストの構成</value>
    <comment>Configure data label's text</comment>
  </data>
  <data name="ConfigDataPointFormat.Name" xml:space="preserve">
    <value>データポイントの書式の構成</value>
    <comment>Configure data point's format</comment>
  </data>
  <data name="CreateChart.Name" xml:space="preserve">
    <value>チャートの作成</value>
    <comment>Create chart</comment>
  </data>
  <data name="CreateDropLine.Name" xml:space="preserve">
    <value>ドロップラインの作成</value>
    <comment>Create drop line</comment>
  </data>
  <data name="CreateHiLoLine.Name" xml:space="preserve">
    <value>高値 - 安値ラインの作成</value>
    <comment>Create high-low line</comment>
  </data>
  <data name="CreateTrendline.Name" xml:space="preserve">
    <value>傾向線の作成</value>
    <comment>Create trend line</comment>
  </data>
  <data name="DeleteChart.Name" xml:space="preserve">
    <value>チャートの削除</value>
    <comment>Delete chart</comment>
  </data>
  <data name="Series.Name" xml:space="preserve">
    <value>系列</value>
    <comment>Series</comment>
  </data>
  <data name="SetVaryColorForColumnChart.Name" xml:space="preserve">
    <value>縦棒グラフの色を可変に設定</value>
    <comment>Set column chart colors to vary</comment>
  </data>
  <data name="CreateConnectorLine.Name" xml:space="preserve">
    <value>円グラフセグメントの接続線の作成</value>
    <comment>Create connector line for pie of pie chart</comment>
  </data>
  <data name="CreateSeriesLine.Name" xml:space="preserve">
    <value>縦棒グラフの系列線の作成</value>
    <comment>Create series line for column chart</comment>
  </data>
  <data name="ExtendSeries.Name" xml:space="preserve">
    <value>既存の系列線への新しいポイントの追加</value>
    <comment>Add new points for existing series</comment>
  </data>
  <data name="CreateUpDownBars.Name" xml:space="preserve">
    <value>折れ線グラフのローソクの作成</value>
    <comment>Create up down bars for line chart</comment>
  </data>
  <data name="AccessTableRanges.Name" xml:space="preserve">
    <value>各テーブル範囲へのアクセス</value>
    <comment>Access each table range</comment>
  </data>
  <data name="Axes.Name" xml:space="preserve">
    <value>軸</value>
    <comment>Axis</comment>
  </data>
  <data name="ConfigCategoryAxesFormat.Name" xml:space="preserve">
    <value>カテゴリ軸の構成</value>
    <comment>Configure category axis style</comment>
  </data>
  <data name="ConfigAxisTitle.Name" xml:space="preserve">
    <value>軸タイトルスタイルの構成</value>
    <comment>Configure axis title style</comment>
  </data>
  <data name="ConfigCategoryAxisUnits.Name" xml:space="preserve">
    <value>データ軸単位の設定</value>
    <comment>Set data axis units</comment>
  </data>
  <data name="ConfigDisplayUnitLabel.Name" xml:space="preserve">
    <value>表示単位ラベルスタイルの構成</value>
    <comment>Configure display unit label style</comment>
  </data>
  <data name="ConfigGridlines.Name" xml:space="preserve">
    <value>グリッド線スタイルの構成</value>
    <comment>Configure gridline style</comment>
  </data>
  <data name="ConfigTickMarkLabel.Name" xml:space="preserve">
    <value>目盛りマークラベルスタイルの設定</value>
    <comment>Set tick mark label style</comment>
  </data>
  <data name="ConfigValueAxisUnits.Name" xml:space="preserve">
    <value>値軸単位の設定</value>
    <comment>Set value axis units</comment>
  </data>
  <data name="SetAxisScaleType.Name" xml:space="preserve">
    <value>値軸スケールタイプの設定</value>
    <comment>Set value axis scale type</comment>
  </data>
  <data name="SetAxisTickMark.Name" xml:space="preserve">
    <value>軸目盛りマークレイアウトの構成</value>
    <comment>Configure axis tick mark layout</comment>
  </data>
  <data name="ChartJustPlotVisibleCell.Name" xml:space="preserve">
    <value>表示されているセルのみをプロット</value>
    <comment>Plot only visible cells</comment>
  </data>
  <data name="ConfigChartAreaFormat.Name" xml:space="preserve">
    <value>チャート領域の書式設定の構成</value>
    <comment>Configure chart area format</comment>
  </data>
  <data name="ConfigChartFloorStyle.Name" xml:space="preserve">
    <value>3Dチャート床面の構成</value>
    <comment>Configure chart floor style</comment>
  </data>
  <data name="ConfigChartTitleStyle.Name" xml:space="preserve">
    <value>チャートタイトルスタイルの構成</value>
    <comment>Configure chart title style</comment>
  </data>
  <data name="ConfigChartWallStyle.Name" xml:space="preserve">
    <value>3Dチャート壁面の構成</value>
    <comment>Configure chart walls style</comment>
  </data>
  <data name="ConfigLegendEntryFontStyle.Name" xml:space="preserve">
    <value>凡例エントリのフォントスタイルの構成</value>
    <comment>Configure legend entry font style</comment>
  </data>
  <data name="ConfigLegendPositionAndLayout.Name" xml:space="preserve">
    <value>凡例の位置とレイアウトの構成</value>
    <comment>Configure legend position and layout</comment>
  </data>
  <data name="ConfigPlotAreaFormat.Name" xml:space="preserve">
    <value>プロット領域の書式設定の構成</value>
    <comment>Configure plot area format</comment>
  </data>
  <data name="BloodPressureTracker.Name" xml:space="preserve">
    <value>血圧ログ[英語データ]</value>
    <comment>Blood pressure tracker</comment>
  </data>
  <data name="UseCases.Name" xml:space="preserve">
    <value>ユースケース</value>
    <comment>Use Cases</comment>
  </data>
  <data name="ToDoListWithProgressTracker.Name" xml:space="preserve">
    <value>To-Do リスト（ルール、検証機能付き）</value>
    <comment>To do list with progress tracker</comment>
  </data>
  <data name="CostAnalysisWithParetoChart.Name" xml:space="preserve">
    <value>パレート図によるコスト分析</value>
    <comment>Cost analysis with Pareto chart</comment>
  </data>
  <data name="DateDynamicFilter.Name" xml:space="preserve">
    <value>日付の動的フィルタ処理</value>
    <comment>Filter date dynamically</comment>
  </data>
  <data name="BidTracker.Name" xml:space="preserve">
    <value>入札管理[英語データ]</value>
    <comment>Bid tracker</comment>
  </data>
  <data name="PersonalAddressBook.Name" xml:space="preserve">
    <value>連絡先リスト（シートスタイルの設定）</value>
    <comment>Personal address book</comment>
  </data>
  <data name="CustomerProfitabilityAnalysis.Name" xml:space="preserve">
    <value>顧客採算性分析[英語データ]</value>
    <comment>Customer profitability analysis</comment>
  </data>
  <data name="DateFiltering.Name" xml:space="preserve">
    <value>日付フィルタ</value>
    <comment>Date Filter</comment>
  </data>
  <data name="FilteringByColor.Name" xml:space="preserve">
    <value>色に基づくフィルタ</value>
    <comment>Filter by color</comment>
  </data>
  <data name="FilteringByIcon.Name" xml:space="preserve">
    <value>アイコンに基づくフィルタ</value>
    <comment>Filter by icon</comment>
  </data>
  <data name="NumberFiltering.Name" xml:space="preserve">
    <value>数値フィルタ</value>
    <comment>Number Filter</comment>
  </data>
  <data name="TextFiltering.Name" xml:space="preserve">
    <value>テキストフィルタ</value>
    <comment>Text Filter</comment>
  </data>
  <data name="ChangeWorksheetFilterRange.Name" xml:space="preserve">
    <value>ワークシートフィルタ範囲の変更</value>
    <comment>Change worksheet filter range</comment>
  </data>
  <data name="ClearFilter.Name" xml:space="preserve">
    <value>ワークシートフィルタのクリア</value>
    <comment>Clear worksheet filter</comment>
  </data>
  <data name="DateFilter.Name" xml:space="preserve">
    <value>日付フィルタの適用</value>
    <comment>Apply date filter</comment>
  </data>
  <data name="FilterByNoFill.Name" xml:space="preserve">
    <value>塗りつぶしなしに基づくフィルタ</value>
    <comment>Filter by no fill</comment>
  </data>
  <data name="FilterByAutomaticFontColor.Name" xml:space="preserve">
    <value>自動フォント色に基づくフィルタ</value>
    <comment>Filter by automatic font color</comment>
  </data>
  <data name="FilterByCellColor.Name" xml:space="preserve">
    <value>セル色に基づくフィルタ</value>
    <comment>Filter by cell color</comment>
  </data>
  <data name="FilterByFontColor.Name" xml:space="preserve">
    <value>フォント色に基づくフィルタ</value>
    <comment>Filter by font color</comment>
  </data>
  <data name="FilterByIcon.Name" xml:space="preserve">
    <value>アイコンに基づくフィルタ</value>
    <comment>Filter by icon</comment>
  </data>
  <data name="FilterByNoIcon.Name" xml:space="preserve">
    <value>アイコンなしに基づくフィルタ</value>
    <comment>Filter by no icon</comment>
  </data>
  <data name="MultiSelectFilter.Name" xml:space="preserve">
    <value>複数値フィルタの適用</value>
    <comment>Apply multiple value filter</comment>
  </data>
  <data name="ReApplyFilter.Name" xml:space="preserve">
    <value>フィルタの再適用</value>
    <comment>Reapply filter</comment>
  </data>
  <data name="Features.Name" xml:space="preserve">
    <value>機能</value>
    <comment>Features</comment>
  </data>
  <data name="Samples.Name" xml:space="preserve">
    <value>サンプル</value>
    <comment>Samples</comment>
  </data>
  <data name="MovieList.Name" xml:space="preserve">
    <value>ムービーリスト[英語データ]</value>
    <comment>Movie list</comment>
  </data>
  <data name="SimpleInvoice.Name" xml:space="preserve">
    <value>請求書[英語データ]</value>
    <comment>Simple invoice</comment>
  </data>
  <data name="CreateHyperlinks.Name" xml:space="preserve">
    <value>ハイパーリンクの作成</value>
    <comment>Create hyperlinks</comment>
  </data>
  <data name="BasicSalesReport.Name" xml:space="preserve">
    <value>売上報告表[英語データ]</value>
    <comment>Basic sales report</comment>
  </data>
  <data name="Axes.Descrip" xml:space="preserve">
    <value>## 軸
チャートには 3 つの軸タイプがあります。
- カテゴリ軸
- 値軸
- 系列軸

これらはすべて自動的に生成され、**コード内で追加または削除することはできません**。

Axis フォルダ内の例は、次のような軸関連の設定を指定する方法を示します。
- 軸タイトル
- 軸単位
- 表示単位ラベル
- グリッド線
- 目盛りマーク
- 目盛りマークラベル</value>
    <comment>## Axis
Charts contain three axis types: 
- category axis
- value axis
- series axis

They are all generated automatically, and you **can not add or delete them in code**.

Examples in the Axis folder demonstrate how to specify axis-related settings such as:
- axis titles
- axis units
- display unit labels
- gridlines
- tick marks
- tick mark labels</comment>
  </data>
  <data name="Charts.Descrip" xml:space="preserve">
    <value>## チャート
**DioDocs for Excel** は、総合的なチャート作成 API を提供します。

- **IWorksheet.AddChart** メソッドを使用して、ワークシートにチャートを追加します
-- **IShape** のインスタンスを返します 
-- **Chart** プロパティを使用して、新しく追加されたチャートにアクセスします
- **IChart.SeriesCollection.Add** メソッドを使用して、データ系列を追加します
- **IChart.ChartTitle** プロパティを使用して、チャートのタイトルをカスタマイズします
- **IChart.Legend** プロパティを使用して、チャートの凡例をカスタマイズします
- **ISeries** インタフェースを使用して、各データ系列にアクセスおよびカスタマイズします
- **IPoint** インタフェースを使用して、データ系列内の各データポイントをカスタマイズします
- **IDataLabel** インタフェースを使用して、系列内の各データラベルを追加、削除、またはカスタマイズします
- **IChartGroup** インタフェースを使用して、系列グループにアクセスおよびカスタマイズします
- **IAxis** インタフェースを使用して、値軸、カテゴリ軸、系列軸にアクセスおよびカスタマイズします

各チャート機能の基本的な使用方法に加えて、**ISeries.ChartType** を変更して複合チャートを作成できます。**ISeries.AxisGroup** プロパティを使用して、主軸または第二軸に系列をプロットするかどうかを指定することもできます。

チャートの各系列は、それぞれ 1 つのチャートグループに関連付けられます。通常は、チャートタイプごとに 1 つのチャートグループがあります。複合チャートを使用すると、複数のチャートグループが自動的に作成されます。

**IChartGroup** インタフェースは、グループ内のすべての系列の外観をカスタマイズするためのオプションを提供します。たとえば、以下のプロパティを特定のチャートタイプに対して設定できます。

- 円グラフに **StartAngle**
- 横棒または縦棒グラフに **GapWidth**
- 折れ線グラフの株価チャートオプションを表示または非表示にするために **HasHiLoLines** および **HasUpDownBars**

**IAxis** インタフェースは、チャート軸の外観をカスタマイズするためのオプションを提供します。たとえば、以下のプロパティを特定の軸タイプに対して設定できます。

- 値軸に **MinimumScale** および **MaximumScale**
- カテゴリ軸に **TickLabelSpacing**
- 値軸に **HasMajorGridlines** および **HasMinorGridlines**

多くのチャートオブジェクト（チャート領域、プロット領域、チャートタイトル、凡例、系列）には **Format** プロパティがあり、次の要素にアクセスして変更できます。

- 単色またはグラデーションの**塗りつぶし** 
- 破線または透過の**線**</value>
    <comment>## Charts
**GrapeCity Documents for Excel** provides a comprehensive charting API:

- Add charts to a worksheet using the **IWorksheet.AddChart** method
-- Returns an instance of **IShape** 
-- Use the **Chart** property to access the newly added chart
- Add data series with the **IChart.SeriesCollection.Add** method
- Cutomize chart titles with the **IChart.ChartTitle** property
- Cutomize chart legends with the **IChart.Legend** property
- Access and customize each data series through the **ISeries** interface
- Customize each data point in a data series using the **IPoint** interface
- Add, remove, or customize each data label in a series using the **IDataLabel** interface
- Access and customize a group of series through the **IChartGroup** interface
- Access and customize value axes, category axes, and series axes using the **IAxis** interface
- Add user shapes to a chart using the **IChart.Shapes.AddXXX** method

Over and above the basic usage of each chart feature, you can change the **ISeries.ChartType** to create combination charts. You can even specify whether to plot a series on the primary or secondary axis with the **ISeries.AxisGroup** property.

Each series in a chart is associated with a chart group. Typically there is one chart group for each chart type. Multiple chart groups are created automatically when you use combination charts. 

The **IChartGroup** interface provides options that let you customize the appearance of every series in a group. For example, you can set these properties on certain chart types:

- **StartAngle** for pie charts
- **GapWidth** for bar or column charts
- **HasHiLoLines** and **HasUpDownBars** shows or hides stock chart options on a line chart

The **IAxis** interface provides options that let you customize the appearance of chart axes. For example, you can these properties on certain axis types:

- **MinimumScale** and **MaximumScale** for a value axis
- **TickLabelSpacing** for a category axis
- **HasMajorGridlines** and **HasMinorGridlines** for a value axis

Many chart objects (chart area, plot area, chart title, legend, series) provide a **Format** property so you can access and modify:

- **fills** solid or gradient 
- **lines** dashed or transparency</comment>
  </data>
  <data name="Series.Descrip" xml:space="preserve">
    <value>## 系列
**系列**は、チャートで最も頻繁に使用される機能です。各グラフには 1 つ以上のデータ系列が含まれ、各系列は一連のデータポイントで構成されます。

以下の例は、チャートに系列を追加する方法および各系列の設定を指定する方法を示します。

- バブルチャートの **BubbleScale** および **SizeRepresents**
- **系列**書式設定の構成
- **系列タイプ**の変更
- **第二軸**の追加
- 単一系列縦棒グラフの **VaryByCategories** 色</value>
    <comment>## Series
**Series** is the most frequently used feature in charts. Each chart contains one or more data series, and each series consists of a group of data points. 

These examples demonstrate how to add a series to a chart, and how to specify settings for each series, such as:

- **BubbleScale** and **SizeRepresents** for bubble charts
- Configure **Series** format
- Change **Series Type**
- Add **Secondary Axis**
- **VaryByCategories** colors for single-series column charts</comment>
  </data>
  <data name="PersonalNetWorthCalculator.Name" xml:space="preserve">
    <value>個人資産管理表</value>
    <comment>Personal net worth calculator</comment>
  </data>
  <data name="Comments.Descrip" xml:space="preserve">
    <value>## コメント
DioDocs for Excel ではワークシートに注釈を付けることができます。セルについてコメントを書き込み、そこに含まれるデータに関する情報を追加できます。

**AddComment** メソッドを使用して、範囲にコメントを追加します。このメソッドは、**IComment** インタフェースのインスタンスを返します。

**Visible** プロパティを使用して常にコメントを表示します。

**Shape** プロパティを使用してコメントレイアウトを変更します。

**IShape** インタフェースの **TextFrame** プロパティを使用して、リッチテキストを作成します。実行のたびに異なるフォントスタイルを使用できます。</value>
    <comment>## Comments
GrapeCity Documents for Excel enables users to annotate worksheets. They can write comments for cells to add information about the data it contains.

Add comments for a range using the **AddComment** method. It returns an instance of the **IComment** interface. 

Always show comments with the **Visible** property. 

Modify comment layouts with the **Shape** property.

Create rich text using the **TextFrame** property of the **IShape** interface. You can use different font styles for each run.</comment>
  </data>
  <data name="SpreadSheetsViewer.Name" xml:space="preserve">
    <value>Spread.Sheets ビューア</value>
    <comment>Spread.Sheets Viewer</comment>
  </data>
  <data name="UseCases.Descrip" xml:space="preserve">
    <value>DioDocs for Excel でExcelファイルの入出力が可能です。
- **Code** コードで操作してExcel ファイルにエクスポートします。
- **Templates** Excel テンプレートをデータモデルにインポートし、コードを使用してコンテンツを追加し、Excel ファイルにエクスポートします。</value>
    <comment>Two more GrapeCity Documents for Excel usage scenarios are as follows:
- **Code** Use GrapeCity Documents for Excel API code, then export to an Excel file.
- **Templates** Import an Excel template to the GrapeCity Documents for Excel data model, then use GrapeCity Documents for Excel API code to add content, then export it to an Excel file.</comment>
  </data>
  <data name="ExcelReporting.Name" xml:space="preserve">
    <value>Excel 帳票作成</value>
    <comment>Excel Reporting</comment>
  </data>
  <data name="ExcelTemplates.Name" xml:space="preserve">
    <value>Excel テンプレート</value>
    <comment>Excel Templates</comment>
  </data>
  <data name="HiddenRowColumn.Name" xml:space="preserve">
    <value>行と列の非表示</value>
    <comment>Hide rows and columns</comment>
  </data>
  <data name="HomeInventory.Name" xml:space="preserve">
    <value>家財目録</value>
    <comment>Home inventory</comment>
  </data>
  <data name="CollapseGroup.Name" xml:space="preserve">
    <value>グループの折りたたみ</value>
    <comment>Collapse group</comment>
  </data>
  <data name="SimplePersonalBudget.Name" xml:space="preserve">
    <value>シンプルな家計簿</value>
    <comment>Simple personal budget</comment>
  </data>
  <data name="StudentCalendar.Name" xml:space="preserve">
    <value>受講カレンダー</value>
    <comment>Student calendar</comment>
  </data>
  <data name="TravelExpenseReport.Name" xml:space="preserve">
    <value>旅費精算書</value>
    <comment>Travel expense report</comment>
  </data>
  <data name="ConditionalFormatting.Descrip" xml:space="preserve">
    <value>## 条件付き書式設定
DioDocs for Excel では、ワークシートの行または列の重要な情報を強調表示できるように、個々のセルまたはセル範囲に対してセルの値に基づく条件付き書式設定ルールを作成できます。書式設定条件がセルの値と一致する場合は true と見なされ、セルは指定されたルールに従って書式設定されます。

DioDocs for Excel では、以下のような、さまざまな条件付き書式設定ルールがサポートされています。

- セル値
- 平均
- カラースケール
- データバー
- アイコンセット
- 上位/下位 
- 一意
- 式

**IRange.FormatConditions** の **Add** メソッドを使用して、条件付き書式設定ルールを範囲に適用します。特定の Add メソッドを使用することもできます。

- AddAboveAverage
- AddColorScale
- AddDatabar
- AddIconSetCondition
- AddTop10
- AddUniqueValues

すべての Add 関数は、**IFormatCondition** インタフェースのインスタンスを返すか、別の Add メソッドに固有のインタフェース（**IAboveAverage** など）を返します。</value>
    <comment>## Conditional Formatting
In order to enable you to highlight important information in rows or columns of a worksheet, GrapeCity Documents for Excel allows users to create conditional formatting rules for individual cells or a range of cells based on cell values. If the format condition matches with the cell value, it is assumed as true and the cell is formatted as per the specified rule..

GrapeCity Documents for Excel supports all types of conditional formatting rules:

- Cell Value
- Average
- Color Scale
- Data Bar
- Icon Sets
- Top Bottom 
- Unique
- Expression

Apply conditional formatting rules to a range using the **Add** method of **IRange.FormatConditions**. You can also use other specific Add methods:

- AddAboveAverage
- AddColorScale
- AddDatabar
- AddIconSetCondition
- AddTop10
- AddUniqueValues

All of the Add functions return an instance of the **IFormatCondition** interface, or an interface specific to another Add method, such as **IAboveAverage**.</comment>
  </data>
  <data name="DataValidation.Descrip" xml:space="preserve">
    <value>## データ検証
DioDocs for Excel では、ワークシートのセルに入力できる情報の形式と値を制限することで、データを検証できます。個々のセルまたはセル範囲に対して、個別の検証シナリオを作成できます。

DioDocs for Excel では、以下のような、さまざまな検証がサポートされています。
- 整数
- 10 進数
- リスト
- 日付
- 時刻
- テキストの長さ
- カスタム

**IRange.Validation** プロパティの **Add** メソッドを使用して、範囲の検証を追加します。このメソッドは、**IValidation** インタフェースのインスタンスを返します。
- 検証の入力メッセージとエラーメッセージを設定するには、次のプロパティを使用します
-- InputMessage 
-- ErrorMessage 
- メッセージを表示するかどうかを指定するには、次のプロパティを使用します
-- ShowInputMessage 
-- ShowError
- リスト検証にドロップダウンリストを表示するかどうかを指定するには
-- InCellDropdown プロパティ</value>
    <comment>## Data Validation
GrapeCity Documents for Excel lets you validate data by restricting the information format and the values that can be entered in cells of a worksheet. You can create distinct validation scenarios for individual cells or for a range of cells.

GrapeCity Documents for Excel supports all types of validations, including:
- Whole Number
- Decimal
- List
- Date
- Time
- Text length
- Custom

Add validation for a range using the **Add** method of  **IRange.Validation** property. The method returns an instance of the **IValidation** interface. 
- To set input and error messages for the validation, use these properties:
-- InputMessage 
-- ErrorMessage 
- To specify whether to show the messages, use these properties:
-- ShowInputMessage 
-- ShowError
- To specify whether to show a drop down list in a list validation:
-- InCellDropdown property</comment>
  </data>
  <data name="MonthlyBusinessBudget.Name" xml:space="preserve">
    <value>企業月次予算[英語データ]</value>
    <comment>Monthly business budget</comment>
  </data>
  <data name="Filtering.Descrip" xml:space="preserve">
    <value>## フィルタ処理
DioDocs for Excel では、以下のような、さまざまなフィルタがサポートされています。
- 数値フィルタ
- テキストフィルタ
- 日付フィルタ
- 色フィルタ
- アイコンフィルタ

範囲の **AutoFilter** メソッドを使用して、範囲をフィルタ処理します。フィルタを複数の列に適用する場合は、AutoFilter メソッドを複数回呼び出します。

範囲の値が変更されたときにフィルタ条件を再適用するには、ワークシートの **AutoFilter** インスタンスの **ApplyFilter** メソッドを使用します。</value>
    <comment>## Filtering
GrapeCity Documents for Excel supports all types of filters, including: 
- Number Filter
- Text Filter
- Date Filter
- Color Filter
- Icon Filter

Filter a range using the range's **AutoFilter** method. If you want to apply the filter to multiple columns, you can invoke the AutoFilter method several times.

To re-apply filter conditions when the range's value changes, use the **ApplyFilter** method of the worksheet's **AutoFilter** instance.</comment>
  </data>
  <data name="FilteringByColor.Descrip" xml:space="preserve">
    <value>## 色に基づくフィルタ
このフォルダ内の例は、AutoFilter メソッドを使用して色フィルタを生成する方法を示します。以下に基づいてフィルタ処理できます。
- フォントの色
- セル背景色
- 自動設定のフォントの色
- 塗りつぶしなし</value>
    <comment>## Filter by color
The examples in this folder demonstrate how to use the AutoFilter method to create a color filter. You can filter by:
- font color
- interior color
- automatic font color
- no fill</comment>
  </data>
  <data name="FilteringByIcon.Descrip" xml:space="preserve">
    <value>## アイコンに基づくフィルタ
このフォルダ内の例は、AutoFilter メソッドを使用してアイコンに基づいてフィルタ処理する方法を示します。**AutoFilterOperator** パラメータは、次の値に設定できます。

- **Icon** に設定して、指定したアイコンに基づいてフィルタ処理できます
- **NoIcon** に設定して、アイコンがない行に基づいてフィルタ処理できます

アイコンフィルタを適用する前に、その範囲に対して **IIconSetCondition** インスタンスと **IFormatCondition** インスタンスを作成する必要があります。</value>
    <comment>## Filter by icon
The examples in this folder demonstrate how to use the AutoFilter method to filter by icon.  You can set the **AutoFilterOperator** parameter to: 

- **Icon** and filter by the specified icon
- **NoIcon** and filter by rows with no icon

Before you can apply an icon filter, you must first create an **IIconSetCondition** instance and an **IFormatCondition** instance for the Range.</comment>
  </data>
  <data name="SimpleBudget.Name" xml:space="preserve">
    <value>簡単な予算</value>
    <comment>Simple Budget</comment>
  </data>
  <data name="TextFiltering.Descrip" xml:space="preserve">
    <value>## テキストフィルタ
このフォルダ内の例は、AutoFilter メソッドを使用してテキストフィルタを生成する方法を示します。たとえば、文字「e」を含む行に基づいてフィルタ処理できます。</value>
    <comment>## Text Filter
The example in this folder demonstrates how to use the AutoFilter method to create a text filter. For example, you can filter by rows that contain the letter "e".</comment>
  </data>
  <data name="Alignment.Descrip" xml:space="preserve">
    <value>## 配置
このフォルダ内の例は、以下の配置設定を使用する方法を示します。
- HorizontalAlignment（左、中央、右）
- VerticalAlignment（上、中央、下）
- ReadingOrder（テキストの方向を RightToLeft または LeftToRight に設定）
- ShrinkToFit 
- Orientation（テキストの回転角度を度単位で設定）
- テキストの折り返し </value>
    <comment>## Alignment
The examples in this folder demonstrate how to use these alignment settings:
- HorizontalAlignment (Left, Center, or Right)
- VerticalAlignment (Top, Center, or Bottom)
- ReadingOrder (sets text direction to RightToLeft or LeftToRight)
- ShrinkToFit 
- Orientation (sets the text rotation angle in degrees)
- Wrap Text</comment>
  </data>
  <data name="Borders.Descrip" xml:space="preserve">
    <value>## 境界線
このフォルダ内の例は、範囲に境界線を設定する方法を示します。次の境界線オプションを設定できます。
- BorderLineStyle（Dashed、DashDot、Dotted、Double、Medium、Hair など）
- Color（Green、Red、Blue、Tomato、LimeGreen など）</value>
    <comment>## Borders
The examples in this folder demonstrate how to specify border settings for a range. You can set these border options:
- BorderLineStyle (Dashed, DashDot, Dotted, Double, Medium, Hair, etc.)
- Color (Green, Red, Blue, Tomato, LimeGreen, etc.)</comment>
  </data>
  <data name="DateFiltering.Descrip" xml:space="preserve">
    <value>## 日付フィルタ
このフォルダ内の例は、AutoFilter メソッドを使用して日付に基づいてフィルタ処理する方法を示します。次のような方法でフィルタ処理できます。
- 2 つの日付の間
- 2 月のすべての日付</value>
    <comment>## Date Filter
The examples in this folder demonstrate how to use the AutoFilter method to filter by date. They show how you can filter:
- between two dates
- all dates in February</comment>
  </data>
  <data name="Fill.Descrip" xml:space="preserve">
    <value>## 塗りつぶし
このフォルダ内の例は、範囲にさまざまな種類の塗りつぶしを適用する方法を示します。
- 単色塗りつぶし
- パターン塗りつぶし
- 直線グラデーション塗りつぶし
- 四角形グラデーション塗りつぶし</value>
    <comment>## Fill
The examples in this folder demonstrate how to apply several kinds of fill to a range.
- Solid fill
- Pattern fill
- Linear gradient fill
- Rectangular gradient fill</comment>
  </data>
  <data name="Fonts.Descrip" xml:space="preserve">
    <value>## フォント
このフォルダ内の例は、範囲にフォント設定を適用する方法を示します。
- フォントの色
- フォントサイズ
- フォント名
- 太字、斜体
- 下線
- 取り消し線、上付き文字、下付き文字</value>
    <comment>## Fonts
The examples in this folder demonstrate how to apply font settings to a range:
- Font color
- Font size
- Font name
- Bold, Italic
- Underline
- Strikethrough, Superscript, Subscript</comment>
  </data>
  <data name="Formatting.Descrip" xml:space="preserve">
    <value>## 書式設定
DioDocs for Excel には、範囲の外観をカスタマイズするためのプロパティが数多く用意されています。

- **IRange.NumberFormat** は、数値書式を設定します
- **IRange.HorizontalAlignment**、**IRange.VerticalAlignment**、**IRange.IndentLevel** などは、配置を設定します
- **IRange.Font** は、フォントを設定します
- **IRange.Borders** は、境界線を設定します
- **IRange.Interior** は、単色塗りつぶし、パターン塗りつぶし、グラデーション塗りつぶしを設定します
- **IRange.Locked** と **IRange.FormulaHidden** は、保護を設定します

カスタムスタイルを作成したり、組み込みの名前付きスタイルを使用して、名前付きスタイルを 1 つ以上の範囲に適用することもできます。</value>
    <comment>## Formatting
GrapeCity Documents for Excel provides a lot of properties to customize the appearance of a range:

- **IRange.NumberFormat** sets the number format
- **IRange.HorizontalAlignment**,  **IRange.VerticalAlignment**, **IRange.IndentLevel**, etc. set the alignment
- **IRange.Font** sets the font
- **IRange.Borders** sets the border
- **IRange.Interior** sets solid fill, pattern fill, and gradient fill
- **IRange.Locked** and **IRange.FormulaHidden** sets up protection

You can also create custom styles or use the built-in named styles, and apply named styles to one or more ranges.</comment>
  </data>
  <data name="Formulas.Descrip" xml:space="preserve">
    <value>## 数式
DioDocs for Excel では、数式を作成して使用することができます。これらの式で、セルの値を迅速かつ正確に計算できます。組み込みの関数と演算子を使用して式を生成し、セル内で値を計算することもできます。

計算エンジンは、次のような多くの計算を処理します。
- 数百個の組み込み Excel 関数
- 配列式
- Dirty メソッドと Calculate メソッド
- テーブル式</value>
    <comment>## Formulas
GrapeCity Documents for Excel lets you create and use formulas. These are expressions that let you calculate the value of a cell quickly and accurately. You can also use built-in functions and operators to generate formulas and calculate values in cells.

The calc engine handles many calculations, for example:
- Hundreds of built-in Excel functions
- Array formulas
- Dirty and Calculate methods
- Table formula</comment>
  </data>
  <data name="Grouping.Descrip" xml:space="preserve">
    <value>## グループ化
膨大な量のデータが入ったシートは、人間が解読することすら困難です。自分に関係がある情報を視覚化し、管理し、分析しようとすると、多くの時間と労力を費やすことになります。

DioDocs for Excel を使用すると、大量の情報をいくつかのグループにまとめて、複雑スプレッドシートを簡単に作成できます。
データ行をグループ化し、グループヘッダー行のボタンを操作して、詳細データの展開や折りたたみが可能です。

以下のようなグループ化をカスタマイズする機能も提供しています。

- 範囲の **Group** メソッドは、特定の行のアウトラインレベルを上げます
- 範囲の **Ungroup** メソッドは、特定の行のアウトラインレベルを下げます
- **ShowDetail** Boolean プロパティは、グループを展開／折りたたみを指定します
- ワークシートの Outline インスタンスの **ShowLevels** メソッドは、特定のレベルグループを指定して展開します</value>
    <comment>## Grouping
Spreadsheets with tons of data can be a headache to read. You can spend a lot of time and effort trying to visualize, manage, and analyze the information that is relevant to you.

GrapeCity Documents for Excel lets you summarize large amounts of information in groups so that complex spreadsheets are easier to navigate. After rows of data in a spreadsheet are grouped, users can expand and collapse details with the click of a button in the group header row. You can use the following methods and properties to customize your groupings:

- The **Group** method of the range increases the outline level of specific rows
- The **Ungroup** method of the range decreases the outline level of specific rows
- The **ShowDetail** Boolean property expands or collapses a group
- The **ShowLevels** method of the worksheet's Outline instance expands specific level groups</comment>
  </data>
  <data name="NumberFormat.Descrip" xml:space="preserve">
    <value>## 数値形式
数値形式の例では、範囲に数値書式を適用する方法を示します。DioDocs for Excel は、Excel スタイルの数値書式を使用します。</value>
    <comment>## Number Format
The Number Format examples demonstrate how to apply a number format to a range. GrapeCity Documents for Excel uses Excel-style number formats.</comment>
  </data>
  <data name="Protection.Descrip" xml:space="preserve">
    <value>## 保護 
ワークシートの指定範囲にセキュリティ設定を適用する方法を示します。

- **FormulaHidden** プロパティは、範囲内の数式が、エクスポートされた .xlsx ファイルに表示されないようにします。
- **Locked** プロパティは、範囲内のセルが変更されないように保護します。</value>
    <comment>## Protection 
The Protection examples demonstrate how to apply security settings to a range, for example:
- The **FormulaHidden** property keeps formulas in a range from appearing in exported .xlsx files.
- The **Locked** property protects cells in a range from being modified</comment>
  </data>
  <data name="AddCustomSlicerStyle.Name" xml:space="preserve">
    <value>カスタムスライサースタイルの追加</value>
    <comment>Add a custom slicer style</comment>
  </data>
  <data name="BloodSugarTracker.Name" xml:space="preserve">
    <value>血糖値の記録</value>
    <comment>Blood sugar tracker</comment>
  </data>
  <data name="Tutorial.Name" xml:space="preserve">
    <value>チュートリアル</value>
    <comment>Tutorial</comment>
  </data>
  <data name="Hyperlinks.Descrip" xml:space="preserve">
    <value>## ハイパーリンク
範囲にハイパーリンクを適用するには、ワークシートの **Add** メソッドまたは範囲の **Hyperlinks** インスタンスを使用します。DioDocs for Excel は、次の種類のハイパーリンクをサポートしています。
- Web ページへのリンク
- 現在のドキュメント内の特定の範囲へのリンク
- 外部ファイルへのリンク
- 電子メールアドレスへのリンク</value>
    <comment>## Hyperlinks
Apply hyperlinks to a range using the **IWorksheet.Hyperlinks.Add** or **IRange.Hyperlinks.Add** method. Apply hyperlinks to a shape using the **IWorksheet.Hyperlinks.Add** method.GrapeCity Documents for Excel supports the following types of hyperlink:
- Link to a web page
- Link to a specific range in the current document
- Link to an external file
- Link to an email address</comment>
  </data>
  <data name="Picture.Descrip" xml:space="preserve">
    <value>## 画像
DioDocs for Excel を使用すると、ワークシートに画像を追加できます。

ワークシートに画像を追加するには、ワークシートの **Shapes** コレクションの **AddPicture** メソッドを使用します。</value>
    <comment>## Picture
GrapeCity Documents for Excel allows you to add a picture to a worksheet.

To add a picture to a worksheet, use the **AddPicture** method of the worksheet's **Shapes** collection.</comment>
  </data>
  <data name="PivotTable.Descrip" xml:space="preserve">
    <value>## ピボットテーブル
ピボットテーブルはデータ集計ツールです。スプレッドシートに保存されているデータを自動的にカウント、合計、または平均し、その結果として生成される集計データを別の表に表示できます。

ワークブックの **PivotCaches** コレクションの **Create**メソッドを使用して、ピボットキャッシュを作成します。このメソッドは、**IPivotCache** インタフェースのインスタンスを返します。

ピボットキャッシュインスタンスの **CreatePivotTable** メソッドを使用して、ピボットテーブルを作成します。または、ワークシートの **PivotTables** コレクションの **Add** メソッドを使用することもできます。

各ピボットフィールドの **PivotFieldOrientation** プロパティを使用して、それが RowField、ColumnField、ValueField、PageField のどれであるかを指定します。</value>
    <comment>## Pivot Table
A pivot table is a data summarization tool. It can automatically count, total, or average the data stored in a spreadsheet, and display the resulting summarized data in a second table.

Create a pivot cache using the **Create** method of the workbook's **PivotCaches** collection. It returns an instance of the **IPivotCache** interface. 

Create a pivot table using the **CreatePivotTable** method of the pivot cache instance. Or you can opt to use the **Add** method of the worksheet's **PivotTables** collection.

Use the **PivotFieldOrientation** property of each pivot field to specify whether it is a RowField, ColumnField, ValueField, or PageField.</comment>
  </data>
  <data name="RangeOperations.Descrip" xml:space="preserve">
    <value>## 範囲（Range）の操作
範囲（Range）とは、ワークシート内の 1 つのセルまたはセルの集合のことで、**IWorksheet** インタフェースの **Range** プロパティを使用して、セル、行、または列に対して重要な操作を実行するために使用します。

以下のサンプルでは、各方法についてサンプルコードで説明します。
- セル、行、列へのアクセス
- 範囲の各領域へのアクセス
- 範囲へのさまざまなアクセス方法
- 範囲の切り取り、コピー、貼り付け
- セルの使用範囲の操作
- 行数または列数の取得
- 行または列の非表示
- セルの挿入または削除
- 行および列の挿入または削除
- セルの結合
- 範囲に値を設定
- 行の高さと列の幅の設定</value>
    <comment>## Range Operations
A range is a cell or a cluster of cells in a spreadsheet that can be used to execute important operations on cells, rows or columns with the help of **Range** property of the **IWorksheet** interface.

Examples in this folder demonstrate how to:
- Access cells, rows, and columns
- Access each area of a range
- Access ranges in various ways
- Cut, Copy, and Paste a range
- Work with a used range of cells
- Get a row count or column count
- Hide a row or column
- Insert or delete cells
- Insert or delete rows and columns
- Merge cells
- Set values to a range
- Set row height and column width</comment>
  </data>
  <data name="Shape.Descrip" xml:space="preserve">
    <value>## 図形
ワークシートのセルに図形やピクチャなどの描画オブジェクトを埋め込むことができます。
矢印、線、チャート、スライサー、ピクチャ、および画像を挿入が可能です。

ワークシートで図形を作成するには、ワークシートの Shapes コレクションの **AddShape** メソッドを使用します。次に、以下のようにプロパティを使用して、Shape インスタンスを設定します。

- **Fill** プロパティを使用して、図形の塗りつぶしスタイルを設定します 
- **Line** プロパティを使用して、図形の線スタイルを設定します
- **ThreeD** プロパティを使用して、図形の 3D 形式を設定します 
- **TextFrame** プロパティを使用して、図形のリッチテキストを設定します</value>
    <comment>## Shape
GrapeCity Documents for Excel lets you embed drawing objects like shapes and pictures in the cells of a worksheet. You can insert arrows, lines, charts, slicers, pictures, and general shapes.

To create a shape for a worksheet, use the **AddShape** method of the worksheet's Shapes collection. Then you can configure the Shape instance using properties like these:

- Configure a shape's fill style using the **Fill** property 
- Configure a shape's line style using the **Line** property
- Configure a shape's 3D format using the **ThreeD** property 
- Configure a shape's rich text using the **TextFrame** property</comment>
  </data>
  <data name="Slicer.Descrip" xml:space="preserve">
    <value>## スライサー
スライサーは、テーブルまたはピボットテーブルのフィルタ処理を視覚的に操作できるユーザーインタフェースです。

ワークブックの **SlicerCaches** コレクションの **Add** メソッドを使用して、スライサーキャッシュを作成します。このメソッドは、スライサーキャッシュのインスタンスを返します。

スライサーを作成するには、スライサーキャッシュの **Slicers** コレクションの **Add** メソッドを使用します。

外観は、組み込みのスライサースタイルとカスタムスライサースタイルの両方をサポートします。</value>
    <comment>## Slicer
Slicers are visual filters that you can use to filter a table or pivot table.

Use the **Add** method of a workbook's **SlicerCaches** collection to create a slicer cache. It returns an instance of a slicer cache. 

Use the **Add** method of the slicer cashe's **Slicers** collection to create a slicer.

It supports both built-in and custom slicer styles.</comment>
  </data>
  <data name="Sorting.Descrip" xml:space="preserve">
    <value>## ソート
DioDocs for Excel では、以下のような、さまざまなソートがサポートされています。
- 値によるソート
- フォントの色によるソート
- セル背景によるソート
- アイコンによるソート
- カスタムリストによるソート</value>
    <comment>## Sorting
GrapeCity Documents for Excel supports all types of sorting, including:
- Sort by value
- Sort by font color
- Sort by interior
- Sort by icon
- Sort by custom list</comment>
  </data>
  <data name="Sparklines.Descrip" xml:space="preserve">
    <value>## スパークライン
DioDocs for Excel では、スパークラインを使用して、特定の情報を強調表示したり、データが時間の経過と共にどのように変化するかを表示できます。スパークラインは、セル内に描画される小型・軽量チャートで、データをすばやく視覚化して分析機能を強化します。

範囲の **SparklineGroups** コレクションの **Add** メソッドを使用して、新しいスパークライングループを作成します。スパークラインは、スパークライングループ内にのみ存在します。スパークライングループの外にスパークラインを作成する方法はありません。

次の種類のスパークラインを利用できます。
- 線
- 縦棒
- 勝敗</value>
    <comment>## Sparklines
GrapeCity Documents for Excel allows you to highlight specific information and see how it varies over time using Sparklines. Sparklines are small, lightweight charts that are drawn inside cells to quickly visualize data for improved analysis.

Use the **Add** method of a range's **SparklineGroups** collection to create a group of new sparklines. Sparklines only exist inside of a sparkline group. There is no way to create a sparkline outside of a sparkline group.

We support the following types of sparklines:
- Line
- Column
- Win/Loss</comment>
  </data>
  <data name="SpreadSheetsViewer.Descrip" xml:space="preserve">
    <value>## Spread.Sheets に表示
以下のデモは、**DioDocs for Excel** の実行結果を **Spread.Sheets** を使用して表示しています。
Spread.Sheets は、別製品「SpreadJS」に含まれるJavaScriptコントロールです。
DioDocs for Excel はサーバー側で動作し、Excel形式のデータを作成し出力します。
Spread.Sheets はクライアント側（ブラウザ）で動作しデータをスプレッドシートに表示します。

**Spread.Sheets** の詳細については、[SpreadJS 製品情報ページ](https://www.grapecity.co.jp/developer/spreadjs) を参照してください。

このフォルダ内のすべての例は、次の手順で動作します。
- サーバー上に存在する **DioDocs for Excel** で Excel ファイルを開きます。
- **Workbook.ToJson** を呼び出してワークブック全体を JSON 文字列にエクスポートし、その JSON 文字列をクライアント側に転送します。
- クライアント側では、**Spread.Sheets** コントロールが **FromJson** を使用して、サーバー上の Excel ファイルの結果を表示します。

**［テンプレート］**ボタンをクリックすると、Excel ファイルをダウンロードして表示できます。

デモページでは、Spread.Sheets コントロールの内容を編集し、**［エクスポート］**ボタンをクリックして、変更された Excel ファイルを取得できます。［エクスポート］ボタンは次の手順で機能します。
- Spread.Sheets が **ToJson** を使用して、最新の変更内容を含む JSON 文字列を取得し、その文字列をサーバーに送信します。
- サーバーの DioDocs for Excel が JSON 文字列に **FromJson** を使用し、**Workbook.Save** を呼び出して Excel ファイルにすべての内容を保存します。
- これで、変更された Excel ファイルをダウンロードできます。</value>
    <comment>## Spread.Sheets Viewer
Examples in this folder demonstrate how to use **GrapeCity Documents for Excel** and **Spread.Sheets**, another Spread product that is included in SpreadJS. GrapeCity Documents for Excel works on the server side to import and export Excel template files. Spread.Sheets works in the browser (client side) as a viewer or editor.

To learn more about **Spread.Sheets**, visit the [Spread.Sheets Home Page](https://www.grapecity.com/en/spreadsheets).

All examples in this folder work as below steps:
- Open an Excel file with **GrapeCity Documents for Excel** existing on server.
- Export the whole workbook to a JSON string by calling **Workbook.ToJson**, then transfer the JSON string to client side.
- At client side, **Spread.Sheets** control will **FromJson** to let you view the result of the excel file on server.

Click the **"Template"** button to download and view the excel file.

In the demo page, you can edit the content in the Spread.Sheets control, then click the **"Export"** button to get the changed Excel file. The "Export" button works by following steps:
- Spread.Sheets uses **ToJson** to get a JSON string which contains the latest changes, and post the string to server.
- GrapeCity Documents for Excel at server uses **FromJson** with the JSON string, and then calls **Workbook.Save** to save everything to an excel file.
- Finally, you can download the changed Excel file.</comment>
  </data>
  <data name="Tables.Descrip" xml:space="preserve">
    <value>## テーブル
範囲としてテーブルを作成すると、スプレッドシートのデータをより簡単に管理および分析できます。テーブルは行と列で構成され、これらをワークシート内で独立して書式設定および管理できます。次の方法を学習します。

- ワークシート内のテーブルの追加または削除
- テーブル列へのフィルタの適用
- テーブル列へのソートの適用
- 組み込みテーブルスタイルまたはカスタムテーブルスタイルの適用
- テーブルの各範囲へのアクセス
- テーブル列の追加または削除
- 特定のテーブル範囲の計算の実行</value>
    <comment>## Tables
To more easily manage and analyze data in spreadsheet, you can create table for a range. A table consists of rows and columns that you can format and manage independently in a worksheet. You will learn how to:

- Add or remove a table in a worksheet
- Apply filtering to a table column
- Apply sorting to a table column
- Apply either built-in or custom table styles
- Access each range of a table
- Add or remove a table column
- Perform calculations for a specific table range</comment>
  </data>
  <data name="Theme.Descrip" xml:space="preserve">
    <value>## テーマ
ワークブック全体の外観をすばやく変更できる組み込みテーマが用意されています。
カスタムテーマを作成してオリジナルの外観をワークブックに適用することも可能です。

- ワークブックインスタンスの **Theme** プロパティを使用して、ワークブックのテーマを変更します。
- テーマクラスインスタンスの **Add** メソッドを使用して、カスタムテーマを追加します。
- **Themes** クラスの組み込みプロパティを使用して、組み込みテーマインスタンスを取得します。
- **Themes** インデクサを使用して、カスタムテーマインスタンスを取得します。</value>
    <comment>## Theme
GrapeCity Documents for Excel provides you with a set of built-in themes so you can quickly change the overall appearance of a workbook. It also lets you create custom themes and apply them to workbooks.

- Use the **Theme** property of a workbook instance to change the workbook's theme. 
- Use the **Add** method of a themes class instance to add a custom theme. 
- Use the built-in properties of the **Themes** class to get a built-in theme instance.
- Use the **Themes** indexer to get a custom theme instance.</comment>
  </data>
  <data name="Workbook.Descrip" xml:space="preserve">
    <value>## ワークブック
ワークブックとは、Worksheets コレクションに格納された 1 つ以上のワークシートを含むスプレッドシートドキュメントのことです。

このフォルダ内の例は、次の方法を具体的に示します。
- 新しいワークブックの作成
- ワークブックへの Excel ファイルのインポート
- ワークブックへのパスワード付き Excel ファイルのインポート
- Excel ファイルへのワークブックのエクスポート
- パスワード付き Excel ファイルへのワークブックのエクスポート
- SpreadJS を使用したワークブックのインポートとエクスポート</value>
    <comment>## Workbook
A workbook is a spreadsheet document that contains one or more worksheets that are stored within the Worksheets collection.

The examples in this folder demonstrate the following cases:
- Create  a new workbook
- Import an Excel file into a workbook
- Import an Excel file with a password to a workbook
- Export a workbook to an Excel file
- Export a workbook to an Excel file with a password
- Import or export a workbook using ToJson and FromJson
- Protect a workbook
- Unprotect a workbook</comment>
  </data>
  <data name="Worksheets.Descrip" xml:space="preserve">
    <value>## ワークシート
このフォルダ内の例は、次の方法を具体的に示します。
- ワークシートの追加
- ワークシートの削除
- ワークシートの保護
- ワークシートの保護の解除
- ワークシートのアクティブ化
- ワークシートへの設定の適用</value>
    <comment>## Worksheets
The examples in this folder demonstrate the following cases:
- Add a worksheet
- Delete a worksheet
- Protect a worksheet
- Unprotect a worksheet
- Activate a worksheet
- Apply settings to a worksheet
- Add a chart sheet</comment>
  </data>
  <data name="ExcelReporting.Descrip" xml:space="preserve">
    <value>## Excel 帳票を作成
サーバー側で帳票形式のExcelシートを生成する方法を示すコードについて説明します。

**［実行］**ボタンをクリックすると、サーバーで次のアクションが実行されます。
- 空のワークブックを作成
- コードウィンドウ内のコードを実行
- Excel ファイルに保存

作成されたExcel ファイルは、ダウンロードして結果を確認できます。

※サンプルの一部は英語のテンプレート、データを利用していますが、日本語版のDioDocs for Excelで動作しています。</value>
    <comment>## Excel Reporting
In this folder, you can explore complete code demonstrating how to generate an Excel file or report at server side. 

Click the **"Run"** button to perform the following actions on the server:
- Create an empty workbook
- Execute all of code in the code window
- Save to an Excel file

Then you can view the results by downloading the Excel file.</comment>
  </data>
  <data name="ExcelTemplates.Descrip" xml:space="preserve">
    <value>## Excel テンプレート
既存のExcelファイルをテンプレートとし、内容の一部を更新するケースがあります。

シナリオによっては、独自の Excel テンプレートがあり、サーバー側でそのコンテンツの一部を開いて更新したい場合があります。DioDocs for Excel が提供するAPIを操作して、既存の Excel ファイルを開き、その値の一部を更新したり、書式を変更したり、セキュリティ設定を追加するなどの作業を行うことができます。

- **［テンプレート］**ボタンをクリックすると、オリジナルの Excel テンプレートをダウンロードして表示できます。
- **［実行］**ボタンをクリックすると、コードが実行され、変更された Excel ファイルを取得できます。

※サンプルの一部は英語のテンプレート、データを利用していますが、日本語版のDioDocs for Excelで動作しています。</value>
    <comment>## Excel Templates
In some scenarios, you may have your own Excel templates and just want to open and update some of the contents at server side. You can use the extensive GrapeCity Documents for Excel API to open an existing Excel file and then change some of its values, customize its formatting, and whatever else you need to do.
- Click the **Template** button to download and view the original Excel template
- Click the **Run** button to run the code and get the changed Excel file</comment>
  </data>
  <data name="UseSlicerToClearFilter.Name" xml:space="preserve">
    <value>スライサーを使用してフィルタをクリア</value>
    <comment>Use a slicer to clear a filter</comment>
  </data>
  <data name="Features.Descrip" xml:space="preserve">
    <value>## 機能
DioDocs for Excel は、開発者がExcelファイルを生成、更新する際に役立つ機能を提供します。
- セルの操作
- Excelファイルの入出力
- カスタムテーマ
- チャート
- 画像の埋め込み
- テーブル、ピボット
- 集計データ
- その他...

こちらではは、DioDocs for Excel の各機能を使用する方法を説明する多数のサンプルコードをがあります。

**［実行］**ボタンをクリックすると、サーバーで次のアクションが実行されます。
- 空のワークブックを作成
- コードウィンドウ内のコードを実行
- Excel ファイルに保存

コードで作成したExcel ファイルは、ダウンロードして結果を確認できます。

**メモ**：一部のデモでは別製品「[SpreadJS](https://www.grapecity.co.jp/developer/spreadjs/)」の機能を利用し、ページ上に配置した Spread.Sheets に結果を表示しています。読み取り専用モードのため、操作はできませんが簡単に結果を確認できます。</value>
    <comment>## Features
GrapeCity Documents for Excel provides some remarkable features that empower developers to create spreadsheets with:
- High-performance attributes
- Custom themes
- Configurable components
- Summarized data
- Custom styles
- Embedded drawing objects
- Integrated calculation engine
- And much more...

You can explore a lot of example code in the Features section that shows you how to use each feature in GrapeCity Documents for Excel.

Click the **"Run"** button to perform the following actions on the server:
- Create an empty workbook
- Execute all of the code in the code window
- Save to an Excel file

Then you can view the results by downloading the Excel file.

**NOTE**: In this demo, Spread.Sheets is in read-only mode. Don't be alarmed if some features are not interactive. Download the fully functional  Excel file to interact with the features.</comment>
  </data>
  <data name="ProjectCostTracker.Name" xml:space="preserve">
    <value>プロジェクトコストトラッカー</value>
    <comment>Project cost tracker</comment>
  </data>
  <data name="EventBudget.Name" xml:space="preserve">
    <value>イベント予算</value>
    <comment>Event budget</comment>
  </data>
  <data name="NumberFilter.Name" xml:space="preserve">
    <value>数値フィルタの適用</value>
    <comment>Apply number filter</comment>
  </data>
  <data name="NumberFiltering.Descrip" xml:space="preserve">
    <value>## 数値フィルタ
このフォルダ内の例は、範囲に対して数値フィルタを使用する方法を示します。</value>
    <comment>## Number Filter
The examples in this folder demonstrates how to use number filtering for range.</comment>
  </data>
  <data name="NumberFormat.Name" xml:space="preserve">
    <value>数値形式</value>
    <comment>Number Format</comment>
  </data>
  <data name="ConfigValueAxesFormat.Name" xml:space="preserve">
    <value>値軸スタイルの構成</value>
    <comment>Configure value axis style</comment>
  </data>
  <data name="ChangeSeriesType.Name" xml:space="preserve">
    <value>チャート系列タイプ</value>
    <comment>Change series type</comment>
  </data>
  <data name="ConfigDataLabelFormat.Name" xml:space="preserve">
    <value>データラベルの書式の構成</value>
    <comment>Configure data label's format</comment>
  </data>
  <data name="ConfigMarkerStyle.Name" xml:space="preserve">
    <value>マーカースタイルの構成</value>
    <comment>Configure markers style</comment>
  </data>
  <data name="ConfigNegativePoint.Name" xml:space="preserve">
    <value>負のポイントスタイルの構成</value>
    <comment>Configure negative point style</comment>
  </data>
  <data name="ConfigSeriesFormat.Name" xml:space="preserve">
    <value>系列の書式設定の構成</value>
    <comment>Configure series format</comment>
  </data>
  <data name="CreateSecondaryAxis.Name" xml:space="preserve">
    <value>第二軸の作成</value>
    <comment>Create secondary axis</comment>
  </data>
  <data name="DeleteSeries.Name" xml:space="preserve">
    <value>系列の削除</value>
    <comment>Delete series</comment>
  </data>
  <data name="ConfigChartTitleRichText.Name" xml:space="preserve">
    <value>リッチテキスト付きチャートタイトルの構成</value>
    <comment>Configure chart title with rich text</comment>
  </data>
  <data name="ChartArea.Name" xml:space="preserve">
    <value>チャート領域</value>
    <comment>Chart area</comment>
  </data>
  <data name="ChartLines.Name" xml:space="preserve">
    <value>グラフ線</value>
    <comment>Chart lines</comment>
  </data>
  <data name="ChartTitle.Name" xml:space="preserve">
    <value>チャートタイトル</value>
    <comment>Chart title</comment>
  </data>
  <data name="ChartWalls.Name" xml:space="preserve">
    <value>チャート壁面</value>
    <comment>Chart walls</comment>
  </data>
  <data name="ConfigChartAreaFont.Name" xml:space="preserve">
    <value>チャート領域のフォントの構成</value>
    <comment>Configure chart area's font</comment>
  </data>
  <data name="ConfigChartBackWall.Name" xml:space="preserve">
    <value>3Dチャート背壁の構成</value>
    <comment>Configure chart back wall</comment>
  </data>
  <data name="ConfigChartSideWall.Name" xml:space="preserve">
    <value>3Dチャート側壁の構成</value>
    <comment>Configure chart side wall</comment>
  </data>
  <data name="DataLabel.Name" xml:space="preserve">
    <value>データラベル</value>
    <comment>Data label</comment>
  </data>
  <data name="DataPoint.Name" xml:space="preserve">
    <value>データポイント</value>
    <comment>Data point</comment>
  </data>
  <data name="Legend.Name" xml:space="preserve">
    <value>凡例</value>
    <comment>Legend</comment>
  </data>
  <data name="ChartArea.Descrip" xml:space="preserve">
    <value>## チャート領域
チャート領域は、プロット領域、チャートタイトル、および凡例から成るチャート領域全体です。

以下の例は、チャート領域のスタイルとチャート領域全体のフォントスタイルを構成する方法を示します。</value>
    <comment>## Chart area
Chart area is the complete chart area, include plot area, chart title and legend.

These examples demonstrate how to configure chart area style and whole chart area font style.</comment>
  </data>
  <data name="ChartLines.Descrip" xml:space="preserve">
    <value>## グラフ線
グラフ線には、**傾向線**、**ドロップライン**、**高値-安値ライン**、**系列線**があります。

- **傾向線**は、特定の系列に使用されます。
- **ドロップライン**は、折れ線グラフまたは面グラフに設定されます。
- **高値-安値ライン**は、折れ線グラフに設定されます。
- **系列線**は、積層縦棒グラフまたは積層横棒グラフに設定されます。補助円グラフ付き円グラフと補助縦棒グラフ付き円グラフも、セクション間に接続線があります。

以下の例は、これらの線を追加する方法と、線のスタイルを設定する方法を示します。</value>
    <comment>## Chart lines
Chart lines include: **Trendline**, **Dropline** , **High-Low Line** and **Series Line**.

- **Trendline** is for specific series.
- **Dropline** set for line chart or area chart.
- **High-Low line** set for line chart.
- **Series line** set for stacked column or bar charts. Pie-of-pie charts and bar-of-pie charts also have connector lines between their sections

These examples demonstrate how to add these lines and how to configure lines style.</comment>
  </data>
  <data name="ChartTitle.Descrip" xml:space="preserve">
    <value>## チャートタイトル
**チャートタイトル**は、グラフの名前のことです。

以下の例は、グラフ名を表示する方法と、チャートタイトルの設定を行う方法を示します。</value>
    <comment>## Chart title
**Chart title** is the name of the chart.

These examples demonstrate how to display chart name  and how to specify settings for chart title.</comment>
  </data>
  <data name="ChartWalls.Descrip" xml:space="preserve">
    <value>**チャートの壁面**には、**背壁**と**側壁**があります。

以下の例では、次のようなチャート壁面設定の指定方法を示します。
- 壁面スタイルをまとめて構成する
- 背壁と側壁を別々に構成する</value>
    <comment>**Chart walls** include **back wall** and **side wall**.

These examaple demonstrete how to specity settings for chart walls, include:
- Configure walls style together
- Configure back wall and side wall separately</comment>
  </data>
  <data name="Chart3DFormat.Name" xml:space="preserve">
    <value>3Dチャートの書式設定</value>
    <comment>Chart 3D format</comment>
  </data>
  <data name="ConfigLegendFormat.Name" xml:space="preserve">
    <value>凡例の書式設定の構成</value>
    <comment>Configure legend format</comment>
  </data>
  <data name="ConfigSecondarySection.Name" xml:space="preserve">
    <value>補助円グラフ付き円グラフの第 2 セクションの構成</value>
    <comment>Configure secondary section for pie of pie chart</comment>
  </data>
  <data name="DataLabel.Descrip" xml:space="preserve">
    <value>## データラベル
**データラベル**は、指定された系列の情報を表示できます。ShowLegendKey、ShowPercentage、ShowValue、ShowSeriesName などを使用して、データラベルのレイアウトを構成します。以下の例は、データラベルを表示し、データラベルの設定を指定する方法を示します。</value>
    <comment>## Data label
**Data labels** can display specified series information. Use ShowLegendKey, ShowPercentage, ShowValue, ShowSeriesName, .etc to configure data label layout. These examples demonstrate how to display data labels and specify settings for data labels.</comment>
  </data>
  <data name="DataPoint.Descrip" xml:space="preserve">
    <value>## データポイント
**データポイント**は、特定の系列のすべてのポイントのコレクションです。以下の例は、データポイントの設定を指定する方法を示します。</value>
    <comment>## Data point
**Data points** are a collection of all points in a specific series. These examples demonstrate how to specify settings for data points.</comment>
  </data>
  <data name="Legend.Descrip" xml:space="preserve">
    <value>## 凡例
以下の例は、チャートの**凡例**のスタイルと位置を設定する方法を示します。</value>
    <comment>## Legend
These examples demonstrate how to configure the style and position of chart **legends**.</comment>
  </data>
  <data name="PlotArea.Descrip" xml:space="preserve">
    <value>## プロット領域
以下の例は、**プロット領域**の設定を指定する方法を示します。</value>
    <comment>## Plot area
These examples demonstrate how to specify settings for **plot area**.</comment>
  </data>
  <data name="PlotArea.Name" xml:space="preserve">
    <value>プロット領域</value>
    <comment>Plot area</comment>
  </data>
  <data name="ChartGallery.Descrip" xml:space="preserve">
    <value>## チャートギャラリー
このチャートギャラリーには、使用可能なすべての**チャートタイプ**が含まれており、各グラフの設定方法が示されています。</value>
    <comment>## Chart gallery
This chart gallery includes all of the **chart types** available and demonstrates how to configure each chart.</comment>
  </data>
  <data name="ChartGallery.Name" xml:space="preserve">
    <value>チャートギャラリー</value>
    <comment>Chart gallery</comment>
  </data>
  <data name="AreaChart.Name" xml:space="preserve">
    <value>面グラフ</value>
    <comment>Area chart</comment>
  </data>
  <data name="AreaStacked100.Name" xml:space="preserve">
    <value>面グラフ（100% 積層）</value>
    <comment>100% Stacked chart</comment>
  </data>
  <data name="AreaStackedChart.Name" xml:space="preserve">
    <value>面グラフ（積層）</value>
    <comment>Stacked Area chart</comment>
  </data>
  <data name="BarClusteredChart.Name" xml:space="preserve">
    <value>横棒グラフ（集合）</value>
    <comment>Clustered Bar chart</comment>
  </data>
  <data name="BarStacked100Chart.Name" xml:space="preserve">
    <value>横棒グラフ（100 % 積層）</value>
    <comment>100% Stacked Bar chart</comment>
  </data>
  <data name="BarStackedChart.Name" xml:space="preserve">
    <value>横棒グラフ（積層）</value>
    <comment>Stacked Bar chart</comment>
  </data>
  <data name="ColumnClusteredChart.Name" xml:space="preserve">
    <value>縦棒グラフ（集合）</value>
    <comment>Clustered Column chart</comment>
  </data>
  <data name="ColumnStacked100Chart.Name" xml:space="preserve">
    <value>縦棒グラフ（100 % 積層）</value>
    <comment>100% Stacked Column chart</comment>
  </data>
  <data name="ColumnStackedChart.Name" xml:space="preserve">
    <value>縦棒グラフ（積層）</value>
    <comment>Stacked Column chart</comment>
  </data>
  <data name="LineChart.Name" xml:space="preserve">
    <value>折れ線グラフ</value>
    <comment>Line chart</comment>
  </data>
  <data name="LineMarkersChart.Name" xml:space="preserve">
    <value>マーカー付き折れ線グラフ</value>
    <comment>Line Markers chart</comment>
  </data>
  <data name="LineStacked100Chart.Name" xml:space="preserve">
    <value>折れ線グラフ（100 % 積層）</value>
    <comment>100% Stacked Line chart</comment>
  </data>
  <data name="LineStackedChart.Name" xml:space="preserve">
    <value>折れ線グラフ（積層）</value>
    <comment>Stacked Line chart</comment>
  </data>
  <data name="PieChart.Name" xml:space="preserve">
    <value>円グラフ</value>
    <comment>Pie chart</comment>
  </data>
  <data name="Stock_HighLowCloseStockChart.Name" xml:space="preserve">
    <value>株価チャート（高値-安値-終値）</value>
    <comment>High-Low-Close stock chart</comment>
  </data>
  <data name="Stock_OpenHighLowCloseStock.Name" xml:space="preserve">
    <value>株価チャート（始値-高値-安値-終値）</value>
    <comment>Open-High-Low-Close stock chart</comment>
  </data>
  <data name="Stock_VolumeHighLowCloseStock.Name" xml:space="preserve">
    <value>株価チャート（出来高-高値-安値-終値）</value>
    <comment>Volume-High-Low-Close stock chart</comment>
  </data>
  <data name="XYScatterChart.Name" xml:space="preserve">
    <value>散布図</value>
    <comment>Scatter chart</comment>
  </data>
  <data name="XYScatterLinesChart.Name" xml:space="preserve">
    <value>散布図（直線とマーカー）</value>
    <comment>Scatter with straight lines and markers</comment>
  </data>
  <data name="XYScatterSmooth.Name" xml:space="preserve">
    <value>散布図（平滑線）</value>
    <comment>Scatter with smooth Lines</comment>
  </data>
  <data name="BubbleChart.Name" xml:space="preserve">
    <value>バブルチャート</value>
    <comment>Bubble chart</comment>
  </data>
  <data name="ConfigHeaderFooter.Name" xml:space="preserve">
    <value>ページのヘッダー/フッターの構成</value>
    <comment>Configure page header footer</comment>
  </data>
  <data name="ConfigEvenPageHeaderFooter.Name" xml:space="preserve">
    <value>偶数ページのヘッダー/フッターの構成</value>
    <comment>Configure even page header footer</comment>
  </data>
  <data name="ConfigFirstPageNumber.Name" xml:space="preserve">
    <value>先頭ページ番号の構成</value>
    <comment>Configure first page number</comment>
  </data>
  <data name="ConfigPageMargins.Name" xml:space="preserve">
    <value>ページ余白の構成</value>
    <comment>Configure page margins</comment>
  </data>
  <data name="ConfigPageOrder.Name" xml:space="preserve">
    <value>ページの順序の構成</value>
    <comment>Configure page order</comment>
  </data>
  <data name="ConfigPageOrientation.Name" xml:space="preserve">
    <value>ページの向きの構成</value>
    <comment>Configure page orientation</comment>
  </data>
  <data name="ConfigPaperScaling.Name" xml:space="preserve">
    <value>用紙の拡大縮小の構成</value>
    <comment>Configure paper scaling</comment>
  </data>
  <data name="ConfigPaperSize.Name" xml:space="preserve">
    <value>用紙サイズの構成</value>
    <comment>Configure paper size</comment>
  </data>
  <data name="ConfigPrintArea.Name" xml:space="preserve">
    <value>印刷範囲の構成</value>
    <comment>Configure print area</comment>
  </data>
  <data name="ConfigSheetPrintSettings.Name" xml:space="preserve">
    <value>用紙の印刷設定の構成</value>
    <comment>Configure sheet print settings</comment>
  </data>
  <data name="PageSetup.Name" xml:space="preserve">
    <value>ページ設定</value>
    <comment>Page Setup</comment>
  </data>
  <data name="CombinationChart1.Name" xml:space="preserve">
    <value>複合チャート1</value>
    <comment>Combination chart</comment>
  </data>
  <data name="CombinationChart2.Name" xml:space="preserve">
    <value>複合チャート2</value>
    <comment>Combination chart</comment>
  </data>
  <data name="LineMarkerStackedChart.Name" xml:space="preserve">
    <value>マーカー付き折れ線グラフ（積層）</value>
    <comment>Stack line with markers chart</comment>
  </data>
  <data name="Pie_DoughnutChart.Name" xml:space="preserve">
    <value>ドーナツグラフ</value>
    <comment>Doughnut chart</comment>
  </data>
  <data name="Stock_VolumeOpenHighLowClose.Name" xml:space="preserve">
    <value>株価チャート（出来高-始値-高値-安値-終値）</value>
    <comment>Volume-Open-High-Low-Close chart</comment>
  </data>
  <data name="XYScatterSmoothWithMarkers.Name" xml:space="preserve">
    <value>散布図（平滑線とマーカー）</value>
    <comment>Scatter with smooth lines and markers</comment>
  </data>
  <data name="LineMarkerStacked100Chart.Name" xml:space="preserve">
    <value>マーカー付き折れ線グラフ（100 % 積層）</value>
    <comment>100% Stacked line with markers chart</comment>
  </data>
  <data name="Chart3DFormat.Descrip" xml:space="preserve">
    <value>## 3Dチャートの書式設定
このフォルダ内の例は、3Dチャートの書式設定を行う方法を示します。</value>
    <comment>## Chart 3D format
These examples in this folder demonstrate how to set charts 3D format</comment>
  </data>
  <data name="ConfigMarkersFormat.Name" xml:space="preserve">
    <value>マーカーの書式設定の構成</value>
    <comment>Configure markers format</comment>
  </data>
  <data name="Markers.Descrip" xml:space="preserve">
    <value>## マーカー
以下の例は、**マーカー**のスタイルと書式を設定する方法を示します。</value>
    <comment>## Markers
These examples demonstrate how to set style and format for **markers**.</comment>
  </data>
  <data name="Markers.Name" xml:space="preserve">
    <value>マーカー</value>
    <comment>Markers</comment>
  </data>
  <data name="PageSetup.Descrip" xml:space="preserve">
    <value>## ページ設定
DioDocs for Excel はページ設定が可能です。
**PageSetup** オブジェクトには、すべてのページ設定属性（左余白、下余白、用紙サイズなど）がプロパティとして含まれています。</value>
    <comment>## Page Setup
GrapeCity Documents for Excel supports page setup. The **PageSetup** object contains all page setup attributes (left margin, bottom margin, paper size, and so on) as properties.</comment>
  </data>
  <data name="ConfigChart3DFormat.Name" xml:space="preserve">
    <value>3Dチャートの書式設定の構成</value>
    <comment>Configure chart 3D format</comment>
  </data>
  <data name="ConfigFirstPageHeaderFooter.Name" xml:space="preserve">
    <value>先頭ページのヘッダー/フッターの構成</value>
    <comment>Configure first page header footer</comment>
  </data>
  <data name="EventPlanningTracker.Name" xml:space="preserve">
    <value>イベント企画トラッカー</value>
    <comment>Event planning tracker</comment>
  </data>
  <data name="FamilyBudget.Name" xml:space="preserve">
    <value>家計簿</value>
    <comment>Family budget</comment>
  </data>
  <data name="ConfigPrintTitleColumns.Name" xml:space="preserve">
    <value>左端で繰り返す列を構成</value>
    <comment>Configure columns to repeat at left</comment>
  </data>
  <data name="ConfigPrintTitleRows.Name" xml:space="preserve">
    <value>上部で繰り返す行を構成</value>
    <comment>Configure rows to repeat at top</comment>
  </data>
  <data name="ConfigPageCenter.Name" xml:space="preserve">
    <value>ページ中央の構成</value>
    <comment>Configure page center</comment>
  </data>
  <data name="ImportExcelFileDataOnly.Name" xml:space="preserve">
    <value>Excel からデータのみをインポート</value>
    <comment>Only import data from Excel</comment>
  </data>
  <data name="ImportExcelFileWithoutCalculation.Name" xml:space="preserve">
    <value>Excel を開いた後に再計算しない</value>
    <comment>Do not recalculate after opening Excel</comment>
  </data>
  <data name="PDFExporting.Descrip" xml:space="preserve">
    <value>## PDF のエクスポート
Excelシートの印刷イメージをPDF形式にエクスポートできます。
以下ではサーバー側で PDF ファイルをエクスポートする方法のコードについて説明します。

**［PDF として保存］**ボタンをクリックすると、サーバーで次のアクションが実行されます。
- 空のワークブックを作成
- コードウィンドウ内のすべてのコードを実行
- PDF ファイルに保存

作成したPDFファイルはブラウザで表示できます。</value>
    <comment>## PDF Exporting
In this folder, you can explore complete code demonstrating how to export an pdf file at server side. 

Click the **"Save as PDF"** button to perform the following actions on the server:
- Create an empty workbook
- Execute all of code in the code window
- Save to an pdf file

Then you can view the pdf in your browser.</comment>
  </data>
  <data name="PDFExporting.Name" xml:space="preserve">
    <value>PDF のエクスポート</value>
    <comment>PDF Exporting</comment>
  </data>
  <data name="SaveWorkbookToPDF.Name" xml:space="preserve">
    <value>ワークブックを PDF に保存</value>
    <comment>Save workbook to PDF</comment>
  </data>
  <data name="SaveWorksheetToPDF.Name" xml:space="preserve">
    <value>ワークシートを PDF に保存</value>
    <comment>Save worksheet to PDF</comment>
  </data>
  <data name="ConfigurePageSetup.Name" xml:space="preserve">
    <value>ページ設定</value>
    <comment>Page settings</comment>
  </data>
  <data name="SetFontsFolderPath.Name" xml:space="preserve">
    <value>フォントのフォルダの設定</value>
    <comment>Set font's folder</comment>
  </data>
  <data name="ShapeCopy.Name" xml:space="preserve">
    <value>図形のコピー</value>
    <comment>Copy shape</comment>
  </data>
  <data name="ShapeCut.Name" xml:space="preserve">
    <value>図形の切り取り</value>
    <comment>Cut shape</comment>
  </data>
  <data name="ShapeDuplicate.Name" xml:space="preserve">
    <value>図形の複製</value>
    <comment>Duplicate shape</comment>
  </data>
  <data name="ChartCopy.Name" xml:space="preserve">
    <value>チャートのコピー</value>
    <comment>Copy chart</comment>
  </data>
  <data name="ChartCut.Name" xml:space="preserve">
    <value>チャートの切り取り</value>
    <comment>Cut chart</comment>
  </data>
  <data name="ChartDuplicate.Name" xml:space="preserve">
    <value>チャートの複製</value>
    <comment>Duplicate chart</comment>
  </data>
  <data name="PictureCopy.Name" xml:space="preserve">
    <value>画像のコピー</value>
    <comment>Copy picture</comment>
  </data>
  <data name="PictureCut.Name" xml:space="preserve">
    <value>画像の切り取り</value>
    <comment>Cut picture</comment>
  </data>
  <data name="PictureDuplicate.Name" xml:space="preserve">
    <value>画像の複製</value>
    <comment>Duplicate picture</comment>
  </data>
  <data name="SlicerCopy.Name" xml:space="preserve">
    <value>スライサーのコピー</value>
    <comment>Copy slicer</comment>
  </data>
  <data name="SlicerCut.Name" xml:space="preserve">
    <value>スライサーの切り取り</value>
    <comment>Cut slicer</comment>
  </data>
  <data name="SlicerDuplicate.Name" xml:space="preserve">
    <value>スライサーの複製</value>
    <comment>Duplicate slicer</comment>
  </data>
  <data name="ImportCsvFileToWorkbook.Name" xml:space="preserve">
    <value>CSV ファイルをワークブックにインポート</value>
    <comment>Import csv file to workbook</comment>
  </data>
  <data name="ImportCsvFileToWorkbookWithOptions.Name" xml:space="preserve">
    <value>CSV ファイルをワークブックにインポート（オプション付き）</value>
    <comment>Import csv file to workbook with options</comment>
  </data>
  <data name="SaveWorksheetToCsvFile.Name" xml:space="preserve">
    <value>ワークシートを CSV ファイルに保存</value>
    <comment>Save worksheet to csv file</comment>
  </data>
  <data name="SaveWorkbookToCsvFile.Name" xml:space="preserve">
    <value>ワークブックを CSV ファイルに保存</value>
    <comment>Save workbook to csv file</comment>
  </data>
  <data name="SaveWorkbookToCsvFileWithOptions.Name" xml:space="preserve">
    <value>ワークブックを CSV ファイルに保存（オプション付き）</value>
    <comment>Save workbook to csv file with options</comment>
  </data>
  <data name="SaveWorksheetToCsvFileWithOptions.Name" xml:space="preserve">
    <value>ワークシートを CSV ファイルに保存（オプション付き）</value>
    <comment>Save worksheet to csv file with options</comment>
  </data>
  <data name="Performance.Name" xml:space="preserve">
    <value>パフォーマンス</value>
    <comment>Performance</comment>
  </data>
  <data name="ConfigureWorkbookView.Name" xml:space="preserve">
    <value>ワークブックビューの構成</value>
    <comment>Configure workbook view</comment>
  </data>
  <data name="ConfigureWorksheetView.Name" xml:space="preserve">
    <value>ワークシートビューの構成</value>
    <comment>Configure worksheet view</comment>
  </data>
  <data name="Text.Name" xml:space="preserve">
    <value>テキストのエクスポート</value>
    <comment>Export text</comment>
  </data>
  <data name="SaveSparklinesToPDF.Name" xml:space="preserve">
    <value>スパークラインのエクスポート</value>
    <comment>Export sparklines</comment>
  </data>
  <data name="TextStyle.Name" xml:space="preserve">
    <value>フォント効果のエクスポート</value>
    <comment>Export font effects</comment>
  </data>
  <data name="SaveRangeFillToPDF.Name" xml:space="preserve">
    <value>塗りつぶしのエクスポート</value>
    <comment>Export fills</comment>
  </data>
  <data name="SavePictureToPDF.Name" xml:space="preserve">
    <value>ピクチャのエクスポート</value>
    <comment>Export picture</comment>
  </data>
  <data name="NumberFormating.Name" xml:space="preserve">
    <value>数値書式のエクスポート</value>
    <comment>Export number formats</comment>
  </data>
  <data name="Overflow.Name" xml:space="preserve">
    <value>オーバーフローテキストのエクスポート</value>
    <comment>Export overflow text</comment>
  </data>
  <data name="ConfigureBlackAndWhite.Name" xml:space="preserve">
    <value>白黒印刷</value>
    <comment>Black &amp; white</comment>
  </data>
  <data name="ConfigureDraft.Name" xml:space="preserve">
    <value>下書き</value>
    <comment>Draft</comment>
  </data>
  <data name="ConfigureHeaderFooter.Name" xml:space="preserve">
    <value>ヘッダー/フッター</value>
    <comment>Header footer</comment>
  </data>
  <data name="ConfigureOritation.Name" xml:space="preserve">
    <value>向き</value>
    <comment>Orientation</comment>
  </data>
  <data name="ConfigurePageBreaks.Name" xml:space="preserve">
    <value>ページ区切り</value>
    <comment>Page breaks</comment>
  </data>
  <data name="ConfigurePageOrder.Name" xml:space="preserve">
    <value>ページの順序</value>
    <comment>Page order</comment>
  </data>
  <data name="ConfigurePagination.Name" xml:space="preserve">
    <value>用紙設定</value>
    <comment>Pagination</comment>
  </data>
  <data name="ConfigurePrintArea.Name" xml:space="preserve">
    <value>印刷範囲の指定</value>
    <comment>Print area</comment>
  </data>
  <data name="ConfigurePrintPageRange.Name" xml:space="preserve">
    <value>印刷するページの指定</value>
    <comment>Print page range</comment>
  </data>
  <data name="ConfigurePrintTitles.Name" xml:space="preserve">
    <value>印刷タイトル</value>
    <comment>Print titles</comment>
  </data>
  <data name="ConfigureScaling.Name" xml:space="preserve">
    <value>スケーリング</value>
    <comment>Scaling</comment>
  </data>
  <data name="PdfPageSetup.Descrip" xml:space="preserve">
    <value>## ページ設定
DioDocs for Excel では、IPageSetup インタフェースのプロパティを使用して、各ワークシートの用紙設定を行うことができます。

ページサイズ、印刷範囲、印刷タイトル行、印刷タイトル列をカスタマイズできます。
また、スプレッドシートを PDF ファイルにエクスポートする際に、水平方向のページ区切り、垂直方向のページ区切り、最大ページ数などの水平および垂直用紙設定を拡大/縮小率とともに必要に応じて指定できます。</value>
    <comment>## Page setup
GrapeCity Documents for Excel allows users to paginate each worksheet using the properties of the IPageSetup interface.

You can customize the page size, print area, print title rows, print title columns; specify horizontal page breaks, vertical page breaks, the maximum number of pages for horizontal and vertical pagination etc. along with zoom and scale factors as per your preferences while exporting a spreadsheet to a PDF file.</comment>
  </data>
  <data name="PdfPageSetup.Name" xml:space="preserve">
    <value>ページ設定</value>
    <comment>Page setup</comment>
  </data>
  <data name="ConvertExcelToPDF.Name" xml:space="preserve">
    <value>Excel ファイルを PDF に変換</value>
    <comment>Convert Excel file to PDF</comment>
  </data>
  <data name="SaveBorder.Name" xml:space="preserve">
    <value>境界線のエクスポート</value>
    <comment>Export borders</comment>
  </data>
  <data name="SaveConditionalFormatting.Name" xml:space="preserve">
    <value>条件付き書式設定のエクスポート</value>
    <comment>Export Conditional Formatting</comment>
  </data>
  <data name="SaveTable.Name" xml:space="preserve">
    <value>テーブルのエクスポート</value>
    <comment>Export table</comment>
  </data>
  <data name="FinancialKPIs.Name" xml:space="preserve">
    <value>ファイナンシャルKPI[英語データ]</value>
    <comment>Financial KPIs</comment>
  </data>
  <data name="IncomeStatement.Name" xml:space="preserve">
    <value>損益計算書[英語データ]</value>
    <comment>Income statement</comment>
  </data>
  <data name="AnnualFinancialReport.Name" xml:space="preserve">
    <value>年次財務報告書</value>
    <comment>Annual financial report</comment>
  </data>
  <data name="AgingReport.Name" xml:space="preserve">
    <value>延滞金レポート</value>
    <comment>Aging Report</comment>
  </data>
  <data name="Text.Descrip" xml:space="preserve">
    <value>## テキストのエクスポート
以下のようなさまざまなテキスト効果を PDF ファイルにエクスポートできます。
- Excel の数値フォーマッタ付きテキスト
- オーバーフローテキスト
- フォント効果：テキストの配置、ワードラップ、テキストインデント、縮小して全体を表示、下線、取り消し線など</value>
    <comment>## Export text
Various of text effect can be exported to pdf file, such as:
- Text with Excel number formatter
- Overflow text
- Font effects: text alignment, wordwrap, text indent, shrink to fit, underline, strikethrough .etc</comment>
  </data>
  <data name="CellInfo.Name" xml:space="preserve">
    <value>CellInfo ヘルパークラスの使用</value>
    <comment>Use CellInfo helper class</comment>
  </data>
  <data name="CustomFunctions.Descrip" xml:space="preserve">
    <value>## カスタム関数
DioDocs for Excel には独自のカスタム関数を作成する機能があり、必要なカスタム演算ロジックを簡単に作成できます。</value>
    <comment>## Custom Function
GcExcel provides you with the ability to create your own custom functions, allowing you to easily create any custom arithmetic logic you may need.</comment>
  </data>
  <data name="CustomFunctions.Name" xml:space="preserve">
    <value>カスタム関数</value>
    <comment>Custom Function</comment>
  </data>
  <data name="MyAddFunction.Name" xml:space="preserve">
    <value>カスタム関数</value>
    <comment>MyAddFunction</comment>
  </data>
  <data name="MyIsErrorFunction.Name" xml:space="preserve">
    <value>エラー判定関数</value>
    <comment>MyIsErrorFunction</comment>
  </data>
  <data name="MySumFunction.Name" xml:space="preserve">
    <value>独自の合計関数</value>
    <comment>MySumFunction</comment>
  </data>
  <data name="MyConcatenateFunction.Name" xml:space="preserve">
    <value>接続関数</value>
    <comment>MyConcatenateFunction</comment>
  </data>
  <data name="MyConditionalSumFunction.Name" xml:space="preserve">
    <value>条件付き合計関数</value>
    <comment>MyConditionalSumFunction</comment>
  </data>
  <data name="MyIsMergedRangeFunction.Name" xml:space="preserve">
    <value>範囲結合関数</value>
    <comment>MyIsMergedRangeFunction</comment>
  </data>
  <data name="CreateTwoSparklines.Name" xml:space="preserve">
    <value>2つのスパークラインを作成</value>
    <comment>Create Two sparklines</comment>
  </data>
  <data name="SimpleInvoiceJP.Name" xml:space="preserve">
    <value>請求書[日本語データ]</value>
    <comment>Japanese simple invoice </comment>
  </data>
  <data name="VerticalText.Name" xml:space="preserve">
    <value>縦書きテキスト</value>
    <comment>Export vertical text</comment>
  </data>
  <data name="CellRichText.Descrip" xml:space="preserve">
    <value>## セルのリッチテキスト
GcExcelは、ワークシートのセルにリッチテキストフォーマットを適用するためのサポートを提供します。
このフォルダ内の例は、次の方法を示しています。
- IRange.IRichText インターフェースを使用して、セル内のテキストランを追加およびフォーマットします。
- IRange.Characters() メソッドを使用して、セル内の文字範囲をフォーマットします。
- リッチテキストセルの各テキストランのフォントを設定します。</value>
    <comment>## Cell Rich Text
GcExcel provides support for applying rich text formatting in the cells of the worksheet. 
Examples in this folder demonstrate how to:
- Use IRange.IRichText interface to add and format text runs in a cell.
- Use IRange.Characters() method to format a range of characters in a cell.
- Configure font for each text run of rich text cell.</comment>
  </data>
  <data name="CellRichText.Name" xml:space="preserve">
    <value>セルのリッチテキスト</value>
    <comment>Cell Rich Text</comment>
  </data>
  <data name="CharacterCellText.Name" xml:space="preserve">
    <value>Character メソッドの使用</value>
    <comment>Use Character method</comment>
  </data>
  <data name="AddTextRun.Name" xml:space="preserve">
    <value>IRichText インタフェースの使用</value>
    <comment>Use IRichText interface</comment>
  </data>
  <data name="ConfigRunFont.Name" xml:space="preserve">
    <value>テキストランのフォントの構成</value>
    <comment>Configure text run's font</comment>
  </data>
  <data name="CreateStyleBasedOn.Name" xml:space="preserve">
    <value>他のスタイルに基づいてスタイルを作成および変更する</value>
    <comment>Create and modify style based on a style</comment>
  </data>
  <data name="ExportCellRichText.Name" xml:space="preserve">
    <value>セルのリッチテキスト</value>
    <comment>Cell rich text</comment>
  </data>
  <data name="ImportXlsmToWorkbook.Name" xml:space="preserve">
    <value>Excel ファイル(.xlsm)のインポート</value>
    <comment>Open and save xlsm file</comment>
  </data>
  <data name="LoadAndSaveJsonWithShapes.Name" xml:space="preserve">
    <value>オートシェイプを含む json 読み込みおよび保存</value>
    <comment>Load and save json containing shapes</comment>
  </data>
  <data name="SetBackgroundImage.Name" xml:space="preserve">
    <value>ワークシートの背景画像の設定</value>
    <comment>Set background image for worksheet</comment>
  </data>
  <data name="WebsiteFlowChart.Name" xml:space="preserve">
    <value>Web サイトのフローチャート</value>
    <comment>Website flow chart</comment>
  </data>
  <data name="PrintManager.Descrip" xml:space="preserve">
    <value>## PrintManager
GcExcel introduces PrintManager class to control pagination and spreadsheet content while exporting the spreadsheets to PDF. The feature can help control printing of specific parts of Excel to PDF documents, providing the users specific API that gets the pagination result in the PageInfo object - a list of pages generated from the excel file through PrintManager.Paginate method, and then perform operations like :

- Add/delete/modify pages.
- Change page number, page count, page content and page settings.</value>
  </data>
  <data name="PrintManager.Name" xml:space="preserve">
    <value>PrintManager</value>
  </data>
  <data name="CustomPageInfos.Name" xml:space="preserve">
    <value>Custom PageInfos</value>
  </data>
  <data name="RenderExcelRangesInsideAPDF.Name" xml:space="preserve">
    <value>Render excel ranges inside a pdf(Basic usage)</value>
    <comment>Render excel ranges inside a pdf(Basic usage)</comment>
  </data>
  <data name="SaveMultipleWorkbooksToPDF.Name" xml:space="preserve">
    <value>Save multiple workbooks to one pdf</value>
    <comment>Save Multiple Workbooks To One PDF</comment>
  </data>
  <data name="ControlAdjustingPageBreaks.Name" xml:space="preserve">
    <value>Control adjusting pageBreaks</value>
    <comment>Control adjusting pageBreaks</comment>
  </data>
  <data name="ConfigPrintTailRows.Name" xml:space="preserve">
    <value>Configure rows to repeat at bottom</value>
  </data>
  <data name="ConfigPrintTailColumns.Name" xml:space="preserve">
    <value>Configure columns to repeat at right</value>
  </data>
  <data name="ConfigurePrintTails.Name" xml:space="preserve">
    <value>Print Tails</value>
  </data>
  <data name="CopyPasteOptions.Name" xml:space="preserve">
    <value>コピーの貼り付けオプション</value>
    <comment>Paste options of copy</comment>
  </data>
  <data name="CopyWorksheet.Name" xml:space="preserve">
    <value>ワークシートをコピーする</value>
    <comment>Copy worksheet</comment>
  </data>
  <data name="MoveWorksheet.Name" xml:space="preserve">
    <value>ワークシートを移動する</value>
    <comment>Move worksheet</comment>
  </data>
  <data name="CutCopyRangeBetweenWorkbooks.Name" xml:space="preserve">
    <value>ワークブック間で範囲を切り取りまたはコピーする</value>
    <comment>Cut or copy range between workbooks</comment>
  </data>
  <data name="ShrinkToFitForWrappedText.Name" xml:space="preserve">
    <value>Shrink to fit for wrapped text</value>
  </data>
  <data name="PrintSpecificPages.Name" xml:space="preserve">
    <value>Print specific pages</value>
  </data>
  <data name="KeepTogether.Name" xml:space="preserve">
    <value>Keep together certain data</value>
  </data>
  <data name="PrintMultipleWorksheetsToOnePage.Name" xml:space="preserve">
    <value>Print multiple worksheets to one page</value>
  </data>
  <data name="ManageHeadersOnDifferentPages.Name" xml:space="preserve">
    <value>Repeat different headers on different pages</value>
  </data>
  <data name="CopyWorksheetBetweenWorkbooks.Name" xml:space="preserve">
    <value>ワークブック間でワークシートをコピーする</value>
    <comment>Copy worksheet between workbooks</comment>
  </data>
  <data name="MoveWorksheetBetweenWorkbooks.Name" xml:space="preserve">
    <value>ワークブック間でワークシートを移動する</value>
    <comment>Move worksheet between workbooks</comment>
  </data>
  <data name="FindAndReplace.Descrip" xml:space="preserve">
    <value>## Find and Replace
The examples in this folder demonstrate the following cases:
- Find in a Range
- Replace in a Range</value>
  </data>
  <data name="FindAndReplace.Name" xml:space="preserve">
    <value>Find and Replace</value>
  </data>
  <data name="FindBasicUsage.Name" xml:space="preserve">
    <value>Find (Basic usage)</value>
  </data>
  <data name="FindDisplayFormat.Name" xml:space="preserve">
    <value>Find (With cell format)</value>
  </data>
  <data name="FindLookAtSearchOrderDirectionMatchCase.Name" xml:space="preserve">
    <value>Find (Options combination)</value>
  </data>
  <data name="FindMatchByte.Name" xml:space="preserve">
    <value>Find (Match byte)</value>
  </data>
  <data name="FindWithAfter.Name" xml:space="preserve">
    <value>Find (Enumerate all occurrences)</value>
  </data>
  <data name="FindWithLookIn.Name" xml:space="preserve">
    <value>Find (Look in different places)</value>
  </data>
  <data name="ReplaceBasicUsage.Name" xml:space="preserve">
    <value>Replace (Basic usage)</value>
  </data>
  <data name="ReplaceCustomWrapSearch.Name" xml:space="preserve">
    <value>Replace (With wrap search)</value>
  </data>
  <data name="ReplaceWithOptions.Name" xml:space="preserve">
    <value>Replace (With options)</value>
  </data>
  <data name="ImportOleObjectsToWorkbookAndExport.Name" xml:space="preserve">
    <value>Import and export OLE objects</value>
  </data>
  <data name="DrawRangeInsideAPDF.Name" xml:space="preserve">
    <value>Render excel ranges inside a pdf(Advanced usage)</value>
    <comment>Render excel ranges inside a pdfAdvanced usage)</comment>
  </data>
  <data name="ConvertRangeToImage.Name" xml:space="preserve">
    <value />
    <comment>Convert range to image</comment>
  </data>
  <data name="ConvertShapeToImage.Name" xml:space="preserve">
    <value />
    <comment>Convert shape to image</comment>
  </data>
  <data name="ExportSheetToImage.Name" xml:space="preserve">
    <value />
    <comment>Convert sheet to image from existing file</comment>
  </data>
  <data name="SaveSheetBackgroundToPDF.Name" xml:space="preserve">
    <value>シートの背景画像をエクスポート</value>
    <comment>Export sheet background image</comment>
  </data>
  <data name="SetSecurityOptionsToPDF.Name" xml:space="preserve">
    <value>PDFドキュメントのセキュリティオプションを設定する</value>
    <comment>Set security options for PDF document</comment>
  </data>
  <data name="SetDocumentPropertiesToPDF.Name" xml:space="preserve">
    <value>40/5000
PDFドキュメントのドキュメントプロパティを設定する</value>
    <comment>Set document properties for PDF document</comment>
  </data>
  <data name="ProtectWorkbook.Name" xml:space="preserve">
    <value>ブックを保護する</value>
    <comment>Protect workbook</comment>
  </data>
  <data name="UnprotectWorkbook.Name" xml:space="preserve">
    <value>ワークブックの保護を解除</value>
    <comment>Unprotect workbook</comment>
  </data>
  <data name="AddUserShapes.Name" xml:space="preserve">
    <value />
    <comment>Add user shapes</comment>
  </data>
  <data name="AddSubtotal.Name" xml:space="preserve">
    <value>Add subtotal</value>
  </data>
  <data name="AddSubtotalAdvanced.Name" xml:space="preserve">
    <value>Add subtotal with options</value>
  </data>
  <data name="HideGrandTotalsInPivotTable.Name" xml:space="preserve">
    <value>Grand total visibility</value>
  </data>
  <data name="RemoveSubtotal.Name" xml:space="preserve">
    <value>Remove subtotals</value>
  </data>
  <data name="RowAxisLayoutInPivotTable.Name" xml:space="preserve">
    <value>Change row axis layout</value>
  </data>
  <data name="SetPivotFieldNameInPivotTable.Name" xml:space="preserve">
    <value>Rename a pivot field</value>
  </data>
  <data name="ShapeGroup.Name" xml:space="preserve">
    <value>Group shapes</value>
  </data>
  <data name="AddSubtotal.Descrip" xml:space="preserve">
    <value>Add subtotal to a range with IRange.Subtotal</value>
  </data>
  <data name="AddSubtotalAdvanced.Descrip" xml:space="preserve">
    <value>Add subtotal to a range with IRange.Subtotal (Advanced)</value>
  </data>
  <data name="HideGrandTotalsInPivotTable.Descrip" xml:space="preserve">
    <value>Set visibility of row and column grand totals</value>
  </data>
  <data name="RemoveSubtotal.Descrip" xml:space="preserve">
    <value>Remove subtotals with IRange.RemoveSubtotal</value>
  </data>
  <data name="RowAxisLayoutInPivotTable.Descrip" xml:space="preserve">
    <value>Set row axis layout to tabular with IPivotTable.SetRowAxisLayout</value>
  </data>
  <data name="SetPivotFieldNameInPivotTable.Descrip" xml:space="preserve">
    <value>Rename a pivot field with IPivotField.Name property</value>
  </data>
  <data name="ShapeGroup.Descrip" xml:space="preserve">
    <value>Group shapes with IShapeRange.Group</value>
  </data>
  <data name="SaveSlicer.Descrip" xml:space="preserve">
    <value>Slicers can be exported to pdf</value>
  </data>
  <data name="SaveSlicer.Name" xml:space="preserve">
    <value>Export slicers</value>
  </data>
  <data name="AddChartSheet.Name" xml:space="preserve">
    <value />
    <comment>Add a chart sheet</comment>
  </data>
  <data name="AddSunburstChart.Name" xml:space="preserve">
    <value />
    <comment>Add a sunburst chart</comment>
  </data>
  <data name="NewCharts.Descrip" xml:space="preserve">
    <value />
    <comment>## Excel 2016 New Charts
GrapeCity Documents for Excel adds Excel 2016 new charts by calling **IShapes.AddChart** method and setting different **ChartType** . GrapeCity Documents for Excel supports the following types of new charts:
- Sunburst
- Treemap
- Funnel
- Waterfall
- Box&amp;Whisker
- Histogram
- Pareto</comment>
  </data>
  <data name="NewCharts.Name" xml:space="preserve">
    <value />
    <comment>Excel 2016 New Charts</comment>
  </data>
  <data name="AddTreeMapChart.Name" xml:space="preserve">
    <value />
    <comment>Add a treemap chart</comment>
  </data>
  <data name="AddFunnelChart.Name" xml:space="preserve">
    <value />
    <comment>Add a funnel chart</comment>
  </data>
  <data name="AddWaterfallChart.Name" xml:space="preserve">
    <value />
    <comment>Add a waterfall chart</comment>
  </data>
  <data name="ConfigAdjustmentPoints.Name" xml:space="preserve">
    <value>Adjustment Points</value>
    <comment>Adjustment Points</comment>
  </data>
  <data name="ConfigureBestFitRowColumn.Name" xml:space="preserve">
    <value>BestFit Row &amp; Column</value>
    <comment>BestFit Row &amp; Column</comment>
  </data>
  <data name="Tag.Name" xml:space="preserve">
    <value>Tag of sheet/row/column/cell</value>
    <comment>Tag of sheet/row/column/cell</comment>
  </data>
  <data name="AddBoxWhiskerChart.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create a box&amp;whisker chart.</comment>
  </data>
  <data name="AddBoxWhiskerChart.Name" xml:space="preserve">
    <value />
    <comment>Add a box&amp;whisker chart</comment>
  </data>
  <data name="AddFunnelChart.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create a funnel chart.</comment>
  </data>
  <data name="AddHistogramChart.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create a histogram chart.</comment>
  </data>
  <data name="AddHistogramChart.Name" xml:space="preserve">
    <value />
    <comment>Add a histogram chart</comment>
  </data>
  <data name="AddParetoChart.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create a pareto chart.</comment>
  </data>
  <data name="AddParetoChart.Name" xml:space="preserve">
    <value />
    <comment>Add a pareto chart</comment>
  </data>
  <data name="AddSunburstChart.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create a sunburst chart.</comment>
  </data>
  <data name="AddTreeMapChart.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create a treemap chart.</comment>
  </data>
  <data name="AddWaterfallChart.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create a waterfall chart.</comment>
  </data>
  <data name="CreateShapeWithHyperlink.Name" xml:space="preserve">
    <value />
    <comment>Create hyperlinks on shape</comment>
  </data>
  <data name="AreaChartPdf.Name" xml:space="preserve">
    <value>Area Chart</value>
  </data>
  <data name="ExportChart.Descrip" xml:space="preserve">
    <value>## Export chart
GrapeCity Documents for Excel supports exporting charts to PDF file.

- Column
- Line
- Pie
- Bar
- Area
- X Y(Scatter)
- Stock
- Radar
- Combo</value>
    <comment>## Export chart
GrapeCity Documents for Excel supports exporting charts to PDF file.

- Column
- Line
- Pie
- Bar
- Area
- X Y(Scatter)
- Stock
- Radar
- Combo</comment>
  </data>
  <data name="ExportChart.Name" xml:space="preserve">
    <value>Export Chart</value>
  </data>
  <data name="BarChartPdf.Name" xml:space="preserve">
    <value>Bar Chart</value>
  </data>
  <data name="ChartGalleryPdf.Name" xml:space="preserve">
    <value>Export Chart Gallery</value>
  </data>
  <data name="ColumnChartPdf.Name" xml:space="preserve">
    <value>Column Chart</value>
  </data>
  <data name="ComboChartPdf.Name" xml:space="preserve">
    <value />
    <comment>Combo Chart</comment>
  </data>
  <data name="LineChartPdf.Name" xml:space="preserve">
    <value>Line Chart</value>
  </data>
  <data name="PieChartPdf.Name" xml:space="preserve">
    <value>Pie Chart</value>
  </data>
  <data name="RadarChartPdf.Name" xml:space="preserve">
    <value>Radar Chart</value>
  </data>
  <data name="StockChartPdf.Name" xml:space="preserve">
    <value>Stock Chart</value>
  </data>
  <data name="XYScatterChartPdf.Name" xml:space="preserve">
    <value>X Y(Scatter) Chart</value>
  </data>
  <data name="AddChartSheet.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create a chart sheet.</comment>
  </data>
  <data name="AddUserShapes.Descrip" xml:space="preserve">
    <value />
    <comment>Insert pictures, shapes into a chart. These inserted pictures or shapes are called the user shapes of this chart.</comment>
  </data>
  <data name="CreateShapeWithHyperlink.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to add a hyperlink to a shape.</comment>
  </data>
  <data name="ProtectWorkbook.Descrip" xml:space="preserve">
    <value />
    <comment>Using IWorkbook.Protect method to protect a workbook.</comment>
  </data>
  <data name="SaveSheetBackgroundToPDF.Descrip" xml:space="preserve">
    <value />
    <comment>GrapeCity Documents for Excel supports exporting the sheet background image to pdf.</comment>
  </data>
  <data name="SetDocumentPropertiesToPDF.Descrip" xml:space="preserve">
    <value />
    <comment>GrapeCity Documents for Excel supports setting the document properties when saving pdf.</comment>
  </data>
  <data name="SetSecurityOptionsToPDF.Descrip" xml:space="preserve">
    <value />
    <comment>GrapeCity Documents for Excel supports setting the security options when saving pdf.</comment>
  </data>
  <data name="UnprotectWorkbook.Descrip" xml:space="preserve">
    <value />
    <comment>Using IWorkbook.Unprotect method to unprotect a workbook.</comment>
  </data>
  <data name="ShapeUngroup.Descrip" xml:space="preserve">
    <value>Ungroup shape with IShape.Ungroup</value>
  </data>
  <data name="ShapeUngroup.Name" xml:space="preserve">
    <value>Ungroup shape</value>
  </data>
  <data name="AddButtonCellType.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create the button cell type for a cell.</comment>
  </data>
  <data name="AddButtonCellType.Name" xml:space="preserve">
    <value />
    <comment>Button cell type</comment>
  </data>
  <data name="AddCheckBoxCellType.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create the checkbox cell type for a cell.</comment>
  </data>
  <data name="AddCheckBoxCellType.Name" xml:space="preserve">
    <value />
    <comment>Checkbox cell type</comment>
  </data>
  <data name="AddComboBoxCellType.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create the combobox cell type for a cell.</comment>
  </data>
  <data name="AddComboBoxCellType.Name" xml:space="preserve">
    <value />
    <comment>Combobox cell type</comment>
  </data>
  <data name="AddHyperlinkCellType.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create the hyperlink cell type for a cell.</comment>
  </data>
  <data name="AddHyperlinkCellType.Name" xml:space="preserve">
    <value />
    <comment>Hyperlink cell type</comment>
  </data>
  <data name="AddRowColumnCellType.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create the cell type for row/column.</comment>
  </data>
  <data name="AddRowColumnCellType.Name" xml:space="preserve">
    <value />
    <comment>Set cell type for row/column</comment>
  </data>
  <data name="AddSheetCellType.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to create the cell type for the whole worksheet.</comment>
  </data>
  <data name="AddSheetCellType.Name" xml:space="preserve">
    <value />
    <comment>Set cell type for the sheet</comment>
  </data>
  <data name="CellType.Descrip" xml:space="preserve">
    <value />
    <comment>## CellType
The examples in this folder demonstrate how to create cell types. Following cell types are supported:
- Button cell type
- Checkbox cell type
- Combobox cell type
- Hyperlink cell type</comment>
  </data>
  <data name="Dependents.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to get the dependents of a cell.</comment>
  </data>
  <data name="Dependents.Name" xml:space="preserve">
    <value />
    <comment>Dependents</comment>
  </data>
  <data name="Precedents.Descrip" xml:space="preserve">
    <value />
    <comment>This sample demonstrates how to get the precedents of a cell.</comment>
  </data>
  <data name="Precedents.Name" xml:space="preserve">
    <value />
    <comment>Precedents</comment>
  </data>
  <data name="Precedentsanddependents.Descrip" xml:space="preserve">
    <value />
    <comment>The examples in this folder demonstrate how to get the precedents or dependents of a cell.</comment>
  </data>
  <data name="Precedentsanddependents.Name" xml:space="preserve">
    <value />
    <comment>Precedents &amp; dependents</comment>
  </data>
  <data name="GetAllPrecedents.Descrip" xml:space="preserve">
    <value />
    <comment>Get all the precedents with a loop.</comment>
  </data>
  <data name="GetAllPrecedents.Name" xml:space="preserve">
    <value />
    <comment>Get all the precedents</comment>
  </data>
  <data name="AreaChartPdf.Descrip" xml:space="preserve">
    <value>Export area chart to PDF file</value>
  </data>
  <data name="BarChartPdf.Descrip" xml:space="preserve">
    <value>Export bar chart to PDF file</value>
  </data>
  <data name="ChartGalleryPdf.Descrip" xml:space="preserve">
    <value>In this example, GcExcel first opens an Excel file that contains some charts, then export it to a PDF file.</value>
  </data>
  <data name="ColumnChartPdf.Descrip" xml:space="preserve">
    <value>Export column chart to PDF file</value>
  </data>
  <data name="ComboChartPdf.Descrip" xml:space="preserve">
    <value />
    <comment>Export combo chart to PDF file</comment>
  </data>
  <data name="ConfigAdjustmentPoints.Descrip" xml:space="preserve">
    <value>Use IShape.Adjustments to get/set adjustment points for shapes.</value>
  </data>
  <data name="ConfigureBestFitRowColumn.Descrip" xml:space="preserve">
    <value>Set best fit row/column to auto fit row height/column width when exporting PDF</value>
  </data>
  <data name="LineChartPdf.Descrip" xml:space="preserve">
    <value>Export line chart to PDF file</value>
  </data>
  <data name="PieChartPdf.Descrip" xml:space="preserve">
    <value>Export pie chart to PDF file</value>
  </data>
  <data name="RadarChartPdf.Descrip" xml:space="preserve">
    <value>Export radar chart to PDF file</value>
  </data>
  <data name="StockChartPdf.Descrip" xml:space="preserve">
    <value>Export stock chart to PDF file</value>
  </data>
  <data name="Tag.Descrip" xml:space="preserve">
    <value>Tag provides the ability to store private data in cell/row/column/sheet.</value>
  </data>
  <data name="XYScatterChartPdf.Descrip" xml:space="preserve">
    <value>Export XYScatter chart to PDF file</value>
  </data>
  <data name="CellStyle.Name" xml:space="preserve">
    <value>セルスタイル</value>
    <comment>Cell style</comment>
  </data>
  <data name="CustomObject.Name" xml:space="preserve">
    <value>カスタムオブジェクト</value>
    <comment>Custom object</comment>
  </data>
  <data name="DataSet.Name" xml:space="preserve">
    <value>データセット</value>
    <comment>DataSet</comment>
  </data>
  <data name="DataSource.Descrip" xml:space="preserve">
    <value>## 情報元
テンプレートAPIは、Excelテンプレートを次のオブジェクトからのデータに直接バインドできます。

-**DataSet / DataTable：**任意のタイプのDBからのデータソースを処理できます
-**カスタムオブジェクト：**これらはユーザー定義のオブジェクトです。 Json String / File / XMLなどからのデータソースを処理できます。つまり、カスタムオブジェクトとしてシリアル化できるデータソースです。
-**変数：**コード内のユーザー定義変数。
-**配列/リスト：**ユーザー定義の配列/リストコード。</value>
    <comment>## Data source
The template API can bind Excel templates directly with data from following objects:

- **DataSet/DataTable:** Can handle data source from any type of DB
- **Custom Object:** These are user defined objects. Can handle data source from Json String/File/XML, etc. That is, any data souce that can be serialized as a custom object.
- **Variable:** User defined variable in code.
- **Array/List:** User defined array/list in code.</comment>
  </data>
  <data name="DataSource.Name" xml:space="preserve">
    <value>情報元</value>
    <comment>Data source</comment>
  </data>
  <data name="DataTable.Name" xml:space="preserve">
    <value>データ表</value>
    <comment>DataTable</comment>
  </data>
  <data name="DataTemplate.Name" xml:space="preserve">
    <value>データテンプレート</value>
    <comment>Data template</comment>
  </data>
  <data name="ExpressionTemplate.Name" xml:space="preserve">
    <value>式テンプレート</value>
    <comment>Expression template</comment>
  </data>
  <data name="FinancialDashboard.Name" xml:space="preserve">
    <value>財務ダッシュボード</value>
    <comment>Financial dashboard</comment>
  </data>
  <data name="FunctionTemplate.Name" xml:space="preserve">
    <value>関数テンプレート</value>
    <comment>Function template</comment>
  </data>
  <data name="InlineTemplate.Name" xml:space="preserve">
    <value>インラインテンプレート</value>
    <comment>Inline template</comment>
  </data>
  <data name="JsonFile.Name" xml:space="preserve">
    <value>JSONファイル</value>
    <comment>Json file</comment>
  </data>
  <data name="MergeCell.Name" xml:space="preserve">
    <value>セルを結合</value>
    <comment>Merge cell</comment>
  </data>
  <data name="Properties.Descrip" xml:space="preserve">
    <value>##プロパティ
GcExcelは、括弧**（**および**）**を使用して、すべてのテンプレートプロパティを整理します。 プロパティはキーと値の形式で設定されます。 複数のプロパティはコンマを使用して区切られます。

プロパティ名と値は大文字と小文字を区別しません。

たとえば、（context = A1）は（Context = a1）と等しくなります。

プロパティ名と事前定義された値は、フルネームと略記をサポートします。

例：（E = H）は（expansion = horizontal）と同じです。

テンプレートには多くのプロパティがあります：

-**C(context)：**セルコンテキスト
-**E(expansion)：**拡張タイプ
-**G(group)：**グループタイプ
-**R(range)：**指定された範囲内のテンプレートのフォールバックコンテキストを設定します
-**S(sort)：**ソートタイプ
-**PB(pagebreak)：**レポートファイルに改ページを追加</value>
    <comment>## Properties
GcExcel use parenthese **(** and **)** to organize all template properties. Property is set in key-value format. Multiple properties are separated using comma.

Property name and value are case-insensitive. 

For example: (context=A1) is equal to (Context = a1).

Property name and predefined value support full name and shorthand. 

For example: (E = H) is equal to (expansion = horizontal).

The template provides lots of properties:

- **C(context):** Cell context
- **E(expansion):** Expansion type
- **G(group):** Group type
- **R(range):** Set a fallback context for the templates in the specified range
- **S(sort):** Sort type
- **PB(pagebreak):** Add a pagebreak in report file</comment>
  </data>
  <data name="Properties.Name" xml:space="preserve">
    <value>物性</value>
    <comment>Properties</comment>
  </data>
  <data name="PurchaseOrder.Name" xml:space="preserve">
    <value>注文書</value>
    <comment>Purchase order</comment>
  </data>
  <data name="Sales.Name" xml:space="preserve">
    <value>販売レポート</value>
    <comment>Sales</comment>
  </data>
  <data name="SetContext.Name" xml:space="preserve">
    <value>コンテキストを設定</value>
    <comment>Set context</comment>
  </data>
  <data name="SetExpansionType.Name" xml:space="preserve">
    <value>拡張タイプを設定</value>
    <comment>Set expansion type</comment>
  </data>
  <data name="SetGroupType.Name" xml:space="preserve">
    <value>グループタイプを設定</value>
    <comment>Set group type</comment>
  </data>
  <data name="SetPagebreak.Name" xml:space="preserve">
    <value>改ページを設定する</value>
    <comment>Set pagebreak</comment>
  </data>
  <data name="SetRange.Name" xml:space="preserve">
    <value>設定範囲</value>
    <comment>Set range</comment>
  </data>
  <data name="SetSortType.Name" xml:space="preserve">
    <value>ソートタイプを設定</value>
    <comment>Set sort type</comment>
  </data>
  <data name="SheetTemplate.Name" xml:space="preserve">
    <value>ワークシートテンプレート</value>
    <comment>Sheet template</comment>
  </data>
  <data name="ShippingAndDeliveryOrder.Name" xml:space="preserve">
    <value>配送と配送の注文</value>
    <comment>Shipping &amp; delivery order</comment>
  </data>
  <data name="Style.Descrip" xml:space="preserve">
    <value>## スタイル
このテンプレートは、セルに適用されるセルスタイルと結合スタイルをサポートします。 データは、セルに適用されたスタイルに従って増加します。</value>
    <comment>## Style
The templates support cell style and merged styles applied on the cell. The data will grow as per the style applied on the cells.</comment>
  </data>
  <data name="Style.Name" xml:space="preserve">
    <value>スタイル</value>
    <comment>Style</comment>
  </data>
  <data name="TablixReport.Name" xml:space="preserve">
    <value>Tablixレポート</value>
    <comment>Tablix report</comment>
  </data>
  <data name="TemplateCell.Descrip" xml:space="preserve">
    <value>##型板単体
GcExcelは** "{{" **および** "}}" **をテンプレートタグとして使用します。

これらのタグ間で、ユーザーはデータフィールド、関数フィールド、式フィールド、および多くの属性を使用できます。

テンプレートは、さまざまなテンプレートセルをサポートしています。

-**データテンプレート：**データフィールドを表すテンプレート
-**関数テンプレート：**関数を表すテンプレート
-**フォーミュラ：**数式を表すテンプレートで、テンプレート処理後に数式として残ります
-**式テンプレート：**式のテンプレートを表します
-**インラインテンプレート：**テキストのインラインテンプレート
-**ワークシートテンプレート：**ワークシート名のテンプレート
-**イメージテンプレート：**画像を表すテンプレートで、生成されたレポートに画像として表示されます</value>
    <comment>## Template cell
GcExcel use **“{{”** and **“}}”** as markers of template.

Between these markers, user can use data field, function field, expression field and lots of properties.

The template supports kinds of template cells:

- **data template:** a template representing a data field
- **function template:** a template representing a function
- **formula template:** a template representing a formula, and will be remained as formula after template processing
- **expression template:** a template representing an expression
- **inline template:** inline template for use with text
- **sheet template:** template in the sheet name
- **image template:** a template representing an image, and will be shown as image in the generated report</comment>
  </data>
  <data name="TemplateCell.Name" xml:space="preserve">
    <value>テンプレートセル</value>
    <comment>Template cell</comment>
  </data>
  <data name="Template.Descrip" xml:space="preserve">
    <value>##テンプレート
GcExcel（GrapeCity Documents for Excel）は、包括的な構文とAPIを備えた新しいテンプレートのサポートを導入し、Excelドキュメントをデータにバインドし、高度なレイアウトでExcelレポートを生成します。

柔軟な構文とデータ拡張と数式の簡単な表記法により、新しいテンプレート構文とAPIにより、Excelテンプレートを簡単に定義し、多数のユースケースをサポートするExcelレポートを生成できます。

このセクションでは、**GcExcelテンプレート** の機能の使用方法を学習します。また、テンプレートとレポートの全体像を把握するためのユーザーサンプルもいくつかあります。

**「実行」**ボタンをクリックして、サーバーで次のアクションを実行します。
-空のワークブックを作成する
-コードウィンドウですべてのコードを実行する
-Excelファイルに保存する

その後、Excelファイルをダウンロードして結果を表示できます。

**注**：このデモでは、Spread.Sheetsは読み取り専用モードです。一部の機能がインタラクティブではない場合でも心配しないでください。完全に機能するExcelファイルをダウンロードして、機能を操作します。</value>
    <comment>## Templates
GcExcel(GrapeCity Documents for Excel) introduces new templates support with comprehensive syntax and API to bind Excel documents to data and generate Excel reports with advanced layouts.

With flexible syntax and easy notations for data expansion and formulas, the new template syntax and API will make it easy to define Excel templates and generate Excel reports supporting numerous use cases.

In this section, you'll learn how to use features of **GcExcel Template**. And also, there're several user samples for you to have a entire vision of templates and reports.

Click the **"Run"** button to perform the following actions on the server:
- Create an empty workbook
- Execute all of the code in the code window
- Save to an Excel file

Then you can view the results by downloading the Excel file.

**NOTE**: In this demo, Spread.Sheets is in read-only mode. Don't be alarmed if some features are not interactive. Download the fully functional  Excel file to interact with the features.</comment>
  </data>
  <data name="Templates.Name" xml:space="preserve">
    <value>テンプレート</value>
    <comment>Template</comment>
  </data>
  <data name="TemplateSamples.Descrip" xml:space="preserve">
    <value>##テンプレートの例
ユーザーの例では、** GcExcelテンプレート**および生成されたレポートの包括的なビューが提供されます。</value>
    <comment>## Template samples
User samples for you to have an entire vision of **GcExcel Templates** and generated reports.</comment>
  </data>
  <data name="TemplateSamples.Name" xml:space="preserve">
    <value>テンプレートのサンプル</value>
    <comment>Template samples</comment>
  </data>
  <data name="Travel.Name" xml:space="preserve">
    <value>旅行レポート</value>
    <comment>Travel</comment>
  </data>
  <data name="Variable.Name" xml:space="preserve">
    <value>変数</value>
    <comment>Variable</comment>
  </data>
  <data name="CellStyle.Descrip" xml:space="preserve">
    <value>ユーザーはテンプレートでExcelのセルスタイルを直接使用できます。

データが大きくなると、スタイルがセルに適用されます。</value>
    <comment>User can directly use Excel's cell style in the template. 

The style will be applied to the cells as per the data grow.</comment>
  </data>
  <data name="CustomObject.Descrip" xml:space="preserve">
    <value>ユーザーはカスタムオブジェクトをGcExcelテンプレートのデータソースとして使用し、そのフィールドとプロパティをテンプレートのデータフィールドとして使用できます。</value>
    <comment>User can use custom object as the data source of GcExcel Template, and take its fields and properties as data field in template.</comment>
  </data>
  <data name="DataSet.Descrip" xml:space="preserve">
    <value>ユーザーは、GcExcelテンプレートのデータソースとして.Net **DataSet**を使用できます。</value>
    <comment>User can use .Net DataSet as the data source of GcExcel Template.</comment>
  </data>
  <data name="DataTable.Descrip" xml:space="preserve">
    <value>ユーザーは、GcExcelテンプレートのデータソースとして.Net **DataTable**を使用できます。</value>
    <comment>User can use .Net DataTable as the data source of GcExcel Template.</comment>
  </data>
  <data name="DataTemplate.Descrip" xml:space="preserve">
    <value>データソースのデータフィールドを表すテンプレート。</value>
    <comment>The template which represent a data field of data source.</comment>
  </data>
  <data name="ExpressionTemplate.Descrip" xml:space="preserve">
    <value>式の形式のテンプレート</value>
    <comment>The template which is an expression.</comment>
  </data>
  <data name="FunctionTemplate.Descrip" xml:space="preserve">
    <value>関数フォームテンプレート</value>
    <comment>The template which is an function.</comment>
  </data>
  <data name="InlineTemplate.Descrip" xml:space="preserve">
    <value>テキスト内のインラインテンプレートに使用されます。</value>
    <comment>The inline template in text.</comment>
  </data>
  <data name="JsonFile.Descrip" xml:space="preserve">
    <value>ユーザーはGcExcelテンプレートのデータソースとしてjsonファイルを使用できます。 この前に、ユーザーはファイルからデータを読み取り、カスタムオブジェクトにシリアル化する必要があります。
実際、ユーザーはデータソースとしてカスタムオブジェクトにシリアル化できる任意のデータを使用できます。</value>
    <comment>User can use a json file as the data source of GcExcel Template. Before this, user should read data from the file and serialize it to an custom object.
Actually, user can use any data which can be serialized to an custom object as the data souce.</comment>
  </data>
  <data name="MergeCell.Descrip" xml:space="preserve">
    <value>ユーザーはテンプレート内の結合セルを使用できます。

GcExcelは、テンプレート内のマージセルの意味を理解しようとし、期待されるレポートを生成します。</value>
    <comment>User can use merge cells in the template. 

GcExcel will try to understand the meanings of merge cell in template, and generate expected report.</comment>
  </data>
  <data name="SetContext.Descrip" xml:space="preserve">
    <value>ユーザーは **C(context)** プロパティを使用して、テンプレートのコンテキストを明示的に設定できます。</value>
    <comment>User can use C(context) property to set a template's context explicitly.</comment>
  </data>
  <data name="SetExpansionType.Descrip" xml:space="preserve">
    <value>ユーザーは **E(expansion)** プロパティを使用して、テンプレートの展開タイプを設定できます。</value>
    <comment>User can use E(expansion) property to set a template's expansion type.</comment>
  </data>
  <data name="SetGroupType.Descrip" xml:space="preserve">
    <value>ユーザーは **G(group)** プロパティを使用して、テンプレートのグループタイプを設定できます。</value>
    <comment>User can use G(group) property to set a template's group type.</comment>
  </data>
  <data name="SetPagebreak.Descrip" xml:space="preserve">
    <value>ユーザーは、テンプレートの PB(pagebreak) プロパティを使用して、レポートに改ページを動的に挿入できます。</value>
    <comment>User can use PB(pagebreak) property on a template to insert a pagebreak dynamically for the report.</comment>
  </data>
  <data name="SetRange.Descrip" xml:space="preserve">
    <value>ユーザーは **R(range)** プロパティを使用して、現在のテンプレートの範囲を設定できます。

指定された範囲内で、テンプレートセルにデフォルトのコンテキストも明示的なコンテキストもない場合、現在のテンプレートをそのコンテキストとして使用します。</value>
    <comment>User can use R(range) property to set a range for the current template.
In the specified range, if a template cell has no default context nor explicit context, it will take the current template as its context.</comment>
  </data>
  <data name="SetSortType.Descrip" xml:space="preserve">
    <value>ユーザーは **S(sort)** プロパティを使用して、テンプレートのソートタイプを設定できます。</value>
    <comment>User can use S(sort) property to set a template's sort type.</comment>
  </data>
  <data name="SheetTemplate.Descrip" xml:space="preserve">
    <value>ワークシートの名前のテンプレート。</value>
    <comment>The template in the name of the workseet.</comment>
  </data>
  <data name="Variable.Descrip" xml:space="preserve">
    <value>ユーザーは、コードで定義された**変数**をGcExcelテンプレートのデータソースとして使用できます。</value>
    <comment>User can use variable defined in code as the data source of GcExcel Template.</comment>
  </data>
  <data name="DepartmentBudget.Name" xml:space="preserve">
    <value>部門予算</value>
    <comment>Department Budget</comment>
  </data>
  <data name="ProtectWorksheetWithPassword.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to protect a worksheet with a password.</comment>
  </data>
  <data name="ProtectWorksheetWithPassword.Name" xml:space="preserve">
    <value />
    <comment>Protect worksheet with password</comment>
  </data>
  <data name="UnprotectWorksheetWithPassword.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to unprotect the worksheet with a password.</comment>
  </data>
  <data name="UnprotectWorksheetWithPassword.Name" xml:space="preserve">
    <value />
    <comment>Unprotect worksheet with password</comment>
  </data>
  <data name="ExportShapeToImage.Name" xml:space="preserve">
    <value />
    <comment>Convert shape to image from existing file</comment>
  </data>
  <data name="ConvertChartToImage.Name" xml:space="preserve">
    <value />
    <comment>Convert chart to image</comment>
  </data>
  <data name="ExportChartToImage.Name" xml:space="preserve">
    <value />
    <comment>Convert chart to image from existing file</comment>
  </data>
  <data name="ExportRangeToImage.Name" xml:space="preserve">
    <value />
    <comment>Convert range to image from existing file</comment>
  </data>
  <data name="ToJsonFromJsonForWorksheet.Descrip" xml:space="preserve">
    <value>Jsonとして単一のワークシートをインポートまたはエクスポートする方法については、次のサンプルコードを参照してください</value>
    <comment>Refer to the following example code to see how to import and export json for a single worksheet.</comment>
  </data>
  <data name="ToJsonFromJsonForWorksheet.Name" xml:space="preserve">
    <value>Jsonのインポート/エクスポート</value>
    <comment>ToJson and FromJson</comment>
  </data>
  <data name="SaveBackgroundPicturesToPDF.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to export background pictures to pdf.</comment>
  </data>
  <data name="SaveBackgroundPicturesToPDF.Name" xml:space="preserve">
    <value />
    <comment>Save background pictures to pdf</comment>
  </data>
  <data name="ConfigChartTitleAngle.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure text angle of a chart title.</comment>
  </data>
  <data name="ConfigChartTitleAngle.Name" xml:space="preserve">
    <value />
    <comment>Set angle of chart title</comment>
  </data>
  <data name="ConfigCustomErrorBar.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure a custom type error bar of chart.</comment>
  </data>
  <data name="ConfigCustomErrorBar.Name" xml:space="preserve">
    <value />
    <comment>Custom type</comment>
  </data>
  <data name="ConfigDataLabelAngle.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure text angle of data labels.</comment>
  </data>
  <data name="ConfigDataLabelAngle.Name" xml:space="preserve">
    <value />
    <comment>Set angle of data labels</comment>
  </data>
  <data name="ConfigDeleteErrorBar.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to delete an error bar of chart.</comment>
  </data>
  <data name="ConfigDeleteErrorBar.Name" xml:space="preserve">
    <value />
    <comment>Delete error bar</comment>
  </data>
  <data name="ConfigErrorBarIncludeAndEndType.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure include type and end cap type of error bar.</comment>
  </data>
  <data name="ConfigErrorBarIncludeAndEndType.Name" xml:space="preserve">
    <value />
    <comment>Set include type and end cap type</comment>
  </data>
  <data name="ConfigErrorBarStyle.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure error bar's style.</comment>
  </data>
  <data name="ConfigErrorBarStyle.Name" xml:space="preserve">
    <value />
    <comment>Style</comment>
  </data>
  <data name="ConfigFixedValueErrorBar.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure a fixed value type error bar of chart.</comment>
  </data>
  <data name="ConfigFixedValueErrorBar.Name" xml:space="preserve">
    <value />
    <comment>Fixed value type</comment>
  </data>
  <data name="ConfigPercentageErrorBar.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure a percentage type error bar of chart.</comment>
  </data>
  <data name="ConfigPercentageErrorBar.Name" xml:space="preserve">
    <value />
    <comment>Percentage type</comment>
  </data>
  <data name="ConfigStdErrErrorBar.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure a standard error type error bar of chart.</comment>
  </data>
  <data name="ConfigStdErrErrorBar.Name" xml:space="preserve">
    <value />
    <comment>Standard error type</comment>
  </data>
  <data name="ConfigStDevErrorBar.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure a standard deviation type error bar of chart.</comment>
  </data>
  <data name="ConfigStDevErrorBar.Name" xml:space="preserve">
    <value />
    <comment>Standard deviation type</comment>
  </data>
  <data name="ConfigTickMarkLabelAngle.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure the tick labels' angle of axis.</comment>
  </data>
  <data name="ConfigTickMarkLabelAngle.Name" xml:space="preserve">
    <value />
    <comment>Set angle of tick mark labels</comment>
  </data>
  <data name="ConfigXYErrorBars.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to configure X and Y direction error bar of scatter or bubble chart.</comment>
  </data>
  <data name="ConfigXYErrorBars.Name" xml:space="preserve">
    <value />
    <comment>X and Y direction</comment>
  </data>
  <data name="ErrorBars.Descrip" xml:space="preserve">
    <value />
    <comment>## ErrorBars
These examples demonstrate how to configure chart **error bars**.</comment>
  </data>
  <data name="ErrorBars.Name" xml:space="preserve">
    <value />
    <comment>Error bars</comment>
  </data>
  <data name="ConfigGradientFillWithPathShape.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to set different path type of gradient fill.</comment>
  </data>
  <data name="ConfigGradientFillWithPathShape.Name" xml:space="preserve">
    <value />
    <comment>Set gradient path type</comment>
  </data>
  <data name="PrintTransparentCell.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to print the transparency of the cell's background colors.</comment>
  </data>
  <data name="PrintTransparentCell.Name" xml:space="preserve">
    <value />
    <comment>Print transparent cell</comment>
  </data>
  <data name="SetPickTrayByPDFSizeOptionToPDF.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to control whether the PDF page size is used to select the input paper tray when printing.</comment>
  </data>
  <data name="SetPickTrayByPDFSizeOptionToPDF.Name" xml:space="preserve">
    <value />
    <comment>Set PickTrayByPDFSize option for PDF document</comment>
  </data>
  <data name="GetPaginationInfo.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to getget an array of page boundaries of a sheet for vertical or horizontal paging in GcExcel.</comment>
  </data>
  <data name="GetPaginationInfo.Name" xml:space="preserve">
    <value />
    <comment>Get the horizontal or vertical pagination infos</comment>
  </data>
  <data name="OutlineColumn.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to add the outline column for the worksheet to display the data in tree structure.</comment>
  </data>
  <data name="OutlineColumn.Name" xml:space="preserve">
    <value />
    <comment>Outline column</comment>
  </data>
  <data name="DisplayUnitLabelPdf.Descrip" xml:space="preserve">
    <value />
    <comment>Export axis display unit label to PDF file</comment>
  </data>
  <data name="DisplayUnitLabelPdf.Name" xml:space="preserve">
    <value />
    <comment>Axis display unit label</comment>
  </data>
  <data name="SunburstChartPdf.Descrip" xml:space="preserve">
    <value />
    <comment>Export sunburst chart to PDF file</comment>
  </data>
  <data name="SunburstChartPdf.Name" xml:space="preserve">
    <value />
    <comment>Sunburst chart</comment>
  </data>
  <data name="TreemapChartPdf.Descrip" xml:space="preserve">
    <value />
    <comment>Export treemap chart to PDF file</comment>
  </data>
  <data name="TreemapChartPdf.Name" xml:space="preserve">
    <value />
    <comment>Treemap chart</comment>
  </data>
  <data name="AxisLabelNumberformatPdf.Descrip" xml:space="preserve">
    <value />
    <comment>Export axis label number format to PDF file</comment>
  </data>
  <data name="AxisLabelNumberformatPdf.Name" xml:space="preserve">
    <value />
    <comment>Axis label number format</comment>
  </data>
  <data name="ErrorbarPdf.Descrip" xml:space="preserve">
    <value />
    <comment>Export error bars to PDF file</comment>
  </data>
  <data name="ErrorbarPdf.Name" xml:space="preserve">
    <value />
    <comment>Error bars</comment>
  </data>
  <data name="TrendlinePdf.Descrip" xml:space="preserve">
    <value />
    <comment>Export trendline to PDF file</comment>
  </data>
  <data name="TrendlinePdf.Name" xml:space="preserve">
    <value />
    <comment>Trendline</comment>
  </data>
  <data name="FormulaTemplate.Descrip" xml:space="preserve">
    <value>式からなるテンプレートでデータをバインドします。そして、これらの式は残って、拡大されたデータを参照します。</value>
    <comment>Bind data with a template which consists of formulas. And these formulas will be remained and refer to the expanded data.</comment>
  </data>
  <data name="FormulaTemplate.Name" xml:space="preserve">
    <value>フォーミュラ</value>
    <comment>Formula template</comment>
  </data>
  <data name="SetShapeTextAlignment.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to set the horizontal and vertical alignment of the shape's text in GcExcel.</comment>
  </data>
  <data name="SetShapeTextAlignment.Name" xml:space="preserve">
    <value />
    <comment>Set alignment of shape's text</comment>
  </data>
  <data name="ShapeWithTextAlignment.Descrip" xml:space="preserve">
    <value />
    <comment>GcExcel can export shape text with alignment to PDF file.</comment>
  </data>
  <data name="ShapeWithTextAlignment.Name" xml:space="preserve">
    <value />
    <comment>Shape with text alignment</comment>
  </data>
  <data name="OutlineColumnToPDF.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to export the outline column of the worksheet to PDF file.</comment>
  </data>
  <data name="OutlineColumnToPDF.Name" xml:space="preserve">
    <value />
    <comment>Export outline column</comment>
  </data>
  <data name="GlobalOptions.Descrip" xml:space="preserve">
    <value>##グローバルオプション
この機能は、ユーザーがGCExcelテンプレートの既定の動作を制御するためのグローバルオプションを提供します。

GCExcelはいくつかの組み込みのブックを定義し、テンプレートのグローバルオプションの名前を定義します。
現在、これらのオプションはワークブックで定義された名前でのみサポートされます。したがって、ユーザーは、この機能を使用するとき、それらの範囲に注意しなければなりません。
つまり、複数のワークシートのテンプレートは同じ動作をします。

ユーザーが追加/編集/これらの組み込み定義された名前を直接Excelファイル、またはGCExcel APIを介して削除することができます。

組み込みの定義された名前のnameプロパティの値は、テンプレートグローバルオプションの名前として扱われます。
組み込みの定義された名前のreferstoプロパティの値は、テンプレートグローバルオプションの値として扱われます。
オプション名は大文字小文字を区別しません。

テンプレートはグローバルオプションの種類をサポートします。
- **TemplateOptions.KeepLineSize:** Boolean型。値は**True**、または**False**(デフォルト)。
テンプレートの処理時に行の高さと列の幅を維持するかどうか。
- **TemplateOptions.InsertMode:** 文字列型。 値は**Cells**(デフォルト)または**EntireRowColumn**です。
GCExcelがテンプレートを展開している間に余分なスペースが必要な場合、セルまたは全体の行＆列を挿入するかどうか。</value>
    <comment>## Global options
This feature provide a global options for user to control the default behaviors of GcExcel Template. 

GcExcel defines some built-in workbook defined names for the global options of template.
Currently, these options only be supported in Workbook Defined Names. So, user should take care on the scope of them when using this feature.
That is, templates in multiple worksheets will behave the same. 

User can add/edit/delete these built-in defined names directly in Excel file, or via GcExcel APIs.

The value of Name property in built-in defined name will be taken as the template global option's name.
The value of RefersTo property in built-in defined name will be taken as the template global option's value.
The option name is case-sensitive, while the option value is case-insensitive.

The template supports kinds of global options:

- **TemplateOptions.KeepLineSize:** Boolean. The value can be **True** or **False**(Default).
Whether the row height and column width should be keep when processing template.
- **TemplateOptions.InsertMode:** String. The value can be **Cells**(Default) or **EntireRowColumn**.
Whether GcExcel will insert cells or entire rows &amp; columns when extra spaces are needed while expanding the template.</comment>
  </data>
  <data name="GlobalOptions.Name" xml:space="preserve">
    <value>グローバルオプション</value>
    <comment>Global options</comment>
  </data>
  <data name="InsertMode.Descrip" xml:space="preserve">
    <value>組み込みの定義されたname“templateoptions . insertMode”を使用して、GCExcelがテンプレートを展開している間に余分なスペースが必要な場合、セルまたは全体の行と列を挿入するかどうかを指定します。
値は文字列型で、「セル」（デフォルト）または「Entirerowcolumn」でありえます。</value>
    <comment>Use built-in defined name "TemplateOptions.InsertMode" to specify whether GcExcel will insert cells or entire rows &amp; columns when extra spaces are needed while expanding the template.
The value is in string type, and can be "Cells"(Default) or "EntireRowColumn".</comment>
  </data>
  <data name="InsertMode.Name" xml:space="preserve">
    <value>挿入モード</value>
    <comment>Insert mode</comment>
  </data>
  <data name="KeepLineSize.Descrip" xml:space="preserve">
    <value>組み込みの定義名を使用して、テンプレートを処理するときに行の高さと列幅を維持するかどうかを指定します。
値はboolean型であり、trueまたはfalseになります。</value>
    <comment>Use built-in defined name "TemplateOptions.KeepLineSize" to specify whether the row height and column width should be keep when processing template.
The value is in boolean type, and can be True or False(Default).</comment>
  </data>
  <data name="KeepLineSize.Name" xml:space="preserve">
    <value>行と列サイズ</value>
    <comment>Keep row &amp; column size</comment>
  </data>
  <data name="ImageTemplate.Descrip" xml:space="preserve">
    <value>テンプレートのプロパティ「image=true」を使用して、テンプレート処理後にイメージフィールドのデータを画像として表示します。</value>
    <comment>Use template property "image=true" to show data of an image field as images after template processing</comment>
  </data>
  <data name="ImageTemplate.Name" xml:space="preserve">
    <value>イメージテンプレート</value>
    <comment>Image template</comment>
  </data>
  <data name="TemplateOtherFeatures.Descrip" xml:space="preserve">
    <value>## 他の機能と共に働く
GCExcelのテンプレートは、などの動的なレポートの多くを作成する他の機能で動作することができます：条件付き書式、グラフ。
我々はより多くの機能を将来的にテンプレートで作業をサポートする予定です。</value>
    <comment>## Work with other features
GcExcel template can work with other features to create lots of dynamic reports, such as: conditional formatting, chart.
We've planed to support more features working with template in future.</comment>
  </data>
  <data name="TemplateOtherFeatures.Name" xml:space="preserve">
    <value>他の機能と協力する</value>
    <comment>Template work with other features</comment>
  </data>
  <data name="TemplateWorkWithChart.Descrip" xml:space="preserve">
    <value>ユーザーは手動で関連するテンプレートセルにグラフのシリーズ名、シリーズ値と軸のラベルを設定することができます。また、グラフの処理後にこれらの設定に従って正しく表示できます。</value>
    <comment>User can manually set chart's series name, series value and axis label to related template cells. And the chart can be correctly displayed following these settings after template processing.</comment>
  </data>
  <data name="TemplateWorkWithChart.Name" xml:space="preserve">
    <value>チャート</value>
    <comment>Chart</comment>
  </data>
  <data name="TemplateWorkWithConditionalFormatting.Descrip" xml:space="preserve">
    <value>テンプレート処理の後に展開されたすべてのセルに対して、テンプレートセル上の条件付き書式を適用する。</value>
    <comment>Conditional formattings on the a template cell will be applied to all the cells expanded from it after template processing.</comment>
  </data>
  <data name="TemplateWorkWithConditionalFormatting.Name" xml:space="preserve">
    <value>条件付き書式</value>
    <comment>Conditional formatting</comment>
  </data>
  <data name="EmployeeAbsenceSchedule.Name" xml:space="preserve">
    <value>従業員不在スケジュール</value>
    <comment>Employee absence schedule</comment>
  </data>
  <data name="SalesTracker.Name" xml:space="preserve">
    <value>販売トラッカー</value>
    <comment>Sales tracker</comment>
  </data>
  <data name="AddShapeWithCustomName.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to add a shape with custom name.</comment>
  </data>
  <data name="AddShapeWithCustomName.Name" xml:space="preserve">
    <value />
    <comment>Shape with custom name</comment>
  </data>
  <data name="CreateChartWithCustomName.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to create a chart with custom name.</comment>
  </data>
  <data name="CreateChartWithCustomName.Name" xml:space="preserve">
    <value />
    <comment>Chart with custom name</comment>
  </data>
  <data name="DepartmentBudget.Descrip" xml:space="preserve">
    <value>このサンプルは垂直グループテンプレートを示すことです。従業員のデータが垂直に拡大される間、部門のデータは水平に拡大されます。</value>
    <comment>This sample is to show a vertical group template. The departments' data are expanded horizontally, while the employees' data  are expanded vertically.</comment>
  </data>
  <data name="EmployeeAbsenceSchedule.Descrip" xml:space="preserve">
    <value>このサンプルは、条件付きのformattingsで働くテンプレートを示すことです。これは、シート名のテンプレートを使用して、毎月のデータは、Seperatedシートで表示します。</value>
    <comment>This sample is to show the template working with conditional formattings. It uses a sheet name template to show each month's data in a seperated sheet.</comment>
  </data>
  <data name="FinancialDashboard.Descrip" xml:space="preserve">
    <value>このサンプルは、クロステーブルテンプレートを示すことです。それはテーブルの上にタイトルがあります。</value>
    <comment>This sample is to show a cross-table template. It has a title on top of the table.</comment>
  </data>
  <data name="PurchaseOrder.Descrip" xml:space="preserve">
    <value>このサンプルは、静的な値と動的テーブルで文書全体を報告することです。</value>
    <comment>This sample is to show a entire document report with static values and a dynamic table.</comment>
  </data>
  <data name="Sales.Descrip" xml:space="preserve">
    <value>このサンプルはアウトライングループテンプレート表を示す。それは、各地域のアウトラインとサブグループを持っています。</value>
    <comment>This sample is to show an outline group template table. It has outline and subtotal groups for each area.</comment>
  </data>
  <data name="SalesTracker.Descrip" xml:space="preserve">
    <value>このサンプルは、グラフで作業しているテンプレートを示すことです。これらのチャートは、それらのシリーズのデータとしてテンプレートセルを使用しています：値、軸ラベルなど。</value>
    <comment>This sample is to show the template working with charts. These charts are using template cells as their series' data: values, axis labels etc.</comment>
  </data>
  <data name="ShippingAndDeliveryOrder.Descrip" xml:space="preserve">
    <value>このサンプルは、事前に登録されたスタイルでドキュメントレポートを表示することです。これは、静的および動的なデータを入力するテンプレートを使用します。</value>
    <comment>This sample is to show a document report with pre-desigied style. It uses template to fill the static and dynamic data.</comment>
  </data>
  <data name="TablixReport.Descrip" xml:space="preserve">
    <value>このサンプルはテーブルビューテーブルを示すことです。これは、行＆列ヘッダーに複数行があります。また、内部には合計の行があります。</value>
    <comment>This sample is to show a Tablix template table. It has multiple lines in row &amp; column header. And also, there're subtotal lines inside.</comment>
  </data>
  <data name="Travel.Descrip" xml:space="preserve">
    <value>このサンプルは、1つのシートに複数のテンプレートテーブルを表示することです。</value>
    <comment>This sample is to show multiple template tables in one sheet.</comment>
  </data>
  <data name="DataBinding.Descrip" xml:space="preserve">
    <value />
    <comment>## Data Binding
GrapeCity Documents for Excel now supports one-time data binding. 

- **Sheet binding**: bind source data to sheet
- **Cell binding**: bind source data to cell
- **Table binding**: bind source data to table</comment>
  </data>
  <data name="DataBinding.Name" xml:space="preserve">
    <value />
    <comment>Data binding</comment>
  </data>
  <data name="BindAutomatically.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to bind data source to sheet columns automatically.</comment>
  </data>
  <data name="BindAutomatically.Name" xml:space="preserve">
    <value />
    <comment>Bind to sheet automatically</comment>
  </data>
  <data name="BindCustomObject.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to bind custom object to table.</comment>
  </data>
  <data name="BindCustomObject.Name" xml:space="preserve">
    <value />
    <comment>Bind custom object</comment>
  </data>
  <data name="BindDataSet.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to bind DataSet to tables.</comment>
  </data>
  <data name="BindDataSet.Name" xml:space="preserve">
    <value />
    <comment>Bind DataSet</comment>
  </data>
  <data name="BindDataTable.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to bind DataTable to sheet columns.</comment>
  </data>
  <data name="BindDataTable.Name" xml:space="preserve">
    <value />
    <comment>Bind DataTable to sheet</comment>
  </data>
  <data name="BindManually.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to bind data source to sheet columns manually.</comment>
  </data>
  <data name="BindManually.Name" xml:space="preserve">
    <value />
    <comment>Bind to sheet manually</comment>
  </data>
  <data name="CellBinding.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to bind data source to cells.</comment>
  </data>
  <data name="CellBinding.Name" xml:space="preserve">
    <value />
    <comment>Cell binding</comment>
  </data>
  <data name="SheetBinding.Descrip" xml:space="preserve">
    <value />
    <comment>## Sheet binding
The examples in this folder demonstrate how to config sheet binding:
- Use IRange.BindingPath to get/set column binding path (e.g. worksheet.Range["A:A"].EntireColumn.BindingPath = "xxx" ).
- Use IWorsheet.AutoGenerateColumns to get/set if data source should be bound to columns automatically. The default value is true.
- If IWorsheet.AutoGenerateColumns is true, each property and field of source data would be bound to a column.
- Use IWorksheet.DataSource to get/set data source. And each worksheet can only have one data source. Data source can be a System.Data.DataTable or an IEnumerable.</comment>
  </data>
  <data name="SheetBinding.Name" xml:space="preserve">
    <value />
    <comment>Sheet binding</comment>
  </data>
  <data name="TableBinding.Descrip" xml:space="preserve">
    <value />
    <comment>## Table binding
The examples in this folder demonstrate how to config table binding:
- Use ITabel.BindingPath to get/set table's binding path.
- Use ITableColumn.DataField to get/set binding path for table columns.
- Use ITable.AutoGenerateColumns to get/set if data source should be bound to table columns automatically. The default value is true.
- When ITable.AutoGenerateColumns is true, each property and field of source data would be bound to a table column.
- Use IWorksheet.DataSource to get/set data source. Data source can only be DataSet or custom object which contains an IEnumerable filed or property.
- The table range would change with data source.</comment>
  </data>
  <data name="TableBinding.Name" xml:space="preserve">
    <value />
    <comment>Table binding</comment>
  </data>
  <data name="GetRangeBoundary.Descrip" xml:space="preserve">
    <value />
    <comment>Refer to the following example code to see how to add a image to specific range in GcExcel.</comment>
  </data>
  <data name="GetRangeBoundary.Name" xml:space="preserve">
    <value />
    <comment>Add image to specific range</comment>
  </data>
</root>