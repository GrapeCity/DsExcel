//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GrapeCity.Documents.Excel.Examples {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CodeResource_VB {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CodeResource_VB() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("GrapeCity.Documents.Excel.Examples.CodeResource_VB", typeof(CodeResource_VB).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///#Region &quot;theme&quot;
        ///            &apos;create a custom theme.
        ///            Dim themes As New Themes
        ///            Dim theme As ITheme = themes.Add(&quot;testTheme&quot;)
        ///            theme.ThemeColorScheme(ThemeColor.Light1).RGB = Color.FromArgb(255, 255, 255)
        ///            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.FromArgb(0, 0, 0)
        ///            theme.ThemeColorScheme(ThemeColor.Light2).RGB = Color.FromArgb(255, 255, 255)
        ///            theme.ThemeColorScheme(ThemeColor.Dark2).RGB = Color.FromArgb(0, 0, 0)
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelReporting_BasicSalesReport {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.BasicSalesReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;***********************Set RowHeight &amp; ColumnWidth***************
        ///            worksheet.StandardHeight = 30
        ///            worksheet.Range(&quot;1:1&quot;).RowHeight = 57.75
        ///            worksheet.Range(&quot;2:9&quot;).RowHeight = 30.25
        ///            worksheet.Range(&quot;A:A&quot;).ColumnWidth = 2.71
        ///            worksheet.Range(&quot;B:B&quot;).ColumnWidth = 11.71
        ///            worksheet.Range(&quot;C:C&quot;).ColumnWidth = 28
        ///            worksheet.Range(&quot;D:D&quot;).ColumnWidth =  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelReporting_BidTracker {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.BidTracker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///#Region &quot;theme&quot;
        ///            &apos;create a custom theme.
        ///            Dim themes As New Themes
        ///            Dim theme As ITheme = themes.Add(&quot;testTheme&quot;)
        ///            theme.ThemeColorScheme(ThemeColor.Light1).RGB = Color.FromArgb(255, 255, 255)
        ///            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.FromArgb(0, 0, 0)
        ///            theme.ThemeColorScheme(ThemeColor.Light2).RGB = Color.FromArgb(222, 222, 212)
        ///            theme.ThemeColo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelReporting_BloodPressureTracker {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.BloodPressureTracker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Cost Center&quot;, &quot;Annual Cost&quot;, &quot;Percent of Total&quot;, &quot;Cumulative Percent&quot;},
        ///                {&quot;Parts and materials&quot;, 1325000, Nothing, Nothing},
        ///                {&quot;Manufacturing equipment&quot;, 900500, Nothing, Nothing},
        ///                {&quot;Salaries&quot;, 575000, Nothing, Nothing},
        ///                {&quot;Maintenance&quot;, 395000, Nothing, Nothing},
        ///                {&quot;Office lease&quot;, 295000, Nothing, Nothing},
        ///                {&quot;Warehouse lease&quot;, 250000, Nothing, Nothing},
        ///           [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelReporting_CostAnalysisWithParetoChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.CostAnalysisWithParetoChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {Nothing, &quot;[Segment Name]&quot;, &quot;[Segment Name]&quot;, &quot;[Segment Name]&quot;, &quot;Overall&quot;},
        ///                {&quot;Customer Activity:&quot;, Nothing, Nothing, Nothing, Nothing},
        ///                {&quot;Number of active customers—Beginning of period&quot;, 5, 8, 8, Nothing},
        ///                {&quot;Number of customers added&quot;, 2, 4, 4, Nothing},
        ///                {&quot;Number of customers lost/terminated&quot;, -1, -2, -2, Nothing},
        ///                {&quot;Number of active customers—End of period&quot;, Nothing, Nothing, Not [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelReporting_CustomerProfitabilityAnalysis {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.CustomerProfitabilityAnalysi" +
                        "s", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;------------------Set RowHeight &amp; ColumnWidth----------------
        ///            worksheet.StandardHeight = 43.5
        ///            worksheet.StandardWidth = 8.43
        ///            worksheet.Range(&quot;1:1&quot;).RowHeight = 171
        ///            worksheet.Range(&quot;2:2&quot;).RowHeight = 12.75
        ///            worksheet.Range(&quot;3:3&quot;).RowHeight = 22.5
        ///            worksheet.Range(&quot;4:7&quot;).RowHeight = 43.75
        ///            worksheet.Range(&quot;A:A&quot;).ColumnWidth = 2.887
        ///           [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelReporting_MovieList {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.MovieList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;***************************Set RowHeight &amp; Width****************************
        ///            worksheet.StandardHeight = 30
        ///            worksheet.Range(&quot;3:4&quot;).RowHeight = 30.25
        ///            worksheet.Range(&quot;1:1&quot;).RowHeight = 103.5
        ///            worksheet.Range(&quot;2:2&quot;).RowHeight = 38.25
        ///            worksheet.Range(&quot;A:A&quot;).ColumnWidth = 2.625
        ///            worksheet.Range(&quot;B:B&quot;).ColumnWidth = 22.25
        ///            worksheet.Range(&quot;C:E&quot;).C [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelReporting_PersonalAddressBook {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.PersonalAddressBook", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;-------------------------Set RowHeight &amp; Width-----------------------------------
        ///            worksheet.StandardHeight = 30
        ///            worksheet.StandardWidth = 8.43
        ///            worksheet.Range(&quot;1:1&quot;).RowHeight = 278.25
        ///            worksheet.Range(&quot;2:4&quot;).RowHeight = 30.25
        ///            worksheet.Range(&quot;8:8&quot;).RowHeight = 55.5
        ///            worksheet.Range(&quot;9:30&quot;).RowHeight = 30.25
        ///            worksheet.Range(&quot;33:33&quot;).RowHeig [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelReporting_PersonalNetWorthCalculator {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.PersonalNetWorthCalculator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;TASK&quot;, &quot;PRIORITY&quot;, &quot;STATUS&quot;, &quot;START DATE&quot;, &quot;DUE DATE&quot;, &quot;% COMPLETE&quot;, &quot;DONE?&quot;, &quot;NOTES&quot;},
        ///                {&quot;First Thing I Need To Do&quot;, &quot;Normal&quot;, &quot;Not Started&quot;, Nothing, Nothing, 0, Nothing, Nothing},
        ///                {&quot;Other Thing I Need To Finish&quot;, &quot;High&quot;, &quot;In Progress&quot;, Nothing, Nothing, 0.5, Nothing, Nothing},
        ///                {&quot;Something Else To Get Done&quot;, &quot;Low&quot;, &quot;Complete&quot;, Nothing, Nothing, 1, Nothing, Nothing},
        ///                {&quot;More Errands And Things&quot;,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelReporting_ToDoListWithProgressTracker {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelReporting.ToDoListWithProgressTracker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file Monthly business budget.xlsx from resource
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet = workbook.ActiveSheet
        ///            &apos;insert 19 rows  
        ///            worksheet.Range(&quot;1:19&quot;).Insert()
        ///            &apos;Change the rows(2~5) RowHeight
        ///            worksheet.Rows(1).RowHeight = 34.5
        ///            worksheet.Rows(2).RowHeight = 15.75
        ///            worksheet.Rows(3).RowHeight = 19.5
        ///            worksheet.Rows(4 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelTemplates_BloodSugarTracker {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.BloodSugarTracker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file Event budget.xlsx from resource
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet = workbook.ActiveSheet
        ///            &apos;change range B2&apos;s font size.
        ///            worksheet.Range!B2.Font.Size = 22
        ///            &apos;change range E4&apos;s font style to bold.
        ///            worksheet.Range!E4.Font.Bold = True
        ///            &apos;change table style.
        ///            worksheet.Tables(&quot;tblAdmissions&quot;).TableStyle = workbook.TableStyles(&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelTemplates_EventBudget {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.EventBudget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file Financial KPIs.xlsx from resource
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet = workbook.ActiveSheet
        ///            &apos;set values
        ///            Dim ProData = {
        ///                {1483550, 121386},
        ///                {0.4336, 0.32},
        ///                {0.1236, -0.0438},
        ///                {12.36, -0.0438}
        ///            }
        ///            Dim ProData1 = {0.14, 0.0029, 0.0361, 0.0361}
        ///            worksheet.Range(&quot;E7:F10&quot;) [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelTemplates_FinancialKPIs {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.FinancialKPIs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file Income statement.xlsx from resource
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet = workbook.ActiveSheet
        ///            &apos;set values
        ///            Dim RevData = {
        ///                {454597, 687802, 469902, 335846, 776667, 806250, 552036, 346734, 787205, 720496, 686963, 835688},
        ///                {821687, 679306, 568503, 715827, 627459, 822625, 271114, 797991, 823966, 304521, 758665, 322694},
        ///                {4 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelTemplates_IncomeStatement {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.IncomeStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file Monthly business budget.xlsx from resource
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet = workbook.ActiveSheet
        ///            &apos; change table style to TableStyleMedium14
        ///            Dim totalsTable = worksheet.Tables(&quot;TotalsTable&quot;)
        ///            totalsTable.TableStyle = workbook.TableStyles(&quot;TableStyleMedium14&quot;)
        ///            &apos; change chart type to column stacked
        ///            Dim chart = worksheet.Shapes(0). [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelTemplates_MonthlyBusinessBudget {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.MonthlyBusinessBudget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file Simple invoice.xlsx from resource
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet = workbook.ActiveSheet
        ///            &apos; fill some new items
        ///            worksheet.Range(&quot;E09:H09&quot;).Value = {&quot;DD1-001&quot;, &quot;Item 3&quot;, 5.6, 12}
        ///            worksheet.Range(&quot;E10:H10&quot;).Value = {&quot;DD2-001&quot;, &quot;Item 3&quot;, 8.5, 14}
        ///            worksheet.Range(&quot;E11:H11&quot;).Value = {&quot;DD3-001&quot;, &quot;Item 3&quot;, 9.6, 16}
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_ExcelTemplates_SimpleInvoice {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.ExcelTemplates.SimpleInvoice", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, 51, 36, 27},
        ///                {&quot;Item3&quot;, 52, 85, 30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.Serie [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_ConfigAxisTitle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigAxisTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCollec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_ConfigCategoryAxesFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigCategoryAxesForm" +
                        "at", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A2:A6&quot;).NumberFormat = &quot;m/d/yyyy&quot;
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {
        ///                    #10/7/2015#,
        ///                    10,
        ///                    25,
        ///                    25
        ///                },
        ///                {
        ///                    #10/24/2015#,
        ///                    51,
        ///                    36,
        ///                    27
        ///            [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_ConfigCategoryAxisUnits {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigCategoryAxisUnit" +
                        "s", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_ConfigDisplayUnitLabel {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigDisplayUnitLabel" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_ConfigGridlines {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigGridlines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {1, -25, 25, 25},
        ///                {2, 51, 36, 27},
        ///                {3, 52, 80, 30},
        ///                {4, 22, -20, 65},
        ///                {5, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Ra [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_ConfigTickMarkLabel {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigTickMarkLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCollec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_ConfigValueAxesFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigValueAxesFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, 36, 27},
        ///                {&quot;Item3&quot;, 52, 90, -30},
        ///                {&quot;Item4&quot;, 22, 65, 50},
        ///                {&quot;Item5&quot;, 23, 55, 69}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_ConfigValueAxisUnits {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.ConfigValueAxisUnits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D5&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 4, 25, 7},
        ///                {&quot;Item2&quot;, 15, -10, 18},
        ///                {&quot;Item3&quot;, 45, 90, 20},
        ///                {&quot;Item4&quot;, 8, 20, 11}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:D5&quot;),  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_SetAxisScaleType {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.SetAxisScaleType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCollec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Axes_SetAxisTickMark {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Axes.SetAxisTickMark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 350, 250)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Chart3DFormat_ConfigChart3DFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChart3D" +
                        "Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 350, 250)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Chart3DFormat_ConfigChartBackWall {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChartBa" +
                        "ckWall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Chart3DFormat_ConfigChartFloorStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChartFl" +
                        "oorStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 350, 250)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Chart3DFormat_ConfigChartSideWall {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChartSi" +
                        "deWall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Column3D, 250, 20, 350, 250)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Chart3DFormat_ConfigChartWallStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Chart3DFormat.ConfigChartWa" +
                        "llStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, 36, 27},
        ///                {&quot;Item3&quot;, 52, 60, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartArea_ConfigChartAreaFont {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartArea.ConfigChartAreaFo" +
                        "nt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, 36, 27},
        ///                {&quot;Item3&quot;, 52, 60, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartArea_ConfigChartAreaFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartArea.ConfigChartAreaFo" +
                        "rmat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Create chart, chart&apos;s range is Range(&quot;G1:M21&quot;)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartCopy {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Create chart, chart&apos;s range is Range(&quot;G1:M21&quot;)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartCut {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartCut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;create chart, chart&apos;s range is Range(&quot;G1:M21&quot;)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartDuplicate {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Area, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C13&quot;).Value = {
        ///                {Nothing, &quot;Blue Series&quot;, &quot;Orange Series&quot;},
        ///                {&quot;Jan&quot;, 0, 59.1883603948205},
        ///                {&quot;Feb&quot;, 44.6420211591501, 52.2280901938606},
        ///                {&quot;Mar&quot;, 45.2174930051225, 49.8093056416248},
        ///                {&quot;Apr&quot;, 62, 37.3065749226828},
        ///                {&quot;Ma [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_AreaChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.AreaChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.AreaStacked100, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C13&quot;).Value = {
        ///                {0, 59.18, 27.14},
        ///                {44.64, 52.22, 25.08},
        ///                {45.21, 49.8, 57.99},
        ///                {24.32, 37.3, 42.73},
        ///                {58.34, 34.43, 28.34},
        ///                {31.89, 69.78, 46.88},
        ///                {41.79, 63.94, 56.24},
        ///                [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_AreaStacked100 {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.AreaStacked100" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.AreaStacked, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C13&quot;).Value = {
        ///                {0, 59.18, 27.14},
        ///                {44.64, 52.22, 25.08},
        ///                {45.21, 49.8, 57.99},
        ///                {24.32, 37.3, 42.73},
        ///                {58.34, 34.43, 28.34},
        ///                {31.89, 69.78, 46.88},
        ///                {41.79, 63.94, 56.24},
        ///                {6 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_AreaStackedChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.AreaStackedCha" +
                        "rt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.BarClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D2&quot;).Value = {
        ///                {100, 200, 300, 400},
        ///                {100, 200, 300, 400}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:D2&quot;), RowCol.Columns)
        ///            shape.Chart.ChartTitle.Text = &quot;Bar Clustered Chart&quot;
        ///            shape.Chart.Legend.Position = Legen [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_BarClusteredChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.BarClusteredCh" +
                        "art", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.BarStacked100, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B5&quot;).Value = {
        ///                {1, 5},
        ///                {2, 4},
        ///                {3, 3},
        ///                {4, 2},
        ///                {4, 1}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:B5&quot;), RowCol.Columns)
        ///            shape.Chart.ChartTitle.Text = &quot;Bar Stacked 100 Chart [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_BarStacked100Chart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.BarStacked100C" +
                        "hart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.BarStacked, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C4&quot;).Value = {
        ///                {103, 121, 109},
        ///                {56, 94, 115},
        ///                {116, 89, 99},
        ///                {55, 93, 70}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:C4&quot;), RowCol.Columns)
        ///            shape.Chart.ChartTitle.Text = &quot;Bar Stacked Chart&quot;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_BarStackedChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.BarStackedChar" +
                        "t", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Bubble, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C10&quot;).Value = {
        ///                {&quot;Blue&quot;, Nothing, Nothing},
        ///                {125, 750, 3},
        ///                {25, 625, 7},
        ///                {75, 875, 5},
        ///                {175, 625, 6},
        ///                {&quot;Red&quot;, Nothing, Nothing},
        ///                {125, 500, 10},
        ///                {25, 250, 1},
        ///                {7 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_BubbleChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.BubbleChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D2&quot;).Value = {
        ///                {100, 200, 300, 400},
        ///                {100, 200, 300, 400}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:D2&quot;), RowCol.Columns)
        ///            shape.Chart.ChartTitle.Text = &quot;Column Clustered Chart&quot;
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_ColumnClusteredChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.ColumnClustere" +
                        "dChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnStacked100, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B6&quot;).Value = {
        ///                {1, 5},
        ///                {2, 4},
        ///                {3, 3},
        ///                {4, 2},
        ///                {5, 1},
        ///                {5, 3}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:B6&quot;), RowCol.Columns)
        ///            shape.Chart.ChartTitle.T [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_ColumnStacked100Chart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.ColumnStacked1" +
                        "00Chart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnStacked, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C6&quot;).Value = {
        ///                {103, 121, 109},
        ///                {56, 94, 115},
        ///                {116, 89, 99},
        ///                {55, 93, 70},
        ///                {114, 114, 83},
        ///                {125, 138, 136}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:C6&quot;), RowCol.Col [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_ColumnStackedChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.ColumnStackedC" +
                        "hart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B13&quot;).Value = {
        ///                {&quot;Blue Column&quot;, &quot;Red Line&quot;},
        ///                {75, 20},
        ///                {149, 50},
        ///                {105, 30},
        ///                {55, 80},
        ///                {121, 40},
        ///                {76, 110},
        ///                {128, 50},
        ///                {114, 140},
        ///                {75 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_CombinationChart1 {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.CombinationCha" +
                        "rt1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C17&quot;).Value = {
        ///                {&quot;Area 1&quot;, &quot;Column 1&quot;, &quot;Column 2&quot;},
        ///                {1350, 120, 75},
        ///                {1500, 90, 35},
        ///                {1200, 80, 50},
        ///                {1300, 80, 80},
        ///                {1750, 90, 100},
        ///                {1640, 120, 130},
        ///                {1700, 120, 95},        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_CombinationChart2 {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.CombinationCha" +
                        "rt2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C7&quot;).Value = {
        ///                {0, 59.18, 27.14},
        ///                {44.64, 52.22, 25.08},
        ///                {45.21, 49.8, 57.99},
        ///                {24.32, 37.3, 42.73},
        ///                {58.34, 34.43, 28.34},
        ///                {31.89, 69.78, 46.88},
        ///                {41.79, 63.94, 56.24}
        ///            }
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_LineChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkers, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B8&quot;).Value = {
        ///                {6, 55},
        ///                {45, 25},
        ///                {35, 45},
        ///                {25, 65},
        ///                {65, 15},
        ///                {45, 75},
        ///                {75, 55},
        ///                {65, 35}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_LineMarkersChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineMarkersCha" +
                        "rt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkersStacked100, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C5&quot;).Value = {
        ///                {12, 22, 27},
        ///                {45, 52, 25},
        ///                {58, 35, 58},
        ///                {21, 37, 43},
        ///                {44, 45, 28}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:C5&quot;), RowCol.Columns)
        ///            shape.Chart.Ch [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_LineMarkerStacked100Chart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineMarkerStac" +
                        "ked100Chart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkersStacked, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C7&quot;).Value = {
        ///                {0, 59.18, 27.14},
        ///                {44.64, 52.22, 25.08},
        ///                {45.21, 49.8, 57.99},
        ///                {24.32, 37.3, 42.73},
        ///                {58.34, 34.43, 28.34},
        ///                {31.89, 69.78, 46.88},
        ///                {41.79, 63.94, 56.24}
        ///            } [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_LineMarkerStackedChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineMarkerStac" +
                        "kedChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineStacked100, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C5&quot;).Value = {
        ///                {12, 22, 27},
        ///                {45, 52, 25},
        ///                {58, 35, 58},
        ///                {21, 37, 43},
        ///                {44, 45, 28}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:C5&quot;), RowCol.Columns)
        ///            shape.Chart.ChartTitl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_LineStacked100Chart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineStacked100" +
                        "Chart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineStacked, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C7&quot;).Value = {
        ///                {0, 59.18, 27.14},
        ///                {44.64, 52.22, 25.08},
        ///                {45.21, 49.8, 57.99},
        ///                {24.32, 37.3, 42.73},
        ///                {58.34, 34.43, 28.34},
        ///                {31.89, 69.78, 46.88},
        ///                {41.79, 63.94, 56.24}
        ///            }
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_LineStackedChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.LineStackedCha" +
                        "rt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Doughnut, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B6&quot;).Value = {
        ///                {&quot;S1&quot;, &quot;S2&quot;},
        ///                {10, 25},
        ///                {51, 36},
        ///                {52, 85},
        ///                {22, 65},
        ///                {23, 69}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:B6&quot;), RowCol.Columns)
        ///            shape.Chart.Char [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_Pie_DoughnutChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Pie_DoughnutCh" +
                        "art", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Pie, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B4&quot;).Value = {
        ///                {&quot;Blue&quot;, 1},
        ///                {&quot;Red&quot;, 2},
        ///                {&quot;Green&quot;, 3},
        ///                {&quot;Purple&quot;, 4}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:B4&quot;), RowCol.Columns)
        ///            shape.Chart.ChartTitle.Text = &quot;Pie Chart&quot;
        ///            shape.Char [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_PieChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.PieChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.StockHLC, 350, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D17&quot;).Value = {
        ///                {Nothing, &quot;High&quot;, &quot;Low&quot;, &quot;Close&quot;},
        ///                {
        ///                    #9/1/2019#,
        ///                    105.76,
        ///                    92.38,
        ///                    100.94
        ///                },
        ///                {
        ///                    #9/2/2019#,
        ///                    102.45,
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_Stock_HighLowCloseStockChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Stock_HighLowC" +
                        "loseStockChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.StockOHLC, 350, 20, 360, 220)
        ///            worksheet.Range(&quot;A1:E17&quot;).Value = {
        ///                {Nothing, &quot;Open&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Close&quot;},
        ///                {
        ///                    #9/1/2019#,
        ///                    103.46,
        ///                    105.76,
        ///                    92.38,
        ///                    100.94
        ///                },
        ///                {
        ///                    #9/2/2019 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_Stock_OpenHighLowCloseStock {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Stock_OpenHigh" +
                        "LowCloseStock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.StockVHLC, 350, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:E17&quot;).Value = {
        ///                {Nothing, &quot;Volume&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Close&quot;},
        ///                {
        ///                    #9/1/2019#,
        ///                    26085,
        ///                    105.76,
        ///                    92.38,
        ///                    100.94
        ///                },
        ///                {
        ///                    #9/2/201 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_Stock_VolumeHighLowCloseStock {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Stock_VolumeHi" +
                        "ghLowCloseStock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.StockVOHLC, 300, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:F23&quot;).Value = {
        ///                {Nothing, &quot;Volume&quot;, &quot;Open&quot;, &quot;High&quot;, &quot;Low&quot;, &quot;Close&quot;},
        ///                {
        ///                    #9/1/2019#,
        ///                    26085,
        ///                    103.46,
        ///                    105.76,
        ///                    92.38,
        ///                    100.94
        ///                },
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_Stock_VolumeOpenHighLowClose {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.Stock_VolumeOp" +
                        "enHighLowClose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.XYScatter, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D7&quot;).Value = {
        ///                {&quot;Blue&quot;, Nothing, &quot;Red&quot;, Nothing},
        ///                {55, 964, 67, 475},
        ///                {20, 825, 10, 163},
        ///                {77, 840, 87, 224},
        ///                {182, 596, 46, 196},
        ///                {190, 384, 100, 377},
        ///                {140, 503, 92, 47}
        ///            }
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_XYScatterChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.XYScatterChart" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.XYScatterLines, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B8&quot;).Value = {
        ///                {75, 250},
        ///                {50, 125},
        ///                {25, 375},
        ///                {75, 250},
        ///                {50, 875},
        ///                {25, 625},
        ///                {75, 750},
        ///                {125, 500}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_XYScatterLinesChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.XYScatterLines" +
                        "Chart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.XYScatterSmoothNoMarkers, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B5&quot;).Value = {
        ///                {4, 2},
        ///                {6, 1},
        ///                {1, 2},
        ///                {7, 4},
        ///                {4, 4}
        ///            }
        ///            worksheet.Range(&quot;A7:B11&quot;).Value = {
        ///                {9, 5},
        ///                {7, 8},
        ///                {9, 8},
        ///                { [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_XYScatterSmooth {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.XYScatterSmoot" +
                        "h", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.XYScatterSmooth, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B5&quot;).Value = {
        ///                {4, 2},
        ///                {6, 1},
        ///                {1, 2},
        ///                {7, 4},
        ///                {4, 4}
        ///            }
        ///            worksheet.Range(&quot;A7:B11&quot;).Value = {
        ///                {9, 5},
        ///                {7, 8},
        ///                {9, 8},
        ///                {5, 9},
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartGallery_XYScatterSmoothWithMarkers {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartGallery.XYScatterSmoot" +
                        "hWithMarkers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.PieOfPie, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartLines_CreateConnectorLine {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateConnectorL" +
                        "ine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCollec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartLines_CreateDropLine {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateDropLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCollec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartLines_CreateHiLoLine {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateHiLoLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnStacked, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartLines_CreateSeriesLine {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateSeriesLine" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartLines_CreateTrendline {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateTrendline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Line, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCollec [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartLines_CreateUpDownBars {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartLines.CreateUpDownBars" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -20, 36, 27},
        ///                {&quot;Item3&quot;, 62, 70, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 50, 50}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartTitle_ConfigChartTitleRichText {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartTitle.ConfigChartTitle" +
                        "RichText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -20, 36, 27},
        ///                {&quot;Item3&quot;, 62, 70, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 50, 50}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_ChartTitle_ConfigChartTitleStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.ChartTitle.ConfigChartTitle" +
                        "Style", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            &apos;create chart [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_CreateChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.CreateChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B5&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;},
        ///                {&quot;Item1&quot;, -20},
        ///                {&quot;Item2&quot;, 30},
        ///                {&quot;Item3&quot;, 50},
        ///                {&quot;Item3&quot;, 40}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:B5&quot;), RowCol.Columns, True, True)
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_DataLabel_ConfigDataLabelFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataLabel.ConfigDataLabelFo" +
                        "rmat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B5&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;},
        ///                {&quot;Item1&quot;, -20, 10},
        ///                {&quot;Item2&quot;, 30, 60},
        ///                {&quot;Item3&quot;, 50, 80},
        ///                {&quot;Item3&quot;, 40, 70}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:B5&quot;), RowCol.Columns, Tru [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_DataLabel_ConfigDataLabelText {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataLabel.ConfigDataLabelTe" +
                        "xt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_DataPoint_ConfigDataPointFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataPoint.ConfigDataPointFo" +
                        "rmat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_DataPoint_ConfigNegativePoint {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataPoint.ConfigNegativePoi" +
                        "nt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.PieOfPie, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesCo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_DataPoint_ConfigSecondarySection {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DataPoint.ConfigSecondarySe" +
                        "ction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 300, 10, 300, 300)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_DeleteChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.DeleteChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, 36, 27},
        ///                {&quot;Item3&quot;, 52, 70, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Legend_ConfigLegendEntryFontStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Legend.ConfigLegendEntryFon" +
                        "tStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, 36, 27},
        ///                {&quot;Item3&quot;, 52, 70, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Legend_ConfigLegendFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Legend.ConfigLegendFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -20, 36, 27},
        ///                {&quot;Item3&quot;, 52, 70, 30},
        ///                {&quot;Item4&quot;, 22, 33, -20},
        ///                {&quot;Item5&quot;, 23, 30, 30}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Legend_ConfigLegendPositionAndLayout {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Legend.ConfigLegendPosition" +
                        "AndLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkers, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;},
        ///                {&quot;Item1&quot;, 10},
        ///                {&quot;Item2&quot;, -51},
        ///                {&quot;Item3&quot;, 52},
        ///                {&quot;Item4&quot;, 22},
        ///                {&quot;Item5&quot;, 40}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:B6&quot;), RowCol.Column [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Markers_ConfigMarkersFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Markers.ConfigMarkersFormat" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.LineMarkers, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;},
        ///                {&quot;Item1&quot;, 10},
        ///                {&quot;Item2&quot;, -51},
        ///                {&quot;Item3&quot;, 52},
        ///                {&quot;Item4&quot;, 22},
        ///                {&quot;Item5&quot;, 40}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:B6&quot;), RowCol.Column [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Markers_ConfigMarkerStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Markers.ConfigMarkerStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_PlotArea_ChartJustPlotVisibleCell {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.PlotArea.ChartJustPlotVisib" +
                        "leCell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, 36, 27},
        ///                {&quot;Item3&quot;, 52, 50, -30},
        ///                {&quot;Item4&quot;, 22, 65, 30},
        ///                {&quot;Item5&quot;, 23, 40, 69}
        ///            }
        ///            shape.Chart.Ser [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_PlotArea_ConfigPlotAreaFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.PlotArea.ConfigPlotAreaForm" +
                        "at", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            &apos;Add series
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Series_AddSeries {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.AddSeries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            &apos;Add series
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Series_ChangeSeriesType {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.ChangeSeriesType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.Bubble, 250, 20, 350, 220)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.SeriesColl [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Series_ConfigBubbleChartLayout {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.ConfigBubbleChartLay" +
                        "out", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Series_ConfigSeriesFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.ConfigSeriesFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:C6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;},
        ///                {&quot;Item1&quot;, 10, 25},
        ///                {&quot;Item2&quot;, -51, -36},
        ///                {&quot;Item3&quot;, 32, 64},
        ///                {&quot;Item4&quot;, 44, 80},
        ///                {&quot;Item5&quot;, 60, 100}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(workshe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Series_CreateSecondaryAxis {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.CreateSecondaryAxis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 25},
        ///                {&quot;Item2&quot;, -51, -36, 27},
        ///                {&quot;Item3&quot;, 52, -85, -30},
        ///                {&quot;Item4&quot;, 22, 65, 65},
        ///                {&quot;Item5&quot;, 23, 69, 69}
        ///            }
        ///            shape.Chart.S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Series_DeleteSeries {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.DeleteSeries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:D4&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;, &quot;S2&quot;, &quot;S3&quot;},
        ///                {&quot;Item1&quot;, 10, 25, 50},
        ///                {&quot;Item2&quot;, 15, -36, 40},
        ///                {&quot;Item3&quot;, 52, 40, -30}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:D4&quot;), RowCol.Columns, True, True)
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Series_ExtendSeries {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.ExtendSeries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 250, 20, 360, 230)
        ///            worksheet.Range(&quot;A1:B6&quot;).Value = {
        ///                {Nothing, &quot;S1&quot;},
        ///                {&quot;Item1&quot;, 10},
        ///                {&quot;Item2&quot;, -51},
        ///                {&quot;Item3&quot;, 52},
        ///                {&quot;Item4&quot;, 22},
        ///                {&quot;Item5&quot;, 23}
        ///            }
        ///            shape.Chart.SeriesCollection.Add(worksheet.Range(&quot;A1:B6&quot;), RowCol.Co [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Charts_Series_SetVaryColorForColumnChart {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Charts.Series.SetVaryColorForColum" +
                        "nChart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;create comment for range C3.
        ///            Dim comment As IComment = worksheet.Range!C3.AddComment(&quot;Range C3&apos;s comment.&quot;)
        ///            &apos;change comment&apos;s text.
        ///            comment.Text = &quot;Range C3&apos;s new comment.&quot;
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Comments_AddComment {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Comments.AddComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!C3.AddComment(&quot;Range C3&apos;s comment.&quot;)
        ///            worksheet.Range!D4.AddComment(&quot;Range D4&apos;s comment.&quot;)
        ///            worksheet.Range!D5.AddComment(&quot;Range D5&apos;s comment.&quot;)
        ///            &apos;delete a single cell comment.
        ///            worksheet.Range!D5.Comment.Delete()
        ///            &apos;clear a range of cells comment.
        ///            worksheet.Range(&quot;C3:D4&quot;).ClearComments()
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Comments_ClearComment {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Comments.ClearComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim commentC3 As IComment = worksheet.Range!C3.AddComment(&quot;Range C3&apos;s comment.&quot;)
        ///            commentC3.Shape.Line.Color.RGB = Color.LightGreen
        ///            commentC3.Shape.Line.Weight = 3
        ///            commentC3.Shape.Line.Style = LineStyle.ThickThin
        ///            commentC3.Shape.Line.DashStyle = LineDashStyle.Solid
        ///            commentC3.Shape.Fill.Color.RGB = Color.Pink
        ///            commentC3.Shape.Width = 100
        ///            comm [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Comments_ConfigCommentLayout {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Comments.ConfigCommentLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim commentC3 As IComment = worksheet.Range!C3.AddComment(&quot;This is a rich text comment:&quot; &amp; vbCrLf)
        ///            &apos;config the paragraph&apos;s style.
        ///            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Font.Bold = True
        ///            &apos;add runs for the paragraph.
        ///            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Runs.Add(&quot;Run1 font size is 15.&quot;, 1)
        ///            commentC3.Shape.TextFrame.TextRange.Paragraphs(0).Runs [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Comments_SetRichTextForComment {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Comments.SetRichTextForComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;B:C&quot;).ColumnWidth = 17
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateAverageRule {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateAverag" +
                        "eRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;B:C&quot;).ColumnWidth = 17
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateCellValueRule {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateCellVa" +
                        "lueRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateDatabBarRule {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateDatabB" +
                        "arRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateExpressionRule {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateExpres" +
                        "sionRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateIconSetRule {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateIconSe" +
                        "tRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateMultiRuleForRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateMultiR" +
                        "uleForRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateThreeColorScaleRule {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateThreeC" +
                        "olorScaleRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateTopBottomRule {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateTopBot" +
                        "tomRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateTwoColorScaleRule {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateTwoCol" +
                        "orScaleRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 80, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 72, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 71, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 80, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_CreateUniqueRule {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.CreateUnique" +
                        "Rule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_ConditionalFormatting_DeleteConditionalFormatRules {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.ConditionalFormatting.DeleteCondit" +
                        "ionalFormatRules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Excel.Workbook.AddCustomFunction(New MyAddFunctionX)
        ///
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Value = 1
        ///            worksheet.Range!B1.Value = 2
        ///            worksheet.Range!C1.Formula = &quot;=MyAdd(A1, B1)&quot;
        ///
        ///            &apos; Range!C1.Value = 3.
        ///            Dim result = worksheet.Range!C1.Value
        ///
        ///            worksheet.Range(&quot;E1:F2&quot;).Value = New Object(,) {
        ///                {1, 3},
        ///                {2, 4}
        ///            }
        ///
        ///            &apos; C [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_CustomFunctions_MyAddFunction {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyAddFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Excel.Workbook.AddCustomFunction(New MyConcatenateFunctionX)
        ///
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Formula = &quot;=MyConcatenate(&quot;&quot;I&quot;&quot;, &quot;&quot; &quot;&quot;, &quot;&quot;live&quot;&quot;, &quot;&quot; &quot;&quot;, &quot;&quot;in&quot;&quot;, &quot;&quot; &quot;&quot;, &quot;&quot;Xi&apos;an&quot;&quot;, &quot;&quot;.&quot;&quot;)&quot;
        ///            worksheet.Range!A2.Formula = &quot;=MyConcatenate(A1, &quot;&quot;haha.&quot;&quot;)&quot;
        ///
        ///            worksheet.Range!B1.Value = 12
        ///            worksheet.Range!B2.Value = 34
        ///            worksheet.Range!B3.Formula = &quot;=MyConcatenate(B1, B2)&quot;
        ///
        ///            wo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_CustomFunctions_MyConcatenateFunction {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyConcatenateFunct" +
                        "ion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Excel.Workbook.AddCustomFunction(New MyConditionalSumFunctionX)
        ///
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A1:A10&quot;).Value = New Object(,) {
        ///                {1}, {2}, {3}, {4}, {5},
        ///                {6}, {7}, {8}, {9}, {10}
        ///            }
        ///            Dim formatConditions As IFormatConditions = worksheet.Range(&quot;A1:A10&quot;).FormatConditions
        ///            Dim cellValueRule = formatConditions.Add(FormatConditionType.CellValue, FormatConditionOper [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_CustomFunctions_MyConditionalSumFunction {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyConditionalSumFu" +
                        "nction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Excel.Workbook.AddCustomFunction(New MyIsErrorFunctionX)
        ///
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///
        ///            worksheet.Range!A1.Value = CalcError.Num
        ///            worksheet.Range!A2.Value = 100
        ///
        ///            worksheet.Range!B1.Formula = &quot;=MyIsError(A1)&quot;
        ///            worksheet.Range!B2.Formula = &quot;=MyIsError(A2)&quot;
        ///
        ///            &apos; Range!B1.Value = True.
        ///            Dim resultB1 = worksheet.Range!B1.Value
        ///
        ///            &apos; Range!B2.Value = False.
        ///            Dim re [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_CustomFunctions_MyIsErrorFunction {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyIsErrorFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Excel.Workbook.AddCustomFunction(New MyIsMergedRangeFunctionX)
        ///
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///
        ///            worksheet.Range(&quot;A1:B2&quot;).Merge()
        ///
        ///            worksheet.Range!C1.Formula = &quot;=MyIsMergedRange(A1)&quot;
        ///            worksheet.Range!C2.Formula = &quot;=MyIsMergedRange(H2)&quot;
        ///
        ///            &apos; A1 is a merged cell, Range!C1.Value = True.
        ///            Dim resultC1 = worksheet.Range!C1.Value
        ///
        ///            &apos; H2 is not a merged cell, Range!C2.Value = False.
        ///       [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_CustomFunctions_MyIsMergedRangeFunction {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MyIsMergedRangeFun" +
                        "ction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Excel.Workbook.AddCustomFunction(New MySumFunctionX)
        ///
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Value = 1
        ///            worksheet.Range!B1.Value = 2
        ///            worksheet.Range!C1.Formula = &quot;=MySum(A1:B1, 2, {3,4})&quot;
        ///
        ///            &apos; Range!C1.Value = 12.
        ///            Dim result = worksheet.Range!C1.Value
        ///
        ///            &apos;    Implementation of MySumFunctionX
        ///            &apos;
        ///            &apos;    Public Class MySumFunctionX
        ///            &apos;         [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_CustomFunctions_MySumFunction {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.CustomFunctions.MySumFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A2.Value = 1
        ///            worksheet.Range!A3.Value = 2
        ///            worksheet.Range!C2.Value = 0
        ///            &apos;create custom validation, if the expression &quot;=$C$2&quot; result is True, the cell&apos;s validation will be True, otherwise, it is False.
        ///            &apos;when use custom validation, validationOperator and formula2 parameters will be ignored even if you have given.
        ///            worksheet.Range(&quot;A2:A3&quot;).Validation.Add [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_DataValidation_CreateCustomValidation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateCustomValidat" +
                        "ion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;C2:E4&quot;).Value = {
        ///                {
        ///                    #12/1/2020#,
        ///                    #12/14/2020#,
        ///                    #12/15/2020#
        ///                },
        ///                {
        ///                    #12/18/2020#,
        ///                    #12/19/2020#,
        ///                    #12/30/2020#
        ///                },
        ///                {
        ///                    #12/31/2020#,
        ///                    #12/13/2019#,
        ///                    #1 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_DataValidation_CreateDateValidation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateDateValidatio" +
                        "n", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;C2:E4&quot;).Value = {
        ///                {1, 3.0, 3.4},
        ///                {7, 9, 102.7},
        ///                {102.8, 110, 120}
        ///            }
        ///            &apos;add decimal validation.
        ///            worksheet.Range(&quot;C2:E4&quot;).Validation.Add(ValidationType.Decimal, ValidationAlertStyle.Stop, ValidationOperator.Between, 3.4, 102.8)
        ///            Dim validation As IValidation = worksheet.Range(&quot;C2:E4&quot;).Validation
        ///            validat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_DataValidation_CreateDecimalValidation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateDecimalValida" +
                        "tion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Value = &quot;aaa&quot;
        ///            worksheet.Range!A2.Value = &quot;bbb&quot;
        ///            worksheet.Range!A3.Value = &quot;ccc&quot;
        ///            worksheet.Range(&quot;C2:E4&quot;).Value = {
        ///                {&quot;aaa&quot;, &quot;bbb&quot;, &quot;ccc&quot;},
        ///                {&quot;aaa1&quot;, &quot;bbb1&quot;, &quot;ccc1&quot;},
        ///                {&quot;aaa2&quot;, &quot;bbb2&quot;, &quot;ccc2&quot;}
        ///            }
        ///            &apos;create list validation.
        ///            worksheet.Range(&quot;C2:E4&quot;).Validation.Add(ValidationType.List, Validat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_DataValidation_CreateListValidation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateListValidatio" +
                        "n", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;C2:E4&quot;).Value = {
        ///                {&quot;aa&quot;, &quot;bb&quot;, &quot;aa1&quot;},
        ///                {&quot;ccc&quot;, &quot;dddd&quot;, &quot;dddd1&quot;},
        ///                {&quot;ff&quot;, &quot;ffff&quot;, &quot;ffff1&quot;}
        ///            }
        ///            &apos;create text length validation, text length between 2 and 3.
        ///            worksheet.Range(&quot;C2:E4&quot;).Validation.Add(ValidationType.TextLength, ValidationAlertStyle.Stop, ValidationOperator.Between, 2, 3)
        ///            &apos;judge if Range(&quot;C2:E4&quot;) has val [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_DataValidation_CreateTextLength {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateTextLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;C2:E4&quot;).Value = {
        ///                {
        ///                    New TimeSpan(13, 0, 0),
        ///                    New TimeSpan(13, 29, 59),
        ///                    New TimeSpan(13, 30, 0)
        ///                },
        ///                {
        ///                    New TimeSpan(14, 0, 0),
        ///                    New TimeSpan(15, 0, 0),
        ///                    New TimeSpan(16, 30, 0)
        ///                },
        ///                {
        ///                    New Tim [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_DataValidation_CreateTimeValidation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateTimeValidatio" +
                        "n", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;C2:E4&quot;).Value = {
        ///                {1, 3, 5},
        ///                {7, 9, 11},
        ///                {13, 15, 17}
        ///            }
        ///            &apos;add whole number validation.
        ///            worksheet.Range(&quot;C2:E4&quot;).Validation.Add(ValidationType.Whole, ValidationAlertStyle.Stop, ValidationOperator.Between, 1, 8)
        ///            Dim validation As IValidation = worksheet.Range(&quot;C2:E4&quot;).Validation
        ///            validation.IgnoreBlank [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_DataValidation_CreateWholeNumberValidation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.CreateWholeNumberVa" +
                        "lidation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;C2:E4&quot;).Value = {
        ///                {
        ///                    New TimeSpan(13, 0, 0),
        ///                    New TimeSpan(13, 29, 59),
        ///                    New TimeSpan(13, 30, 0)
        ///                },
        ///                {
        ///                    New TimeSpan(14, 0, 0),
        ///                    New TimeSpan(15, 0, 0),
        ///                    New TimeSpan(16, 30, 0)
        ///                },
        ///                {
        ///                    New Tim [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_DataValidation_DeleteValidation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.DeleteValidation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;C2:E4&quot;).Value = {
        ///                {
        ///                    New TimeSpan(13, 0, 0),
        ///                    New TimeSpan(13, 29, 59),
        ///                    New TimeSpan(13, 30, 0)
        ///                },
        ///                {
        ///                    New TimeSpan(14, 0, 0),
        ///                    New TimeSpan(15, 0, 0),
        ///                    New TimeSpan(16, 30, 0)
        ///                },
        ///                {
        ///                    New Tim [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_DataValidation_ModifyValidation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.DataValidation.ModifyValidation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!D3.Value = &quot;Numbers&quot;
        ///            worksheet.Range!D4.Value = 1
        ///            worksheet.Range!D5.Value = 2
        ///            worksheet.Range!D6.Value = 3
        ///            &apos;first time invoke. worksheet&apos;s filter range will be D3:D6.
        ///            worksheet.Range(&quot;D3:D6&quot;).AutoFilter(0, &quot;&lt;&gt;2&quot;)
        ///            &apos;set AutoFilterMode to False. must set this property before, otherwise, subsequent code can not take effort.
        ///            wo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_ChangeWorksheetFilterRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.ChangeWorksheetFilterRan" +
                        "ge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_ClearFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.ClearFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_DateFiltering_DateDynamicFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.DateFiltering.DateDynami" +
                        "cFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_DateFiltering_DateFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.DateFiltering.DateFilter" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_FilteringByColor_FilterByAutomaticFontColor {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByColor.FilterB" +
                        "yAutomaticFontColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_FilteringByColor_FilterByCellColor {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByColor.FilterB" +
                        "yCellColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_FilteringByColor_FilterByFontColor {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByColor.FilterB" +
                        "yFontColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_FilteringByColor_FilterByNoFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByColor.FilterB" +
                        "yNoFill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_FilteringByIcon_FilterByIcon {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByIcon.FilterBy" +
                        "Icon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_FilteringByIcon_FilterByNoIcon {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.FilteringByIcon.FilterBy" +
                        "NoIcon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_MultiSelectFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.MultiSelectFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_NumberFiltering_NumberFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.NumberFiltering.NumberFi" +
                        "lter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_ReApplyFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.ReApplyFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Haz [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Filtering_TextFiltering_TextFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Filtering.TextFiltering.TextFilter" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Columns(0).ColumnWidth = 17
        ///            Dim rangeA1 As IRange = worksheet.Range!A1
        ///            rangeA1.Value = &quot;Right and top&quot;
        ///            rangeA1.HorizontalAlignment = HorizontalAlignment.Right
        ///            rangeA1.VerticalAlignment = VerticalAlignment.Top
        ///            Dim rangeA2 As IRange = worksheet.Range!A2
        ///            rangeA2.Value = &quot;Center&quot;
        ///            rangeA2.HorizontalAlignment = HorizontalAlignment.Cent [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Alignment_HAlignVAlign {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.HAlignVAlign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim rangeB2 As IRange = worksheet.Range!B2
        ///            rangeB2.Value = &quot;Rotated Cell Contents&quot;
        ///            rangeB2.HorizontalAlignment = HorizontalAlignment.Center
        ///            rangeB2.VerticalAlignment = VerticalAlignment.Center
        ///            &apos;Rotate cell contents.
        ///            rangeB2.Orientation = 15
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Alignment_RotateCellContents {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.RotateCellCon" +
                        "tents", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim rangeB1 As IRange = worksheet.Range!B1
        ///            rangeB1.Value = &quot;The ShrinkToFit property is applied&quot;
        ///            rangeB1.ShrinkToFit = True
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Alignment_ShrinkToFit {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.ShrinkToFit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim rangeC1 As IRange = worksheet.Range!C1
        ///            rangeC1.Value = &quot;The ReadingOrder property is applied to set text direction.&quot;
        ///            rangeC1.ReadingOrder = ReadingOrder.RightToLeft
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Alignment_TextOrientation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.TextOrientati" +
                        "on", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim rangeB3 As IRange = worksheet.Range!B3
        ///            rangeB3.Value = &quot;The WrapText property is applied to wrap the text within a cell&quot;
        ///            rangeB3.WrapText = True
        ///            worksheet.Rows(2).RowHeight = 150
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Alignment_WrapText {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Alignment.WrapText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Change to build in name style.
        ///            worksheet.Range!A1.Value = &quot;Bad&quot;
        ///            worksheet.Range!A1.Style = workbook.Styles(&quot;Bad&quot;)
        ///            &apos;Change to custom name style.
        ///            &apos;Add custom name style.
        ///            Dim style As IStyle = workbook.Styles.Add(&quot;testStyle&quot;)
        ///            &apos;Config custom name style settings begin.
        ///            &apos;Border
        ///            style.Borders(BordersIndex.EdgeLeft).LineStyle = Borde [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_ApplyStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.ApplyStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim rangeB2 As IRange = worksheet.Range!B2
        ///            &apos;set left, top, right, bottom borders together.
        ///            rangeB2.Borders.LineStyle = BorderLineStyle.DashDot
        ///            rangeB2.Borders.Color = Color.Green
        ///            &apos;set top border individually.
        ///            rangeB2.Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Medium
        ///            rangeB2.Borders(BordersIndex.EdgeTop).Color = Color.Red
        ///            &apos;se [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Borders_AddBordersToCell {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Borders.AddBordersToCel" +
                        "l", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim rangeB2_E6 As IRange = worksheet.Range(&quot;B2:E6&quot;)
        ///            &apos;set left, top, right, bottom borders together.
        ///            rangeB2_E6.Borders.LineStyle = BorderLineStyle.DashDot
        ///            rangeB2_E6.Borders.Color = Color.Green
        ///            &apos;set inside horizontal border.
        ///            rangeB2_E6.Borders(BordersIndex.InsideHorizontal).LineStyle = BorderLineStyle.Dashed
        ///            rangeB2_E6.Borders(BordersIndex.InsideHorizo [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Borders_AddingBordersToRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Borders.AddingBordersTo" +
                        "Range", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Add custom name style.
        ///            Dim style As IStyle = workbook.Styles.Add(&quot;testStyle&quot;)
        ///            &apos;Config custom name style settings begin.
        ///            &apos;Border
        ///            style.Borders(BordersIndex.EdgeLeft).LineStyle = BorderLineStyle.Thin
        ///            style.Borders(BordersIndex.EdgeTop).LineStyle = BorderLineStyle.Thick
        ///            style.Borders(BordersIndex.EdgeRight).LineStyle = BorderLineStyle.Double
        ///            [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_CreateCustomStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.CreateCustomStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Interior.Pattern = Pattern.LinearGradient
        ///            With TryCast(worksheet.Range!A1.Interior.Gradient, ILinearGradient)
        ///                .ColorStops(0).Color = Color.Red
        ///                .ColorStops(1).Color = Color.Yellow
        ///                .Degree = 90
        ///            End With
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fill_LinearGradientFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fill.LinearGradientFill" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            With worksheet.Range!A1.Interior
        ///                .Pattern = Pattern.LightDown
        ///                .Color = Color.Pink
        ///                .PatternColorIndex = 5
        ///            End With
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fill_PatternFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fill.PatternFill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Interior.Pattern = Pattern.RectangularGradient
        ///            With TryCast(worksheet.Range!A1.Interior.Gradient, IRectangularGradient)
        ///                .ColorStops(0).Color = Color.Red
        ///                .ColorStops(1).Color = Color.Green
        ///                .Bottom = 0.2
        ///                .Right = 0.3
        ///                .Top = 0.4
        ///                .Left = 0.5
        ///            End With
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fill_RectangularGradientFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fill.RectangularGradien" +
                        "tFill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A2.Interior.Color = Color.Green
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fill_SolidFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fill.SolidFill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Value = &quot;font&quot;
        ///            worksheet.Range!A1.Font.Color = Color.Green
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fonts_FontColor {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Value = &quot;Strikethrough&quot;
        ///            worksheet.Range!A1.Font.Strikethrough = True
        ///            worksheet.Range!A2.Value = &quot;Superscript&quot;
        ///            worksheet.Range!A2.Font.Superscript = True
        ///            worksheet.Range!A3.Value = &quot;Subscript&quot;
        ///            worksheet.Range!A3.Font.Subscript = True
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fonts_FontEffect {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontEffect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;use Name property to set font name.
        ///            worksheet.Range!A1.Value = &quot;Calibri&quot;
        ///            worksheet.Range!A1.Font.Name = &quot;Calibri&quot;
        ///            &apos;use ThemeFont property to set font name.
        ///            worksheet.Range!A2.Value = &quot;Major theme font&quot;
        ///            worksheet.Range!A2.Font.ThemeFont = ThemeFont.Major
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fonts_FontName {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Value = &quot;Font size is 15&quot;
        ///            worksheet.Range!A1.Font.Size = 15
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fonts_FontSize {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Value = &quot;Bold&quot;
        ///            worksheet.Range!A1.Font.Bold = True
        ///            worksheet.Range!A2.Value = &quot;Italic&quot;
        ///            worksheet.Range!A2.Font.Italic = True
        ///            worksheet.Range!A3.Value = &quot;Bold Italic&quot;
        ///            worksheet.Range!A3.Font.Bold = True
        ///            worksheet.Range!A3.Font.Italic = True
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fonts_FontStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Value = &quot;Single Underline&quot;
        ///            worksheet.Range!A1.Font.Underline = UnderlineType.Single
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Fonts_FontUnderline {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Fonts.FontUnderline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Range A1&apos;s displaying color is table style
        ///            worksheet.Tables.Add(worksheet.Range(&quot;A1:E5&quot;), True)
        ///            Dim color_A1 = worksheet.Range!A1.DisplayFormat.Interior.Color
        ///            &apos;Range A1&apos;s displaying color will be cell style, yellow.
        ///            worksheet.Range!A1.Interior.Color = Color.Yellow
        ///            Dim color_A1_1 = worksheet.Range!A1.DisplayFormat.Interior.Color
        ///            &apos;Range A1&apos;s displaying  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_GetDisplayFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.GetDisplayFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set range values.
        ///            worksheet.Range(&quot;A2:B2&quot;).Value = -15.5
        ///            worksheet.Range(&quot;A3:B3&quot;).Value = 555
        ///            worksheet.Range(&quot;A4:B4&quot;).Value = 0
        ///            worksheet.Range(&quot;A5:B5&quot;).Value = &quot;Name&quot;
        ///            &apos;Apply custom number format.
        ///            worksheet.Range(&quot;B2:B5&quot;).NumberFormat = &quot;[Green]#.00;[Red]#.00;[Blue]0.00;[Cyan]&quot;&quot;product: &quot;&quot;@&quot;
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_NumberFormat_CustomNumberFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.NumberFormat.CustomNumb" +
                        "erFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A:F&quot;).ColumnWidth = 17
        ///            worksheet.Range(&quot;A1:F1&quot;).Formula = &quot;= Now()&quot;
        ///            &apos;Apply different date formats.
        ///            worksheet.Range!A1.NumberFormat = &quot;m/d/yy&quot;
        ///            worksheet.Range!B1.NumberFormat = &quot;d-mmm-yy&quot;
        ///            worksheet.Range!C1.NumberFormat = &quot;dddd&quot;
        ///            &apos;Apply different time formats.
        ///            worksheet.Range!D1.NumberFormat = &quot;m/d/yy h:mm&quot;
        ///            work [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_NumberFormat_DateAndTimeFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.NumberFormat.DateAndTim" +
                        "eFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A:H&quot;).ColumnWidth = 17
        ///            &apos; Display 111 as 111.
        ///            worksheet.Range!A1.Value = 111
        ///            worksheet.Range!A1.NumberFormat = &quot;#####&quot;
        ///            &apos; Display 222 as 00222.
        ///            worksheet.Range!B1.Value = 222
        ///            worksheet.Range!B1.NumberFormat = &quot;00000&quot;
        ///            &apos; Display 12345678 as 12,345,678.
        ///            worksheet.Range!C1.Value = 12345678
        ///            worksheet.Ran [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_NumberFormat_NumberFormats {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.NumberFormat.NumberForm" +
                        "ats", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!B1.Formula = &quot;=A1&quot;
        ///            &apos;config range B1&apos;s FormulaHidden property.
        ///            worksheet.Range!B1.FormulaHidden = True
        ///            &apos;protect worksheet, range B1&apos;s formula will not show in exported xlsx file.
        ///            worksheet.Protection = True
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Protection_SetRangeFormulaHidden {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Protection.SetRangeForm" +
                        "ulaHidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;config range B1&apos;s Locked property.
        ///            worksheet.Range!B1.Locked = False
        ///            &apos;protect worksheet, range B1 can be modified in exported xlsx file.
        ///            worksheet.Protection = True
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formatting_Protection_SetRangeLocked {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formatting.Protection.SetRangeLock" +
                        "ed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet1 As IWorksheet = workbook.Worksheets(0)
        ///            Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
        ///            worksheet1.Range!C8.NumberFormat = &quot;0.0000&quot;
        ///            worksheet1.Names.Add(&quot;test1&quot;, &quot;=Sheet1!$A$1&quot;)
        ///            worksheet1.Names.Add(&quot;test2&quot;, &quot;=Sheet1!test1*2&quot;)
        ///            workbook.Names.Add(&quot;test3&quot;, &quot;=Sheet1!$A$1&quot;)
        ///            worksheet1.Range!A1.Value = 1
        ///            &apos;C6&apos;s value is 1.
        ///            worksheet1.Range!C6.Formula = &quot;=test1&quot;
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formulas_AddCustomName {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.AddCustomName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;set workbook&apos;s reference style to R1C1. exported xlsx file will be R1C1 style.
        ///            workbook.ReferenceStyle = ReferenceStyle.R1C1
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formulas_ConfigWorkbookReferenceStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.ConfigWorkbookReferenceSt" +
                        "yle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!A1.Value = 1
        ///            worksheet.Range!A2.Formula = &quot;=A1&quot;
        ///            worksheet.Range!A3.Formula = &quot;=SUM(A1, A2)&quot;
        ///            &apos;when get value, calc engine will first calculate and cache the result, then returns the cached result.
        ///            Dim value_A2 = worksheet.Range!A2.Value
        ///            Dim value_A3 = worksheet.Range!A3.Value
        ///            &apos;disable calc engine.
        ///            workbook.EnableCalculation  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formulas_DirtyAndCalculation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.DirtyAndCalculation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;E4:J5&quot;).Value = {
        ///                {1, 2, 3},
        ///                {4, 5, 6}
        ///            }
        ///            worksheet.Range(&quot;I6:J8&quot;).Value = {
        ///                {2, 2},
        ///                {3, 3},
        ///                {4, 4}
        ///            }
        ///            &apos;O     P      Q
        ///            &apos;2     4      #N/A
        ///            &apos;12    15     #N/A
        ///            &apos;#N/A  #N/A   #N/A
        ///            worksheet.Range(&quot;O9:Q11&quot;).FormulaArray = &quot;=E4:G5*I6: [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formulas_UseArrayFormula {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.UseArrayFormula", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A:E&quot;).ColumnWidth = 15
        ///            worksheet.Range(&quot;A1:E3&quot;).Value = {
        ///                {&quot;SalesPerson&quot;, &quot;Region&quot;, &quot;SalesAmount&quot;, &quot;ComPct&quot;, &quot;ComAmt&quot;},
        ///                {&quot;Joe&quot;, &quot;North&quot;, 260, 0.1, Nothing},
        ///                {&quot;Nia&quot;, &quot;South&quot;, 660, 0.15, Nothing}
        ///            }
        ///            worksheet.Tables.Add(worksheet.Range(&quot;A1:E3&quot;), True)
        ///            worksheet.Tables(0).Name = &quot;DeptSales&quot;
        ///            worksheet.T [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Formulas_UseTableFormula {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Formulas.UseTableFormula", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;1:20 rows&apos; outline level will be 2.
        ///            worksheet.Range(&quot;1:20&quot;).Group()
        ///            &apos;1:10 rows&apos; outline level will be 3.
        ///            worksheet.Range(&quot;1:10&quot;).Group()
        ///            &apos;1:20 rows&apos; outline level will be 1.
        ///            worksheet.Range(&quot;1:20&quot;).ClearOutline()
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Grouping_ClearOutline {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.ClearOutline", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;1:20 rows&apos; outline level will be 2.
        ///            worksheet.Range(&quot;1:20&quot;).Group()
        ///            &apos;1:10 rows&apos; outline level will be 3.
        ///            worksheet.Range(&quot;1:10&quot;).Group()
        ///            &apos;1:10 rows will be collapsed.
        ///            worksheet.Range(&quot;11:11&quot;).ShowDetail = False
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Grouping_CollapseGroup {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.CollapseGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;1:20 rows&apos; outline level will be 2.
        ///            worksheet.Range(&quot;1:20&quot;).Group()
        ///            &apos;1:10 rows&apos; outline level will be 3.
        ///            worksheet.Range(&quot;1:10&quot;).Group()
        ///            &apos;A:N columns&apos; outline level will be 2.
        ///            worksheet.Range(&quot;A:N&quot;).Group()
        ///            &apos;A:E columns&apos; outline level will be 3.
        ///            worksheet.Range(&quot;A:E&quot;).Group()
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Grouping_CreateRangeGroup {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.CreateRangeGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A:N&quot;).Group()
        ///            worksheet.Range(&quot;A:F&quot;).Group()
        ///            worksheet.Range(&quot;A:C&quot;).Group()
        ///            worksheet.Range(&quot;Q:Z&quot;).Group()
        ///            worksheet.Range(&quot;Q:T&quot;).Group()
        ///            &apos;level 3 and level 4 will be collapsed. level 2 and level 1 expand.
        ///            worksheet.Outline.ShowLevels(columnLevels:=2)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Grouping_ShowSpecificLevel {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.ShowSpecificLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;1:20 rows&apos; outline level will be 2.
        ///            worksheet.Range(&quot;1:20&quot;).Group()
        ///            &apos;1:10 rows&apos; outline level will be 3.
        ///            worksheet.Range(&quot;1:10&quot;).Group()
        ///            &apos;1:10 rows&apos; outline level will be 2.
        ///            worksheet.Range(&quot;1:10&quot;).Ungroup()
        ///            &apos;1:20 rows&apos; outline level will be 1.
        ///            worksheet.Range(&quot;1:20&quot;).Ungroup()
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Grouping_UngroupRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Grouping.UngroupRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A:A&quot;).ColumnWidth = 30
        ///            &apos;add a hyperlink link to web page.
        ///            worksheet.Range(&quot;A1:B2&quot;).Hyperlinks.Add(worksheet.Range!A1, &quot;http://www.google.com/&quot;, Nothing, &quot;open google web site.&quot;, &quot;Google&quot;)
        ///            &apos;add a hyperlink link to a range in this document.
        ///            worksheet.Range(&quot;A3:B4&quot;).Hyperlinks.Add(worksheet.Range!A3, Nothing, &quot;Sheet1!$C$3:$E$4&quot;, &quot;Go to sheet1 C3:E4&quot;)
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Hyperlinks_CreateHyperlinks {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Hyperlinks.CreateHyperlinks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A:A&quot;).ColumnWidth = 30
        ///            &apos;add a hyperlink link to web page.
        ///            worksheet.Range(&quot;A1:B2&quot;).Hyperlinks.Add(worksheet.Range!A1, &quot;http://www.google.com/&quot;, Nothing, &quot;open google web site.&quot;, &quot;Google&quot;)
        ///            &apos;add a hyperlink link to a range in this document.
        ///            worksheet.Range(&quot;A3:B4&quot;).Hyperlinks.Add(worksheet.Range!A3, Nothing, &quot;Sheet1!$C$3:$E$4&quot;, &quot;Go to sheet1 C3:E4&quot;)
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Hyperlinks_DeleteHyperlinks {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Hyperlinks.DeleteHyperlinks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set even page headerfooter
        ///            worksheet.PageSetup.OddAndEvenPagesHeaderFooter = True
        ///            worksheet.PageSetup.EvenPage.CenterHeader.Text = &quot;&amp;T&quot;
        ///            worksheet.PageSetup.EvenPage.RightFooter.Text = &quot;&amp;D&quot;
        ///            &apos;Set even page headerfooter&apos;s graphic
        ///            worksheet.PageSetup.EvenPage.LeftFooter.Text = &quot;&amp;G [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigEvenPageHeaderFooter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigEvenPageHeaderFoot" +
                        "er", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set first page headerfooter
        ///            worksheet.PageSetup.DifferentFirstPageHeaderFooter = True
        ///            worksheet.PageSetup.FirstPage.CenterHeader.Text = &quot;&amp;T&quot;
        ///            worksheet.PageSetup.FirstPage.RightFooter.Text = &quot;&amp;D&quot;
        ///            &apos;Set first page headerfooter&apos;s graphic
        ///            worksheet.PageSetup.FirstPage.LeftFooter.Te [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigFirstPageHeaderFooter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigFirstPageHeaderFoo" +
                        "ter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.PageSetup.CenterFooter = &quot;&amp;P&quot;
        ///            &apos;Set first page number, default is p1.
        ///            worksheet.PageSetup.FirstPageNumber = 3
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigFirstPageNumber {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigFirstPageNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set page headerfooter
        ///            worksheet.PageSetup.LeftHeader = &quot;&amp;&quot;&quot;Arial,Italic&quot;&quot;LeftHeader&quot;
        ///            worksheet.PageSetup.CenterHeader = &quot;&amp;P&quot;
        ///            &apos;Set page headerfooter&apos;s graphic
        ///            worksheet.PageSetup.CenterFooter = &quot;&amp;G&quot;
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            worksheet. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigHeaderFooter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigHeaderFooter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set center, default is False.
        ///            worksheet.PageSetup.CenterHorizontally = True
        ///            worksheet.PageSetup.CenterVertically = True
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigPageCenter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPageCenter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set margins, in points.
        ///            worksheet.PageSetup.TopMargin = 36
        ///            worksheet.PageSetup.BottomMargin = 36
        ///            worksheet.PageSetup.RightMargin = 72
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigPageMargins {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPageMargins", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set page order, default is DownThenOver.
        ///            worksheet.PageSetup.Order = Order.OverThenDown
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigPageOrder {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPageOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set page orientation, default is portrait.
        ///            worksheet.PageSetup.Orientation = PageOrientation.Landscape
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigPageOrientation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPageOrientation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set paper scaling
        ///            &apos;Method 1: Set percent scale 
        ///            worksheet.PageSetup.IsPercentScale = True
        ///            worksheet.PageSetup.Zoom = 150
        ///            &apos;Or Method 2: Fit to page&apos;s wide &amp; tall
        ///            &apos;worksheet.PageSetup.IsPercentScale = False
        ///            &apos;worksheet.PageSetup.FitToPagesWide = 3
        ///            &apos;works [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigPaperScaling {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPaperScaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set A4 paper size
        ///            worksheet.PageSetup.PaperSize = PaperSize.A4
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigPaperSize {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPaperSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set print area &amp; print titles
        ///            worksheet.PageSetup.PrintArea = &quot;$D$5:$G$10&quot;
        ///            worksheet.PageSetup.PrintTitleRows = &quot;$5:$10&quot;
        ///            worksheet.PageSetup.PrintTitleColumns = &quot;$D:$G&quot;
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigPrintArea {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPrintArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set columns to repeat at left
        ///            worksheet.PageSetup.PrintTitleColumns = &quot;$D:$G&quot;
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigPrintTitleColumns {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPrintTitleColumns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set rows to repeat at top
        ///            worksheet.PageSetup.PrintTitleRows = &quot;$5:$10&quot;
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigPrintTitleRows {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigPrintTitleRows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set sheet
        ///            worksheet.PageSetup.PrintGridlines = True
        ///            worksheet.PageSetup.PrintHeadings = True
        ///            worksheet.PageSetup.BlackAndWhite = True
        ///            worksheet.PageSetup.PrintComments = PrintLocation.InPlace
        ///            worksheet.PageSetup.PrintErrors = PrintErrors.Dash
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PageSetup_ConfigSheetPrintSettings {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PageSetup.ConfigSheetPrintSettings" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Open an excel file
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_ConvertExcelToPDF {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.ConvertExcelToPDF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            Dim picture As IShape = sheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)
        ///            &apos;Set text font color.
        ///            sheet.Range(&quot;A1:D4&quot;).Value = &quot;Font&quot;
        ///            sheet.Range(&quot;A1:D4&quot;).Font.Color = Color.Red
        ///            &apos;Set cell color
        ///            sheet.Range(&quot;A7:D10&quot;).Value = &quot;Green&quot;
        ///            sheet.Range(&quot;A7:D10&quot;).Interior.Color = Color. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigureBlackAndWhite {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "eBlackAndWhite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set text.
        ///            sheet.Range(&quot;A1:G10&quot;).Value = &quot;Text&quot;
        ///            &apos;Add picture in sheet.
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            Dim picture As IShape = sheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)
        ///            &apos;Add header graphic.
        ///            Dim stream1 As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            sheet.PageSetup.CenterHeader = &quot;&amp;G&quot;
        ///            she [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigureDraft {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "eDraft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set data.
        ///            sheet.Range(&quot;A1:G10&quot;).Value = &quot;Text&quot;
        ///            &apos;Set page header.
        ///            sheet.PageSetup.LeftHeader = &quot;&amp;&quot;&quot;Arial,Italic&quot;&quot;LeftHeader&quot;
        ///            sheet.PageSetup.RightHeader = &quot;&amp;KFF0000GrapeCity&quot;
        ///            sheet.PageSetup.CenterHeader = &quot;&amp;P&quot;
        ///            &apos;Set page footer picture.
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            sheet.PageSetup.CenterFooter = &quot;&amp;G&quot;
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigureHeaderFooter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "eHeaderFooter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            sheet.Range(&quot;A1:G10&quot;).Value = &quot;Text&quot;
        ///            &apos;Set page orientation.
        ///            sheet.PageSetup.Orientation = PageOrientation.Landscape
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigureOritation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "eOritation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            sheet.Range(&quot;A1:B5&quot;).Value = {
        ///                {1, 2},
        ///                {3, 4},
        ///                {5, 6},
        ///                {7, 8},
        ///                {9, 10}
        ///            }
        ///            &apos;Add page break
        ///            sheet.HPageBreaks.Add(sheet.Range!B3)
        ///            sheet.VPageBreaks.Add(sheet.Range!B3)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigurePageBreaks {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "ePageBreaks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set pages&apos; data.
        ///            sheet.Range(&quot;A1:J46&quot;).Value = &quot;Page1&quot;
        ///            sheet.Range(&quot;A1:J46&quot;).Interior.Color = Color.LightGreen
        ///            sheet.Range(&quot;A47:J92&quot;).Value = &quot;Page2&quot;
        ///            sheet.Range(&quot;A47:J92&quot;).Interior.Color = Color.LightYellow
        ///            sheet.Range(&quot;K1:T46&quot;).Value = &quot;Page3&quot;
        ///            sheet.Range(&quot;K1:T46&quot;).Interior.Color = Color.OrangeRed
        ///            sheet.Range(&quot;K47:T92&quot;).Value = &quot;Page4&quot;
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigurePageOrder {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "ePageOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set data.
        ///            sheet.Range(&quot;A1:G10&quot;).Value = &quot;Text&quot;
        ///            &apos;Print rowheader and columnheader.
        ///            sheet.PageSetup.PrintHeadings = True
        ///            &apos;Print gridlines.
        ///            sheet.PageSetup.PrintGridlines = True
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigurePageSetup {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "ePageSetup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim row As Integer = 50
        ///            Dim column As Integer = 14
        ///            Dim data(row - 1, column - 1) As Object
        ///            For i As Integer = 0 To row - 1
        ///                For j As Integer = 0 To column - 1
        ///                    data(i, j) = &quot;R&quot; &amp; i &amp; &quot;C&quot; &amp; j
        ///                Next j
        ///            Next i
        ///            &apos;Set data
        ///            sheet.Range(&quot;A1:N50&quot;).Value = data
        ///            &apos;Set paper size
        ///            sheet.PageSet [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigurePagination {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "ePagination", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim row As Integer = 50
        ///            Dim column As Integer = 14
        ///            Dim data(row - 1, column - 1) As Object
        ///            For i As Integer = 0 To row - 1
        ///                For j As Integer = 0 To column - 1
        ///                    data(i, j) = &quot;R&quot; &amp; i &amp; &quot;C&quot; &amp; j
        ///                Next j
        ///            Next i
        ///            &apos;Set data.
        ///            sheet.Range(&quot;A1:N50&quot;).Value = data
        ///            sheet.Range(&quot;C10:H20&quot;).Value = &quot;PrintArea [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigurePrintArea {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "ePrintArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set pages&apos; data.
        ///            sheet.Range(&quot;A1:J46&quot;).Value = &quot;Page1&quot;
        ///            sheet.Range(&quot;A1:J46&quot;).Interior.Color = Color.LightGreen
        ///            sheet.Range(&quot;A47:J92&quot;).Value = &quot;Page2&quot;
        ///            sheet.Range(&quot;A47:J92&quot;).Interior.Color = Color.LightYellow
        ///            sheet.Range(&quot;K1:T46&quot;).Value = &quot;Page3&quot;
        ///            sheet.Range(&quot;K1:T46&quot;).Interior.Color = Color.OrangeRed
        ///            sheet.Range(&quot;K47:T92&quot;).Value = &quot;Page4&quot;
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigurePrintPageRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "ePrintPageRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim row As Integer = 50
        ///            Dim column As Integer = 14
        ///            Dim data(row - 1, column - 1) As Object
        ///            For i As Integer = 0 To row - 1
        ///                For j As Integer = 0 To column - 1
        ///                    data(i, j) = &quot;R&quot; &amp; i &amp; &quot;C&quot; &amp; j
        ///                Next j
        ///            Next i
        ///            &apos;Set data.
        ///            sheet.Range(&quot;A1:N50&quot;).Value = data
        ///            sheet.Range(&quot;A2:N4&quot;).Value = &quot;TitleRows&quot;        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigurePrintTitles {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "ePrintTitles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            Dim picture As IShape = sheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)
        ///            sheet.Range(&quot;B2:D4&quot;).Value = &quot;Text&quot;
        ///            sheet.PageSetup.PrintGridlines = True
        ///            &apos;Set scaling.
        ///            sheet.PageSetup.Zoom = 200
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_PdfPageSetup_ConfigureScaling {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.PdfPageSetup.Configur" +
                        "eScaling", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Single cell border
        ///            sheet.Range!B2.Borders.ThemeColor = ThemeColor.Accent1
        ///            sheet.Range!B2.Borders.LineStyle = BorderLineStyle.SlantDashDot
        ///            sheet.Range!B2.Borders(BordersIndex.DiagonalUp).ThemeColor = ThemeColor.Accent1
        ///            sheet.Range!B2.Borders(BordersIndex.DiagonalUp).LineStyle = BorderLineStyle.SlantDashDot
        ///            sheet.Range!B2.Borders(BordersIndex.DiagonalDown).ThemeColor =  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_SaveBorder {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveBorder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Conditional formatting on merge cell
        ///            sheet.Range(&quot;B2:C4&quot;).Merge()
        ///            sheet.Range(&quot;B2:C4&quot;).Value = 123
        ///            Dim cf = DirectCast(sheet.Range(&quot;B2:C4&quot;).FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Greater, 0), IFormatCondition)
        ///            cf.Borders.ThemeColor = ThemeColor.Accent1
        ///            cf.Borders.LineStyle = BorderLineStyle.Thin
        ///            &apos;Set cell values
        ///      [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_SaveConditionalFormatting {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveConditionalFormat" +
                        "ting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.PageSetup.Orientation = PageOrientation.Landscape
        ///            Dim assembly = [GetType]().GetTypeInfo().Assembly
        ///            Dim stream As IO.Stream = assembly.GetManifestResourceStream(&quot;GrapeCity.Documents.Excel.Examples.VB.logo.png&quot;)
        ///            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 690, 100)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_SavePictureToPDF {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SavePictureToPDF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim rangeA1B2 As IRange = worksheet.Range(&quot;A1:B2&quot;)
        ///            rangeA1B2.Merge()
        ///            rangeA1B2.Interior.Pattern = Pattern.LinearGradient
        ///            Dim gradientA1B2 As ILinearGradient = TryCast(rangeA1B2.Interior.Gradient, ILinearGradient)
        ///            gradientA1B2.ColorStops(0).Color = Color.Red
        ///            gradientA1B2.ColorStops(1).Color = Color.Yellow
        ///            gradientA1B2.Degree = 90
        ///            Dim rangeE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_SaveRangeFillToPDF {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveRangeFillToPDF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Customer&quot;, &quot;0-30 Days&quot;, &quot;30-60 Days&quot;, &quot;60-90 Days&quot;, &quot;&gt;90 Days&quot;},
        ///                {&quot;Customer A&quot;, 1200.15, 1916.18, 1105.23, 1806.53},
        ///                {&quot;Customer B&quot;, 896.23, 1005.53, 1800.56, 1150.49},
        ///                {&quot;Customer C&quot;, 827.63, 1009.23, 1869.23, 1002.56}
        ///            }
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;B2:E5&quot;).Value = data
        ///            worksheet.Range(&quot;B:F&quot;).ColumnWidth = 15
        ///            [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_SaveSparklinesToPDF {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveSparklinesToPDF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Add Table
        ///            Dim table As ITable = sheet.Tables.Add(sheet.Range(&quot;B5:G16&quot;), True)
        ///            table.ShowTotals = True
        ///            &apos;Set values
        ///            Dim data() As Integer = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}
        ///            sheet.Range(&quot;C6:C16&quot;).Value = data
        ///            sheet.Range(&quot;D6:D16&quot;).Value = data
        ///            &apos;Set total functions
        ///            table.Columns(1).TotalsCalculation = TotalsCalculation.Average
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_SaveTable {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;set style.
        ///            sheet.Range!A1.Value = &quot;Sheet1&quot;
        ///            sheet.Range!A1.Font.Name = &quot;Wide Latin&quot;
        ///            sheet.Range!A1.Font.Color = Color.Red
        ///            sheet.Range!A1.Interior.Color = Color.Green
        ///            &apos;change the path to real export path when save.
        ///            workbook.Save(CurrentDirectory &amp; &quot;dest.pdf&quot;, SaveFileFormat.Pdf)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_SaveWorkbookToPDF {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveWorkbookToPDF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;set style.
        ///            sheet.Range!A1.Value = &quot;Sheet1&quot;
        ///            sheet.Range!A1.Font.Name = &quot;Wide Latin&quot;
        ///            sheet.Range!A1.Font.Color = Color.Red
        ///            sheet.Range!A1.Interior.Color = Color.Green
        ///            &apos;change the path to real export path when save.
        ///            sheet.Save(CurrentDirectory &amp; &quot;dest.pdf&quot;, SaveFileFormat.Pdf)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_SaveWorksheetToPDF {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SaveWorksheetToPDF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;set style.
        ///            sheet.Range!A1.Value = &quot;Sheet1&quot;
        ///            sheet.Range!A1.Font.Name = &quot;Wide Latin&quot;
        ///            sheet.Range!A1.Font.Color = Color.Red
        ///            sheet.Range!A1.Interior.Color = Color.Green
        ///            &apos;specify font path.
        ///            workbook.FontsFolderPath = &quot;D:\Fonts&quot;
        ///            &apos;get the used fonts list in workbook, the list are:&quot;Wide Latin&quot;, &quot;Calibri&quot;
        ///            Dim fonts = workbook.GetUsedFonts [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_SetFontsFolderPath {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.SetFontsFolderPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            sheet.Range(&quot;B3:B7&quot;).Value = 123456.789
        ///            sheet.Range(&quot;B9:B13&quot;).Value = -123456.789
        ///            sheet.Range(&quot;B4, B10&quot;).NumberFormat = &quot;0.00;[Red]0.00&quot;
        ///            sheet.Range(&quot;B5, B11&quot;).NumberFormat = &quot;$#,##0.00;[Red]$#,##0.00&quot;
        ///            sheet.Range(&quot;B6, B12&quot;).NumberFormat = &quot;0.00E+00&quot;
        ///            sheet.Range(&quot;B7, B13&quot;).NumberFormat = &quot;_($* #,##0.00_);_($* (#,##0.00);_($* &quot;&quot; - &quot;&quot;??_);_(@_)&quot;
        ///            &apos;Other setti [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_Text_NumberFormating {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.Text.NumberFormating", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///            sheet.Range(&quot;F2, F4&quot;).Value = &quot;This is a test string of overflow&quot;
        ///            sheet.Range(&quot;F6, F8&quot;).Value = &quot;This is a test string of overflow with right alignment&quot;
        ///            sheet.Range(&quot;F6, F8&quot;).HorizontalAlignment = HorizontalAlignment.Right
        ///            sheet.Range(&quot;D8, H4&quot;).Value = 123
        ///            &apos;Other settings
        ///            sheet.Range(&quot;A1:J10&quot;).Borders.LineStyle = BorderLineStyle.Thin
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_Text_Overflow {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.Text.Overflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sheet As IWorksheet = workbook.Worksheets(0)
        ///#Region &quot;Aligment&quot;
        ///            sheet.Range!A1.Value = &quot;Alignment&quot;
        ///            sheet.Range!B2.Value = &quot;Left Alignment&quot;
        ///            sheet.Range!B2.HorizontalAlignment = HorizontalAlignment.Left
        ///            sheet.Range!C2.Value = &quot;Center Alignment&quot;
        ///            sheet.Range!C2.HorizontalAlignment = HorizontalAlignment.Center
        ///            sheet.Range!D2.Value = &quot;Right Alignment&quot;
        ///            sheet.Range!D2.HorizontalAlignment = HorizontalAlignme [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PDFExporting_Text_TextStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PDFExporting.Text.TextStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 790, 120)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Picture_CreatePicture {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Picture.CreatePicture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 100, 100)
        ///            &apos;set picture size.
        ///            picture.WidthInPixel = 700
        ///            picture.HeightInPixel = 120
        ///            &apos;config picture layout.
        ///            picture.Fill.Solid()
        ///            picture.Fill.Color.ObjectThemeColor = ThemeColor.Accent1
        ///            &apos;de [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Picture_DeletePicture {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Picture.DeletePicture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            &apos;Create a shape in worksheet, picture&apos;s range is Range(&quot;A2:I6&quot;)
        ///            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)
        ///            &apos;Range(&quot;A2:I6&quot;) must contain picture&apos;s range, copy a new picture to Range(&quot;J2:R6&quot;)
        ///            worksheet.Range(&quot;A2:I6&quot;).Copy(worksheet.Range!J2)
        ///            &apos;worksheet.Range(&quot;A2:I [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Picture_PictureCopy {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Picture.PictureCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            &apos;Create a shape in worksheet, picture&apos;s range is Range(&quot;A2:I6&quot;)
        ///            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)
        ///            &apos;Range(&quot;A2:I6&quot;) must contain picture&apos;s range, cut a new picture to Range(&quot;J2:R6&quot;)
        ///            worksheet.Range(&quot;A2:I6&quot;).Cut(worksheet.Range!J2)
        ///            &apos;worksheet.Range(&quot;A2:I6&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Picture_PictureCut {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Picture.PictureCut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            &apos;Create a shape in worksheet
        ///            Dim picture As IShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 20, 20, 395, 60)
        ///            &apos;Duplicate picture
        ///            Dim newPicture As IShape = picture.Duplicate()
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Picture_PictureDuplicate {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Picture.PictureDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PivotTable_ChangeDataFieldSummarizeFunction {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.ChangeDataFieldSummariz" +
                        "eFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PivotTable_CreatePivotTable {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.CreatePivotTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PivotTable_FilterItemsInPivotTable {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.FilterItemsInPivotTable" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PivotTable_ModifySubtotalsForPivotField {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.ModifySubtotalsForPivot" +
                        "Field", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_PivotTable_RefreshPivotTable {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.PivotTable.RefreshPivotTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim range = worksheet.Range(&quot;A5:B7&quot;)
        ///            &apos;set value for cell A7.
        ///            range.Cells(4).Value = &quot;A7&quot;
        ///            &apos;cell is B6
        ///            range.Cells(1, 1).Value = &quot;B6&quot;
        ///            &apos;row count is 3 and range is A6:B6.
        ///            Dim rowCount = range.Rows.Count
        ///            Dim row = range.Rows(1).ToString()
        ///            &apos;set interior color for row range A6:B6.
        ///            range.Rows(1).Interior.Color = Color.Li [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_AccessCellsRowsColumns {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.AccessCellsRowsCol" +
                        "umns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim range = worksheet.Range(&quot;A5:B7, C3, H5:N6&quot;)
        ///            &apos;set interior color for area1 A5:B7.
        ///            Dim area1 = worksheet.Range(&quot;A5:B7, C3, H5:N6&quot;).Areas(0)
        ///            area1.Interior.Color = Color.Pink
        ///            &apos;set interior color for area2 C3.
        ///            Dim area2 = worksheet.Range(&quot;A5:B7, C3, H5:N6&quot;).Areas(1)
        ///            area2.Interior.Color = Color.LightGreen
        ///            &apos;set interior color for area3 H5:N [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_AccessEachAreaOfRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.AccessEachAreaOfRa" +
                        "nge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;use index to access cell A1.
        ///            worksheet.Range(0, 0).Interior.Color = Color.LightGreen
        ///            &apos;use index to access range A1:B2
        ///            worksheet.Range(0, 0, 2, 2).Value = 5
        ///            &apos;use string to access range.
        ///            worksheet.Range!A2.Interior.Color = Color.LightYellow
        ///            worksheet.Range(&quot;C3:D4&quot;).Interior.Color = Color.Tomato
        ///            worksheet.Range(&quot;A5:B7, C3, H5:N6&quot;).Value = 2        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_AccessRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.AccessRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos; cell&apos;s value B2
        ///            Dim cell As String = Excel.CellInfo.CellIndexToName(1, 1)
        ///            worksheet.Range(cell).Interior.Color = Color.LightBlue
        ///            Dim rowIndex, columnIndex As Integer
        ///            &apos; rowIndex is 3 and columnIndex is 2
        ///            Excel.CellInfo.CellNameToIndex(&quot;C4&quot;, rowIndex, columnIndex)
        ///            worksheet.Range(rowIndex, columnIndex).Interior.Color = Color.LightCoral
        ///            &apos; c [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_CellInfo {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.CellInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
        ///            worksheet.Range(&quot;B3:D12&quot;).Value = 5
        ///            worksheet.Range(&quot;B3:D12&quot;).Interior.Color = Color.LightGreen
        ///            &apos;Copy
        ///            worksheet.Range(&quot;B3:D12&quot;).Copy(worksheet.Range!E5)
        ///            &apos;Cut
        ///            worksheet.Range(&quot;B3:D12&quot;).Cut(worksheet.Range(&quot;I5:K14&quot;))
        ///            worksheet.Range(&quot;I1:K2&quot;).Value = 2
        ///            worksheet.Range(&quot;I1:K [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_CutCopyRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.CutCopyRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A1:B2&quot;).Value = {
        ///                {1, 2},
        ///                {&quot;aaa&quot;, &quot;bbb&quot;}
        ///            }
        ///            worksheet.Range(&quot;A2:C3&quot;).Interior.Color = Color.Green
        ///            &apos;style used range is A2:C3.
        ///            Dim UsedRange_style = worksheet.GetUsedRange(UsedRangeType.Style)
        ///            UsedRange_style.Interior.Color = Color.LightBlue
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_GetFeatureRelatedUsedRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.GetFeatureRelatedU" +
                        "sedRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim range = worksheet.Range(&quot;A5:B7&quot;)
        ///            &apos;cell count is 6.
        ///            Dim cellcount = range.Count
        ///            &apos;cell count is 6.
        ///            Dim cellcount1 = range.Cells.Count
        ///            &apos;row count is 3.
        ///            Dim rowcount = range.Rows.Count
        ///            &apos;column count is 2.
        ///            Dim columncount = range.Columns.Count
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_GetRangeRowCountColumnCount {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.GetRangeRowCountCo" +
                        "lumnCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;H6:M7&quot;).Value = 1
        ///            worksheet.Range(&quot;J9:J10&quot;).Merge()
        ///            &apos;set interior color for worksheet usedRange &quot;H6:M10&quot;.
        ///            Dim usedrange = worksheet.UsedRange
        ///            usedrange.Interior.Color = Color.LightBlue
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_GetWorksheetUsedRange {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.GetWorksheetUsedRa" +
                        "nge", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!E1.Value = 1
        ///            &apos;Hidden row 2:6.
        ///            worksheet.Range(&quot;2:6&quot;).Hidden = True
        ///            &apos;Hidden column A:D.
        ///            worksheet.Range(&quot;A:D&quot;).Hidden = True
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_HiddenRowColumn {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.HiddenRowColumn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet1 As IWorksheet = workbook.Worksheets(0)
        ///            Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
        ///            Dim data = New Object(,) {
        ///                {1, 2, 3},
        ///                {4, 5, 6},
        ///                {7, 8, 9}
        ///            }
        ///            worksheet1.Range(&quot;A1:C3&quot;).Value = data
        ///            worksheet2.Range(&quot;A1:C3&quot;).Value = data
        ///            &apos;Insert cells
        ///            worksheet1.Range!A2.Insert() &apos;Auto
        ///            worksheet1.Range!B2.Insert(InsertShiftDirect [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_InsertCellsDeleteCells {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.InsertCellsDeleteC" +
                        "ells", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet1 As IWorksheet = workbook.Worksheets(0)
        ///            Dim worksheet2 As IWorksheet = workbook.Worksheets.Add()
        ///            Dim data = New Object(,) {
        ///                {1, 2, 3},
        ///                {4, 5, 6},
        ///                {7, 8, 9}
        ///            }
        ///            worksheet1.Range(&quot;A1:C3&quot;).Value = data
        ///            worksheet2.Range(&quot;A1:C3&quot;).Value = data
        ///            &apos;Insert rows
        ///            worksheet1.Range(&quot;A2:B2&quot;).EntireRow.Insert()
        ///            worksheet1.Range(&quot;3:5&quot;).Insert()
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_InsertDeleteRowsColumns {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.InsertDeleteRowsCo" +
                        "lumns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;A1:C4 is a single merged cell.
        ///            worksheet.Range(&quot;A1:C4&quot;).Merge()
        ///            &apos;H5:J5 is a single merged cell.
        ///            &apos;H6:J6 is a single merged cell.
        ///            worksheet.Range(&quot;H5:J6&quot;).Merge(True)
        ///            &apos;select A1:H5&apos;s entire merge area A1:J5, entire merge area is a bounding rectangle.
        ///            Dim entireMergeArea = worksheet.Range(&quot;A1:H5&quot;).EntireMergeArea
        ///            entireMergeArea.Select()
        ///   [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_MergeCells {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.MergeCells", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range(&quot;A:F&quot;).ColumnWidth = 15
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_SetRangeValue {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.SetRangeValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;set row height for row 1:2.
        ///            worksheet.Range(&quot;1:2&quot;).RowHeight = 50
        ///            &apos;set column width for column C:D.
        ///            worksheet.Range(&quot;C:D&quot;).ColumnWidth = 20
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_RangeOperations_SetRowHeightColumnWidth {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.RangeOperations.SetRowHeightColumn" +
                        "Width", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 50, 30, 200, 100)
        ///            shape.ThreeD.RotationX = 50
        ///            shape.ThreeD.RotationY = 20
        ///            shape.ThreeD.RotationZ = 30
        ///            shape.ThreeD.Depth = 7
        ///            shape.ThreeD.Z = 20
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ConfigShape3DFormat {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShape3DFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
        ///            shape.Line.DashStyle = LineDashStyle.Dash
        ///            shape.Line.Style = LineStyle.Single
        ///            shape.Line.Weight = 2
        ///            shape.Line.Color.ObjectThemeColor = ThemeColor.Accent6
        ///            shape.Line.Transparency = 0.3
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ConfigShapeLine {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
        ///            shape.Fill.PresetGradient(Drawing.GradientStyle.Vertical, 3, Drawing.PresetGradientType.Silver)
        ///            shape.Fill.RotateWithObject = False
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ConfigShapeWithGradientFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithGradientFill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
        ///            shape.Fill.Patterned(Drawing.PatternType.Percent10)
        ///            shape.Fill.Color.ObjectThemeColor = ThemeColor.Accent2
        ///            shape.Fill.PatternColor.ObjectThemeColor = ThemeColor.Accent6
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ConfigShapeWithPatternFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithPatternFill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 20, 20, 200, 100)
        ///            Dim stream As IO.Stream = GetResourceStream(&quot;logo.png&quot;)
        ///            shape.Fill.UserPicture(stream, ImageType.JPG)
        ///            shape.PictureFormat.ColorType = PictureColorType.Grayscale
        ///            shape.PictureFormat.Brightness = 0.6
        ///            shape.PictureFormat.Contrast = 0.3
        ///            shape.PictureFormat.Crop.P [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ConfigShapeWithPictureFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithPictureFill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
        ///            shape.Fill.Solid()
        ///            shape.Fill.Color.RGB = Color.Red
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ConfigShapeWithSolidFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithSolidFill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
        ///            shape.Fill.PresetTextured(Drawing.PresetTexture.Canvas)
        ///            shape.Fill.TextureAlignment = TextureAlignment.Center
        ///            shape.Fill.TextureOffsetX = 2.5
        ///            shape.Fill.TextureOffsetY = 3.2
        ///            shape.Fill.TextureHorizontalScale = 0.9
        ///            shape.Fill.TextureVerticalScale = 0.2
        ///         [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ConfigShapeWithTextureFill {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConfigShapeWithTextureFill", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim ShapeBegin As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 1, 1, 100, 100)
        ///            Dim EndBegin As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 200, 200, 100, 100)
        ///            Dim ConnectorShape As IShape = worksheet.Shapes.AddConnector(Drawing.ConnectorType.Straight, 1, 1, 101, 101)
        ///            &apos;connect shapes by connector shape.
        ///            ConnectorShape.ConnectorFormat.BeginConnect(S [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ConnectShapesByConnector {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ConnectShapesByConnector", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Parallelogram, 1, 1, 200, 100)
        ///            shape.Width = 500
        ///            shape.Height = 200
        ///            shape.TextFrame.TextRange.Font.Color.RGB = Color.FromArgb(0, 255, 0)
        ///            shape.TextFrame.TextRange.Font.Bold = True
        ///            shape.TextFrame.TextRange.Font.Italic = True
        ///            shape.TextFrame.TextRange.Font.Size = 20
        ///            shape.TextFra [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_SetShapeText {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.SetShapeText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Create a shape in worksheet, shape&apos;s range is Range(&quot;A7:B7&quot;)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 1, 1, 100, 100)
        ///            &apos;Range(&quot;A1:D10&quot;) must contain Range(&quot;A7:B7&quot;), copy a new shape to Range(&quot;C1:F7&quot;)
        ///            worksheet.Range(&quot;A1:D10&quot;).Copy(worksheet.Range!E1)
        ///            &apos;worksheet.Range(&quot;A1:D10&quot;).Copy(worksheet.Range(&quot;E1:I9&quot;))
        ///            &apos;Cross sheet copy, copy a  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ShapeCopy {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ShapeCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Create a shape in worksheet, shape&apos;s range is Range(&quot;A7:B7&quot;)
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 1, 1, 100, 100)
        ///            &apos;Range(&quot;A1:D10&quot;) must contain Range(&quot;A7:B7&quot;), cut a new shape to Range(&quot;C1:F7&quot;)
        ///            worksheet.Range(&quot;A1:D10&quot;).Cut(worksheet.Range!E1)
        ///            &apos;worksheet.Range(&quot;A1:D10&quot;).Cut(worksheet.Range(&quot;E1:I9&quot;))
        ///            &apos;Cross sheet cut, cut a new s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ShapeCut {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ShapeCut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Create shape
        ///            Dim shape As IShape = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 50, 50, 200, 200)
        ///            &apos;Duplicate shape
        ///            Dim newShape As IShape = shape.Duplicate()
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Shape_ShapeDuplicate {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Shape.ShapeDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_AddCustomSlicerStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.AddCustomSlicerStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_AddSlicersForPivotTable {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.AddSlicersForPivotTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_AddSlicersForTable {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.AddSlicersForTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_ApplySlicerStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.ApplySlicerStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_ConfigSlicerLayout {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.ConfigSlicerLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_DoTableFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.DoTableFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_SlicerCopy {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.SlicerCopy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_SlicerCut {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.SlicerCut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_SlicerDuplicate {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.SlicerDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_UseSlicerDoFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.UseSlicerDoFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim sourceData = {
        ///                {&quot;Order ID&quot;, &quot;Product&quot;, &quot;Category&quot;, &quot;Amount&quot;, &quot;Date&quot;, &quot;Country&quot;},
        ///                {1, &quot;Carrots&quot;, &quot;Vegetables&quot;, 4270, #1/6/2018#, &quot;United States&quot;},
        ///                {2, &quot;Broccoli&quot;, &quot;Vegetables&quot;, 8239, #1/7/2018#, &quot;United Kingdom&quot;},
        ///                {3, &quot;Banana&quot;, &quot;Fruit&quot;, 617, #1/8/2018#, &quot;United States&quot;},
        ///                {4, &quot;Banana&quot;, &quot;Fruit&quot;, 8384, #1/10/2018#, &quot;Canada&quot;},
        ///                {5, &quot;Beans&quot;, &quot;Vegetables&quot;, 2626, #1/10/2018#, &quot;Germany&quot;},
        ///          [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Slicer_UseSlicerToClearFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Slicer.UseSlicerToClearFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sorting_CustomSort {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.CustomSort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sorting_SortRangeByFontColor {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.SortRangeByFontColor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sorting_SortRangeByIcon {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.SortRangeByIcon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sorting_SortRangeByInterior {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.SortRangeByInterior", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sorting_SortRangeByValue {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sorting.SortRangeByValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Number&quot;, &quot;Date&quot;, &quot;Customer&quot;, &quot;Description&quot;, &quot;Trend&quot;, &quot;0-30 Days&quot;, &quot;30-60 Days&quot;, &quot;60-90 Days&quot;, &quot;&gt;90 Days&quot;, &quot;Amount&quot;},
        ///                {&quot;1001&quot;, #5/21/2017#, &quot;Customer A&quot;, &quot;Invoice 1001&quot;, Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
        ///                {&quot;1002&quot;, #3/18/2017#, &quot;Customer B&quot;, &quot;Invoice 1002&quot;, Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
        ///                {&quot;1003&quot;, #6/15/2017#, &quot;Customer C&quot;, &quot;Invoice 1003&quot;, Nothing, 827.63, 1009.23, 1869.23 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sparklines_ClearSparklineGroup {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.ClearSparklineGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Number&quot;, &quot;Date&quot;, &quot;Customer&quot;, &quot;Description&quot;, &quot;Trend&quot;, &quot;0-30 Days&quot;, &quot;30-60 Days&quot;, &quot;60-90 Days&quot;, &quot;&gt;90 Days&quot;, &quot;Amount&quot;},
        ///                {&quot;1001&quot;, #5/21/2017#, &quot;Customer A&quot;, &quot;Invoice 1001&quot;, Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
        ///                {&quot;1002&quot;, #3/18/2017#, &quot;Customer B&quot;, &quot;Invoice 1002&quot;, Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
        ///                {&quot;1003&quot;, #6/15/2017#, &quot;Customer C&quot;, &quot;Invoice 1003&quot;, Nothing, 827.63, 1009.23, 1869.23 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sparklines_ClearSparklines {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.ClearSparklines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Number&quot;, &quot;Date&quot;, &quot;Customer&quot;, &quot;Description&quot;, &quot;Trend&quot;, &quot;0-30 Days&quot;, &quot;30-60 Days&quot;, &quot;60-90 Days&quot;, &quot;&gt;90 Days&quot;, &quot;Amount&quot;},
        ///                {&quot;1001&quot;, #5/21/2017#, &quot;Customer A&quot;, &quot;Invoice 1001&quot;, Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
        ///                {&quot;1002&quot;, #3/18/2017#, &quot;Customer B&quot;, &quot;Invoice 1002&quot;, Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
        ///                {&quot;1003&quot;, #6/15/2017#, &quot;Customer C&quot;, &quot;Invoice 1003&quot;, Nothing, 827.63, 1009.23, 1869.23 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sparklines_ConfigSparklineSettings {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.ConfigSparklineSettings" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Number&quot;, &quot;Date&quot;, &quot;Customer&quot;, &quot;Description&quot;, &quot;Trend&quot;, &quot;0-30 Days&quot;, &quot;30-60 Days&quot;, &quot;60-90 Days&quot;, &quot;&gt;90 Days&quot;, &quot;Amount&quot;},
        ///                {&quot;1001&quot;, #5/21/2017#, &quot;Customer A&quot;, &quot;Invoice 1001&quot;, Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
        ///                {&quot;1002&quot;, #3/18/2017#, &quot;Customer B&quot;, &quot;Invoice 1002&quot;, Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
        ///                {&quot;1003&quot;, #6/15/2017#, &quot;Customer C&quot;, &quot;Invoice 1003&quot;, Nothing, 827.63, 1009.23, 1869.23 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sparklines_CreateSparklines {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.CreateSparklines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Number&quot;, &quot;Date&quot;, &quot;Customer&quot;, &quot;Description&quot;, &quot;Trend&quot;, &quot;0-30 Days&quot;, &quot;30-60 Days&quot;, &quot;60-90 Days&quot;, &quot;&gt;90 Days&quot;, &quot;Amount&quot;},
        ///                {&quot;1001&quot;, #5/21/2017#, &quot;Customer A&quot;, &quot;Invoice 1001&quot;, Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
        ///                {&quot;1002&quot;, #3/18/2017#, &quot;Customer B&quot;, &quot;Invoice 1002&quot;, Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
        ///                {&quot;1003&quot;, #6/15/2017#, &quot;Customer C&quot;, &quot;Invoice 1003&quot;, Nothing, 827.63, 1009.23, 1869.23 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sparklines_GroupExistSparklines {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.GroupExistSparklines", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Number&quot;, &quot;Date&quot;, &quot;Customer&quot;, &quot;Description&quot;, &quot;Trend&quot;, &quot;0-30 Days&quot;, &quot;30-60 Days&quot;, &quot;60-90 Days&quot;, &quot;&gt;90 Days&quot;, &quot;Amount&quot;},
        ///                {&quot;1001&quot;, #5/21/2017#, &quot;Customer A&quot;, &quot;Invoice 1001&quot;, Nothing, 1200.15, 1916.18, 1105.23, 1806.53, Nothing},
        ///                {&quot;1002&quot;, #3/18/2017#, &quot;Customer B&quot;, &quot;Invoice 1002&quot;, Nothing, 896.23, 1005.53, 1800.56, 1150.49, Nothing},
        ///                {&quot;1003&quot;, #6/15/2017#, &quot;Customer C&quot;, &quot;Invoice 1003&quot;, Nothing, 827.63, 1009.23, 1869.23 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Sparklines_UseDateAxis {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Sparklines.UseDateAxis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Tables_AccessTableRanges {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Tables.AccessTableRanges", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Add one custom table style.
        ///            Dim style As ITableStyle = workbook.TableStyles.Add(&quot;test&quot;)
        ///            &apos;Set WholeTable element style.
        ///            style.TableStyleElements(TableStyleElementType.WholeTable).Font.Italic = True
        ///            style.TableStyleElements(TableStyleElementType.WholeTable).Font.Color = Color.White
        ///            style.TableStyleElements(TableStyleElementType.WholeTable).Font.Strikethrough = True
        ///            style.TableStyleElements(TableStyleElementType.WholeT [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Tables_AddCustomTableStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Tables.AddCustomTableStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;add table.
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            Dim table As ITable = worksheet.Tables.Add(worksheet.Range(&quot;A1:F7&quot;), True)
        ///            worksheet.Range(&quot;A:F&quot;).ColumnWidth = 15
        ///            &apos;Add one custom table style.
        ///            Dim style As ITableStyle = workbook.TableStyles.Add(&quot;test&quot;)
        ///            &apos;set custom table style for table.
        ///            table.TableStyle = style
        ///            &apos;Use table style name get one build in table style.
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Tables_ApplyTableStyle {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Tables.ApplyTableStyle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Tables_CreateTable {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Tables.CreateTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Tables_InsertDeleteTableRowColumns {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Tables.InsertDeleteTableRowColumns" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Tables_PerformCalculationsInTable {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Tables.PerformCalculationsInTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                    {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                    {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                    {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                    {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                    {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                    {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                    {&quot;Ange [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Tables_RemoveTable {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Tables.RemoveTable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Tables_TableFilter {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Tables.TableFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Eye color&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Richard&quot;, &quot;New York&quot;, #6/8/1968#, &quot;Blue&quot;, 67, 165},
        ///                {&quot;Nia&quot;, &quot;New York&quot;, #7/3/1972#, &quot;Brown&quot;, 62, 134},
        ///                {&quot;Jared&quot;, &quot;New York&quot;, #3/2/1964#, &quot;Hazel&quot;, 72, 180},
        ///                {&quot;Natalie&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;Blue&quot;, 66, 163},
        ///                {&quot;Damon&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;Hazel&quot;, 76, 176},
        ///                {&quot;Angela&quot;, &quot;Washington&quot;, #2/15/199 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Tables_TableSort {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Tables.TableSort", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Base theme is office theme when not give parameter.
        ///            Dim theme As ITheme = New Excel.Theme(&quot;testTheme&quot;)
        ///            &apos;ITheme theme = new Theme(&quot;testTheme&quot;, Themes.Badge)
        ///            &apos;Customize theme&apos;s color.
        ///            theme.ThemeColorScheme(ThemeColor.Light1).RGB = Color.AntiqueWhite
        ///            theme.ThemeColorScheme(ThemeColor.Dark1).RGB = Color.Aqua
        ///            theme.ThemeColorScheme(ThemeColor.Light2).RGB = Color.Beige
        ///            theme.ThemeColorScheme(ThemeColor.Dark1 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Theme_AddCustomThemes {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Theme.AddCustomThemes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Change workbook&apos;s theme to builtin theme.
        ///            workbook.Theme = Themes.Berlin
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            worksheet.Range!B2.Value = &quot;Major Font:&quot;
        ///            worksheet.Range!B3.Value = &quot;Minor Font:&quot;
        ///            worksheet.Range!C2.Value = &quot;Trebuchet MS&quot;
        ///            worksheet.Range!C3.Value = &quot;Trebuchet MS&quot;
        ///            worksheet.Range!C2.Font.ThemeFont = ThemeFont.Major
        ///            worksheet.Range!C3.Font.ThemeFont = ThemeFont.Min [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Theme_ChangeWorkbookTheme {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Theme.ChangeWorkbookTheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Workbook view settings.
        ///            Dim bookView As IWorkbookView = workbook.BookView
        ///            bookView.DisplayVerticalScrollBar = False
        ///            bookView.DisplayWorkbookTabs = True
        ///            bookView.TabRatio = 0.5
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_ConfigureWorkbookView {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ConfigureWorkbookView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Create empty workbook, contains one worksheet default.
        ///            Dim workbookNew As New Excel.Workbook
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_CreateNewWorkbook {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.CreateNewWorkbook", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim stream As Stream = GetTemplateStream()
        ///            &apos;Open csv file stream.
        ///            workbook.Open(stream, OpenFileFormat.Csv)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_ImportCsvFileToWorkbook {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportCsvFileToWorkbook", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Open csv with more settings.
        ///            Dim options As New CsvOpenOptions
        ///            options.SeparatorString = &quot;-&quot;
        ///            &apos;Change the path to the real file path when open.
        ///            workbook.Open(CurrentDirectory &amp; &quot;source.csv&quot;, options)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_ImportCsvFileToWorkbookWithOptions {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportCsvFileToWorkbookWi" +
                        "thOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Use XlsxOpenOptions.ImportFlags to control what you want to import from excel, ImportFlags.Data means only the data will be imported
        ///            &apos;Change the path to the real file path when open.
        ///            Dim options As New XlsxOpenOptions
        ///            options.ImportFlags = ImportFlags.Data
        ///            workbook.Open(CurrentDirectory &amp; &quot;source.xlsx&quot;, options)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_ImportExcelFileDataOnly {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportExcelFileDataOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Change the path to the real file path when open.
        ///            workbook.Open(CurrentDirectory &amp; &quot;source.xlsx&quot;, OpenFileFormat.Xlsx)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_ImportExcelFileToWorkbook {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportExcelFileToWorkbook" +
                        "", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;When XlsxOpenOptions.DoNotRecalculateAfterOpened means GrapeCity Documents for Excel will just read all the cached values without calculating again after
        ///            &apos;opening an Excel file.
        ///            &apos;Change the path to the real file path when open.
        ///            Dim options As New XlsxOpenOptions
        ///            options.DoNotRecalculateAfterOpened = True
        ///            workbook.Open(CurrentDirectory &amp; &quot;source.xlsx&quot;, options)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_ImportExcelFileWithoutCalculation {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportExcelFileWithoutCal" +
                        "culation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Change the path to the real file path when open.
        ///            Dim options As New XlsxOpenOptions
        ///            options.Password = &quot;123456&quot;
        ///            workbook.Open(CurrentDirectory &amp; &quot;source.xlsx&quot;, options)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_ImportExcelFileWithPassword {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ImportExcelFileWithPasswo" +
                        "rd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Sex&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Bob&quot;, &quot;NewYork&quot;, #6/8/1968#, &quot;male&quot;, 80, 180},
        ///                {&quot;Betty&quot;, &quot;NewYork&quot;, #7/3/1972#, &quot;female&quot;, 72, 168},
        ///                {&quot;Gary&quot;, &quot;NewYork&quot;, #3/2/1964#, &quot;male&quot;, 71, 179},
        ///                {&quot;Hunk&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;male&quot;, 80, 171},
        ///                {&quot;Cherry&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;female&quot;, 58, 161},
        ///                {&quot;Eva&quot;, &quot;Washington&quot;, #2/5/1993#, &quot;female&quot;, 71, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_SaveWorkbookToCsvFile {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.SaveWorkbookToCsvFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Sex&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Bob&quot;, &quot;NewYork&quot;, #6/8/1968#, &quot;male&quot;, 80, 180},
        ///                {&quot;Betty&quot;, &quot;NewYork&quot;, #7/3/1972#, &quot;female&quot;, 72, 168},
        ///                {&quot;Gary&quot;, &quot;NewYork&quot;, #3/2/1964#, &quot;male&quot;, 71, 179},
        ///                {&quot;Hunk&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;male&quot;, 80, 171},
        ///                {&quot;Cherry&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;female&quot;, 58, 161},
        ///                {&quot;Eva&quot;, &quot;Washington&quot;, #2/5/1993#, &quot;female&quot;, 71, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_SaveWorkbookToCsvFileWithOptions {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.SaveWorkbookToCsvFileWith" +
                        "Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;change the path to real export path when save.
        ///            workbook.Save(CurrentDirectory &amp; &quot;dest.xlsx&quot;, SaveFileFormat.Xlsx)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_SaveWorkbookToExcelFile {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.SaveWorkbookToExcelFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Change the path to real export path when save.
        ///            Dim options As New XlsxSaveOptions
        ///            options.Password = &quot;123456&quot;
        ///            workbook.Save(CurrentDirectory &amp; &quot;dest.xlsx&quot;, options)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_SaveWorkbookWithPassword {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.SaveWorkbookWithPassword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;ToJson&amp;FromJson can be used in combination with spread.sheets product:http://spread.grapecity.com/spreadjs/sheets/
        ///            &apos;GrapeCity Documents for Excel import an excel file.
        ///            &apos;change the path to real source file path.
        ///            Dim source As String = CurrentDirectory &amp; &quot;source.xlsx&quot;
        ///            workbook.Open(source)
        ///            &apos;GrapeCity Documents for Excel export to a json string.
        ///            Dim jsonstr = workbook.ToJson()
        ///            &apos;use the json string to initi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Workbook_ToJsonFromJson {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Workbook.ToJsonFromJson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Use sheet index to get worksheet.
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Use sheet name to get worksheet.
        ///            Dim worksheet1 As IWorksheet = workbook.Worksheets(&quot;Sheet1&quot;)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_AccessWorksheet {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.AccessWorksheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets.Add()
        ///            &apos;Activate new created worksheet.
        ///            worksheet.Activate()
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_ActivateWorksheet {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.ActivateWorksheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos; Add a new worksheet to the workbook. The worksheet will be inserted into the end of the existing worksheet collection.
        ///            workbook.Worksheets.Add()
        ///            &apos;Add a new worksheet to the specified position in the collection of worksheets.
        ///            workbook.Worksheets.AddBefore(workbook.Worksheets(0))
        ///            workbook.Worksheets.AddAfter(workbook.Worksheets(1))
        ///            &apos;Set worksheet&apos;s name.
        ///            workbook.Worksheets(2).Name = &quot;Product Plan&quot;
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_AddWorksheet {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.AddWorksheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Worksheet view settings.
        ///            Dim sheetView As IWorksheetView = worksheet.SheetView
        ///            sheetView.DisplayFormulas = False
        ///            sheetView.DisplayRightToLeft = True
        ///            sheetView.GridlineColor = Color.Red
        ///            sheetView.Zoom = 200
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_ConfigureWorksheetView {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.ConfigureWorksheetView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;Set worksheet tab color.
        ///            worksheet.TabColor = Color.Green
        ///            &apos;Set worksheet default row height.
        ///            worksheet.StandardHeight = 20
        ///            &apos;Set worksheet default column width.
        ///            worksheet.StandardWidth = 50
        ///            &apos;Split worksheet to panes.
        ///            worksheet.SplitPanes(worksheet.Range!B3.Row, worksheet.Range!B3.Column)
        ///            Dim worksheet1 As IWorksheet = workbook [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_ConfigWorksheet {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.ConfigWorksheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets.Add()
        ///            &apos;workbook must contain one visible worksheet at least, if delete the one visible worksheet, it will throw exception.
        ///            worksheet.Delete()
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_DeleteWorksheet {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.DeleteWorksheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;protect worksheet, allow insert column.
        ///            worksheet.Protection = True
        ///            worksheet.ProtectionSettings.AllowInsertingColumns = True
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_ProtectWorksheet {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.ProtectWorksheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Sex&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Bob&quot;, &quot;NewYork&quot;, #6/8/1968#, &quot;male&quot;, 80, 180},
        ///                {&quot;Betty&quot;, &quot;NewYork&quot;, #7/3/1972#, &quot;female&quot;, 72, 168},
        ///                {&quot;Gary&quot;, &quot;NewYork&quot;, #3/2/1964#, &quot;male&quot;, 71, 179},
        ///                {&quot;Hunk&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;male&quot;, 80, 171},
        ///                {&quot;Cherry&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;female&quot;, 58, 161},
        ///                {&quot;Eva&quot;, &quot;Washington&quot;, #2/5/1993#, &quot;female&quot;, 71, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_SaveWorksheetToCsvFile {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.SaveWorksheetToCsvFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim data = {
        ///                {&quot;Name&quot;, &quot;City&quot;, &quot;Birthday&quot;, &quot;Sex&quot;, &quot;Weight&quot;, &quot;Height&quot;},
        ///                {&quot;Bob&quot;, &quot;NewYork&quot;, #6/8/1968#, &quot;male&quot;, 80, 180},
        ///                {&quot;Betty&quot;, &quot;NewYork&quot;, #7/3/1972#, &quot;female&quot;, 72, 168},
        ///                {&quot;Gary&quot;, &quot;NewYork&quot;, #3/2/1964#, &quot;male&quot;, 71, 179},
        ///                {&quot;Hunk&quot;, &quot;Washington&quot;, #8/8/1972#, &quot;male&quot;, 80, 171},
        ///                {&quot;Cherry&quot;, &quot;Washington&quot;, #2/2/1986#, &quot;female&quot;, 58, 161},
        ///                {&quot;Eva&quot;, &quot;Washington&quot;, #2/5/1993#, &quot;female&quot;, 71, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_SaveWorksheetToCsvFileWithOptions {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.SaveWorksheetToCsvFileW" +
                        "ithOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///            &apos;protect worksheet, allow insert column.
        ///            worksheet.Protection = True
        ///            worksheet.ProtectionSettings.AllowInsertingColumns = True
        ///            &apos;Unprotect worksheet.
        ///            worksheet.Protection = False
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Features_Worksheets_UnprotectWorksheet {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Features.Worksheets.UnprotectWorksheet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_SpreadSheetsViewer_AgingReport {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.AgingReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_SpreadSheetsViewer_AnnualFinancialReport {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.AnnualFinancialReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_SpreadSheetsViewer_FamilyBudget {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.FamilyBudget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_SpreadSheetsViewer_HomeInventory {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.HomeInventory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_SpreadSheetsViewer_ProjectCostTracker {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.ProjectCostTracker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_SpreadSheetsViewer_SimplePersonalBudget {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.SimplePersonalBudget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_SpreadSheetsViewer_StudentCalendar {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.StudentCalendar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///            &apos;Load template file
        ///            Dim fileStream = GetTemplateStream()
        ///            workbook.Open(fileStream)
        ///        .
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_SpreadSheetsViewer_TravelExpenseReport {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.SpreadSheetsViewer.TravelExpenseReport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///        Dim worksheet As IWorksheet = workbook.Worksheets(0)
        ///        &apos;-----------------------------Set Value------------------------------
        ///        worksheet.Range(&quot;B3:C7&quot;).Value = {
        ///            {&quot;ITEM&quot;, &quot;AMOUNT&quot;},
        ///            {&quot;Income 1&quot;, 2500},
        ///            {&quot;Income 2&quot;, 1000},
        ///            {&quot;Income 3&quot;, 250},
        ///            {&quot;Other&quot;, 250}
        ///        }
        ///        worksheet.Range(&quot;B10:C23&quot;).Value = {
        ///            {&quot;ITEM&quot;, &quot;AMOUNT&quot;},
        ///            {&quot;Rent/mortgage&quot;, 800},
        ///            {&quot;Electric&quot;, 120},
        ///        [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GrapeCity_Documents_Excel_Examples_VB_Tutorial {
            get {
                return ResourceManager.GetString("GrapeCity.Documents.Excel.Examples.VB.Tutorial", resourceCulture);
            }
        }
    }
}
