<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelReporting.BasicSalesReport" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            #region theme
            //create a custom theme.
            Themes themes = new Themes();
            ITheme theme = themes.Add("testTheme");
            theme.ThemeColorScheme[ThemeColor.Light1].RGB = Color.FromArgb(255, 255, 255);
            theme.ThemeColorScheme[ThemeColor.Dark1].RGB = Color.FromArgb(0, 0, 0);
            theme.ThemeColorScheme[ThemeColor.Light2].RGB = Color.FromArgb(255, 255, 255);
            theme.ThemeColorScheme[ThemeColor.Dark2].RGB = Color.FromArgb(0, 0, 0);
            theme.ThemeColorScheme[ThemeColor.Accent1].RGB = Color.FromArgb(140, 198, 63);
            theme.ThemeColorScheme[ThemeColor.Accent2].RGB = Color.FromArgb(242, 116, 45);
            theme.ThemeColorScheme[ThemeColor.Accent3].RGB = Color.FromArgb(106, 159, 207);
            theme.ThemeColorScheme[ThemeColor.Accent4].RGB = Color.FromArgb(242, 192, 45);
            theme.ThemeColorScheme[ThemeColor.Accent5].RGB = Color.FromArgb(146, 98, 174);
            theme.ThemeColorScheme[ThemeColor.Accent6].RGB = Color.FromArgb(121, 198, 199);
            theme.ThemeColorScheme[ThemeColor.Hyperlink].RGB = Color.FromArgb(106, 159, 207);
            theme.ThemeColorScheme[ThemeColor.FollowedHyperlink].RGB = Color.FromArgb(146, 98, 74);
            theme.ThemeFontScheme.Major[FontLanguageIndex.Latin].Name = "Garamond";
            theme.ThemeFontScheme.Minor[FontLanguageIndex.Latin].Name = "Garamond";

            //assign the custom theme for workbook.
            workbook.Theme = theme;
            #endregion

            #region NameStyle
            //Change built-in custom styles.
            var style_Title = workbook.Styles["Title"];
            style_Title.Font.ThemeFont = ThemeFont.Major;
            style_Title.Font.Size = 26;
            style_Title.Font.Bold = true;
            style_Title.Font.ThemeColor = ThemeColor.Light1;
            style_Title.IncludeAlignment = false;
            style_Title.IncludeFont = true;
            style_Title.IncludeBorder = false;
            style_Title.IncludeNumber = false;
            style_Title.IncludePatterns = false;
            style_Title.IncludeProtection = false;

            var style_Normal = workbook.Styles["Normal"];
            style_Normal.HorizontalAlignment = HorizontalAlignment.General;
            style_Normal.VerticalAlignment = VerticalAlignment.Center;
            style_Normal.Font.ThemeFont = ThemeFont.Minor;
            style_Normal.Font.Size = 9;
            style_Normal.Font.ThemeColor = ThemeColor.Dark1;
            style_Normal.IncludeAlignment = true;
            style_Normal.IncludeFont = true;
            style_Normal.IncludeBorder = true;
            style_Normal.IncludeNumber = true;
            style_Normal.IncludePatterns = true;
            style_Normal.IncludeProtection = true;
            #endregion

            #region Worksheet_DataInput
            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Name = "Data Input";
            //hide worksheet gridlines.
            worksheet.SheetView.DisplayGridlines = false;

            #region RowHeightColumnWidth
            worksheet.StandardHeight = 18.75;
            worksheet.StandardWidth = 8.43;

            worksheet.Range["1:1"].RowHeight = 51.75;
            worksheet.Range["2:2"].RowHeight = 20.25;
            worksheet.Range["3:87"].RowHeight = 19;

            worksheet.Range["A:A"].ColumnWidth = 2.28515625;
            worksheet.Range["B:B"].ColumnWidth = 16.85546875;
            worksheet.Range["C:C"].ColumnWidth = 20.5703125;
            worksheet.Range["D:D"].ColumnWidth = 27.7109375;
            worksheet.Range["E:E"].ColumnWidth = 17.7109375;
            worksheet.Range["F:F"].ColumnWidth = 18.140625;
            worksheet.Range["G:G"].ColumnWidth = 2.28515625;
            #endregion

            #region Values
            worksheet.Range["B1"].Value = "DATA INPUT";
            #endregion

            #region Table
            worksheet.Range["B2:F87"].Value = new object[,] {
                    { "DATE", "PRODUCT", "CUSTOMER", "AMOUNT", "QUARTER" },
                    { new DateTime(2012, 1, 1), "Product 14", "Fabrikam, Inc.", 1886, "QUARTER 1" },
                    { new DateTime(2012, 1, 3), "Product 23", "Alpine Ski House", 4022, "QUARTER 1" },
                    { new DateTime(2012, 1, 4), "Product 18", "Coho Winery", 8144, "QUARTER 1" },
                    { new DateTime(2012, 1, 7), "Product 10", "Southridge Video", 8002, "QUARTER 1" },
                    { new DateTime(2012, 1, 11), "Product 7", "Coho Winery", 6392, "QUARTER 1" },
                    { new DateTime(2012, 1, 25), "Product 1", "Contoso, Ltd", 6444, "QUARTER 1" },
                    { new DateTime(2012, 1, 30), "Product 27", "Southridge Video", 2772, "QUARTER 1" },
                    { new DateTime(2012, 2, 4), "Product 30", "City Power &amp; Light", 8674, "QUARTER 1" },
                    { new DateTime(2012, 2, 5), "Product 16", "A. Datum Corporation", 2332, "QUARTER 1" },
                    { new DateTime(2012, 2, 8), "Product 21", "Alpine Ski House", 5370, "QUARTER 1" },
                    { new DateTime(2012, 2, 10), "Product 6", "City Power &amp; Light", 1768, "QUARTER 1" },
                    { new DateTime(2012, 2, 17), "Product 24", "Coho Winery", 5474, "QUARTER 1" },
                    { new DateTime(2012, 2, 22), "Product 28", "Fabrikam, Inc.", 3494, "QUARTER 1" },
                    { new DateTime(2012, 2, 24), "Product 22", "City Power &amp; Light", 1484, "QUARTER 1" },
                    { new DateTime(2012, 2, 29), "Product 26", "Humongous Insurance", 5454, "QUARTER 1" },
                    { new DateTime(2012, 3, 1), "Product 15", "City Power &amp; Light", 2306, "QUARTER 1" },
                    { new DateTime(2012, 3, 8), "Product 9", "A. Datum Corporation", 8652, "QUARTER 1" },
                    { new DateTime(2012, 3, 14), "Product 16", "Alpine Ski House", 3594, "QUARTER 1" },
                    { new DateTime(2012, 3, 31), "Product 28", "City Power &amp; Light", 9130, "QUARTER 1" },
                    { new DateTime(2012, 4, 3), "Product 28", "Southridge Video", 9986, "QUARTER 2" },
                    { new DateTime(2012, 4, 9), "Product 2", "Fabrikam, Inc.", 8270, "QUARTER 2" },
                    { new DateTime(2012, 4, 10), "Product 30", "A. Datum Corporation", 5184, "QUARTER 2" },
                    { new DateTime(2012, 4, 11), "Product 25", "Contoso, Ltd", 9426, "QUARTER 2" },
                    { new DateTime(2012, 4, 11), "Product 15", "Humongous Insurance", 4012, "QUARTER 2" },
                    { new DateTime(2012, 4, 15), "Product 28", "Coho Winery", 7724, "QUARTER 2" },
                    { new DateTime(2012, 5, 3), "Product 21", "Northwind Traders", 2264, "QUARTER 2" },
                    { new DateTime(2012, 5, 4), "Product 30", "Coho Winery", 9374, "QUARTER 2" },
                    { new DateTime(2012, 5, 5), "Product 17", "Humongous Insurance", 3692, "QUARTER 2" },
                    { new DateTime(2012, 5, 5), "Product 28", "Humongous Insurance", 9124, "QUARTER 2" },
                    { new DateTime(2012, 5, 19), "Product 22", "Humongous Insurance", 4962, "QUARTER 2" },
                    { new DateTime(2012, 5, 22), "Product 8", "A. Datum Corporation", 9166, "QUARTER 2" },
                    { new DateTime(2012, 5, 31), "Product 16", "Coho Winery", 5610, "QUARTER 2" },
                    { new DateTime(2012, 6, 2), "Product 8", "City Power &amp; Light", 3322, "QUARTER 2" },
                    { new DateTime(2012, 6, 2), "Product 3", "Humongous Insurance", 2592, "QUARTER 2" },
                    { new DateTime(2012, 6, 4), "Product 13", "Contoso, Ltd", 4444, "QUARTER 2" },
                    { new DateTime(2012, 6, 9), "Product 10", "Southridge Video", 7166, "QUARTER 2" },
                    { new DateTime(2012, 6, 12), "Product 13", "Fabrikam, Inc.", 5008, "QUARTER 3" },
                    { new DateTime(2012, 6, 26), "Product 2", "Contoso, Ltd", 3578, "QUARTER 3" },
                    { new DateTime(2012, 6, 29), "Product 22", "Southridge Video", 1144, "QUARTER 3" },
                    { new DateTime(2012, 7, 2), "Product 14", "Alpine Ski House", 3696, "QUARTER 3" },
                    { new DateTime(2012, 7, 6), "Product 14", "Coho Winery", 7084, "QUARTER 3" },
                    { new DateTime(2012, 7, 6), "Product 2", "City Power &amp; Light", 4642, "QUARTER 3" },
                    { new DateTime(2012, 7, 8), "Product 5", "Fabrikam, Inc.", 6078, "QUARTER 3" },
                    { new DateTime(2012, 7, 10), "Product 9", "Alpine Ski House", 2394, "QUARTER 3" },
                    { new DateTime(2012, 7, 15), "Product 13", "Southridge Video", 5516, "QUARTER 3" },
                    { new DateTime(2012, 7, 16), "Product 8", "Fabrikam, Inc.", 1948, "QUARTER 3" },
                    { new DateTime(2012, 7, 19), "Product 28", "Contoso, Ltd", 7280, "QUARTER 3" },
                    { new DateTime(2012, 7, 29), "Product 26", "A. Datum Corporation", 9292, "QUARTER 3" },
                    { new DateTime(2012, 8, 19), "Product 26", "Fabrikam, Inc.", 5868, "QUARTER 3" },
                    { new DateTime(2012, 8, 19), "Product 6", "Northwind Traders", 4098, "QUARTER 3" },
                    { new DateTime(2012, 8, 20), "Product 13", "A. Datum Corporation", 1270, "QUARTER 3" },
                    { new DateTime(2012, 8, 20), "Product 23", "A. Datum Corporation", 7744, "QUARTER 3" },
                    { new DateTime(2012, 8, 24), "Product 2", "Humongous Insurance", 5488, "QUARTER 3" },
                    { new DateTime(2012, 8, 24), "Product 5", "Southridge Video", 6944, "QUARTER 3" },
                    { new DateTime(2012, 8, 25), "Product 20", "Fabrikam, Inc.", 4454, "QUARTER 3" },
                    { new DateTime(2012, 8, 27), "Product 13", "City Power &amp; Light", 7100, "QUARTER 3" },
                    { new DateTime(2012, 8, 30), "Product 8", "Humongous Insurance", 4346, "QUARTER 3" },
                    { new DateTime(2012, 9, 1), "Product 25", "Alpine Ski House", 2032, "QUARTER 3" },
                    { new DateTime(2012, 9, 17), "Product 20", "Contoso, Ltd", 2328, "QUARTER 3" },
                    { new DateTime(2012, 9, 22), "Product 18", "Humongous Insurance", 6090, "QUARTER 3" },
                    { new DateTime(2012, 9, 25), "Product 19", "Coho Winery", 8344, "QUARTER 3" },
                    { new DateTime(2012, 9, 29), "Product 11", "Alpine Ski House", 5872, "QUARTER 3" },
                    { new DateTime(2012, 9, 30), "Product 25", "Humongous Insurance", 1578, "QUARTER 3" },
                    { new DateTime(2012, 10, 2), "Product 29", "City Power &amp; Light", 1714, "QUARTER 4" },
                    { new DateTime(2012, 10, 5), "Product 11", "Fabrikam, Inc.", 5716, "QUARTER 4" },
                    { new DateTime(2012, 10, 6), "Product 21", "Coho Winery", 8244, "QUARTER 4" },
                    { new DateTime(2012, 10, 14), "Product 11", "A. Datum Corporation", 8888, "QUARTER 4" },
                    { new DateTime(2012, 10, 14), "Product 23", "City Power &amp; Light", 9438, "QUARTER 4" },
                    { new DateTime(2012, 11, 9), "Product 14", "Southridge Video", 6230, "QUARTER 4" },
                    { new DateTime(2012, 11, 13), "Product 17", "A. Datum Corporation", 4278, "QUARTER 4" },
                    { new DateTime(2012, 11, 17), "Product 6", "Alpine Ski House", 5438, "QUARTER 4" },
                    { new DateTime(2012, 11, 22), "Product 1", "Coho Winery", 6728, "QUARTER 4" },
                    { new DateTime(2012, 11, 25), "Product 30", "Fabrikam, Inc.", 9992, "QUARTER 4" },
                    { new DateTime(2012, 11, 25), "Product 26", "Northwind Traders", 8462, "QUARTER 4" },
                    { new DateTime(2012, 11, 27), "Product 11", "Contoso, Ltd", 7930, "QUARTER 4" },
                    { new DateTime(2012, 11, 30), "Product 30", "Northwind Traders", 8136, "QUARTER 4" },
                    { new DateTime(2012, 12, 2), "Product 13", "Humongous Insurance", 6212, "QUARTER 4" },
                    { new DateTime(2012, 12, 5), "Product 3", "Contoso, Ltd", 4946, "QUARTER 4" },
                    { new DateTime(2012, 12, 5), "Product 3", "Southridge Video", 8554, "QUARTER 4" },
                    { new DateTime(2012, 12, 10), "Product 24", "Northwind Traders", 4508, "QUARTER 4" },
                    { new DateTime(2012, 12, 21), "Product 7", "Humongous Insurance", 7300, "QUARTER 4" },
                    { new DateTime(2012, 12, 24), "Product 17", "Fabrikam, Inc.", 8292, "QUARTER 4" },
                    { new DateTime(2012, 12, 26), "Product 26", "Alpine Ski House", 9782, "QUARTER 4" },
                    { new DateTime(2013, 1, 3), "Product 19", "Fabrikam, Inc.", 8024, "QUARTER 1" },
                    { new DateTime(2013, 1, 4), "Product 22", "A. Datum Corporation", 3758, "QUARTER 1" },
                };

            ITable table_Data = worksheet.Tables.Add(worksheet.Range["B2:F87"], true);

            //set built-in table style for table.
            table_Data.TableStyle = workbook.TableStyles["TableStyleMedium2"];

            //customize table header range's style.
            table_Data.HeaderRange.HorizontalAlignment = HorizontalAlignment.Left;
            table_Data.HeaderRange.IndentLevel = 1;
            table_Data.HeaderRange.VerticalAlignment = VerticalAlignment.Center;
            table_Data.HeaderRange.Font.Size = 11;

            //customize table each column's data body range's style.
            table_Data.Columns[0].DataBodyRange.HorizontalAlignment = HorizontalAlignment.Left;
            table_Data.Columns[0].DataBodyRange.IndentLevel = 1;
            table_Data.Columns[0].DataBodyRange.VerticalAlignment = VerticalAlignment.Center;
            table_Data.Columns[1].DataBodyRange.HorizontalAlignment = HorizontalAlignment.Left;
            table_Data.Columns[1].DataBodyRange.IndentLevel = 1;
            table_Data.Columns[1].DataBodyRange.VerticalAlignment = VerticalAlignment.Center;
            table_Data.Columns[2].DataBodyRange.HorizontalAlignment = HorizontalAlignment.Left;
            table_Data.Columns[2].DataBodyRange.IndentLevel = 1;
            table_Data.Columns[2].DataBodyRange.VerticalAlignment = VerticalAlignment.Center;
            table_Data.Columns[3].DataBodyRange.HorizontalAlignment = HorizontalAlignment.Right;
            table_Data.Columns[3].DataBodyRange.IndentLevel = 1;
            table_Data.Columns[3].DataBodyRange.VerticalAlignment = VerticalAlignment.Bottom;
            table_Data.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";
            table_Data.Columns[4].DataBodyRange.HorizontalAlignment = HorizontalAlignment.Left;
            table_Data.Columns[4].DataBodyRange.IndentLevel = 1;
            table_Data.Columns[4].DataBodyRange.VerticalAlignment = VerticalAlignment.Bottom;
            #endregion

            #region Slicers
            //create slicer caches.
            ISlicerCache cache_customer = workbook.SlicerCaches.Add(table_Data, "CUSTOMER", "CUSTOMER");
            ISlicerCache cache_product = workbook.SlicerCaches.Add(table_Data, "PRODUCT", "PRODUCT");

            //create slicers.
            ISlicer slicer_customer = cache_customer.Slicers.Add(worksheet, "CUSTOMER", "CUSTOMER", 51.914015748031495, 551, 144, 190);
            ISlicer slicer_product = cache_product.Slicers.Add(worksheet, "PRODUCT", "PRODUCT", 51.914015748031495, 691, 144, 190);

            //assign built-in slicer style for slicers.
            slicer_customer.Style = workbook.TableStyles["SlicerStyleDark1"];
            slicer_product.Style = workbook.TableStyles["SlicerStyleDark1"];
            #endregion

            #region Style
            worksheet.Range["1:1"].Style = workbook.Styles["Title"];
            worksheet.Range["1:1"].Interior.ThemeColor = ThemeColor.Accent1;
            worksheet.Range["1:1"].HorizontalAlignment = HorizontalAlignment.Left;
            worksheet.Range["1:1"].IndentLevel = 1;
            worksheet.Range["1:1"].VerticalAlignment = VerticalAlignment.Center;
            worksheet.Range["A1"].Style = workbook.Styles["Normal"];
        
            #endregion

            #endregion

            #region Worksheet_CustomizableReport
            IWorksheet worksheet2 = workbook.Worksheets.Add();
            worksheet2.Name = "Customizable Report";
            worksheet2.SheetView.DisplayGridlines = false;

            #region RowHeightColumnWidth
            worksheet2.StandardHeight = 16.5;
            worksheet2.StandardWidth = 8.43;
            worksheet2.Range["1:1"].RowHeight = 51.75;
            worksheet2.Range["2:116"].RowHeight = 14.25;
            worksheet2.Range["A:A"].ColumnWidth = 2.28515625;
            worksheet2.Range["B:B"].ColumnWidth = 23.140625;
            worksheet2.Range["C:C"].ColumnWidth = 15.5703125;
            worksheet2.Range["D:F"].ColumnWidth = 11.42578125;
            worksheet2.Range["G:H"].ColumnWidth = 13.42578125;
            #endregion

            #region Values
            worksheet2.Range["B1"].Value = "SALES REPORT";
            #endregion

            #region PivotTable
            //create pivot cache.
            var pivotcache = workbook.PivotCaches.Create(worksheet.Range["B2:F87"]);
            //create pivot table.
            var pivottable = worksheet2.PivotTables.Add(pivotcache, worksheet2.Range["B2"], "ReportPivot");
            //assign built-in table style for pivot table.
            pivottable.TableStyle = "PivotStyleMedium2";

            //config pivot table's fields.
            var field_product = pivottable.PivotFields["PRODUCT"];
            field_product.Orientation = PivotFieldOrientation.RowField;

            var field_customer = pivottable.PivotFields["CUSTOMER"];
            field_customer.Orientation = PivotFieldOrientation.RowField;

            var field_amount = pivottable.PivotFields["AMOUNT"];
            field_amount.Orientation = PivotFieldOrientation.DataField;

            var field_quarter = pivottable.PivotFields["QUARTER"];
            field_quarter.Orientation = PivotFieldOrientation.ColumnField;

            //just a workaround, we dost not provide api to set number format
            //for pivot field. so use follow way.
            pivottable.DataBodyRange.NumberFormat = "$#,##0.00_);($#,##0.00)";
            #endregion

            #region Style
            worksheet2.Range["1:1"].Style = workbook.Styles["Title"];
            worksheet2.Range["1:1"].Interior.ThemeColor = ThemeColor.Accent1;
            worksheet2.Range["1:1"].HorizontalAlignment = HorizontalAlignment.Left;
            worksheet2.Range["1:1"].IndentLevel = 1;
            worksheet2.Range["1:1"].VerticalAlignment = VerticalAlignment.Center;
            worksheet2.Range["A1"].Style = workbook.Styles["Normal"];
            #endregion

            #region Shape
            //create a shape.
            IShape shape = worksheet2.Shapes.AddShape(AutoShapeType.RectangularCallout, 472, 65, 300, 70);
            //config shape's line and fill.
            shape.Line.DashStyle = LineDashStyle.Solid;
            shape.Line.Weight = 4;
            shape.Line.Color.RGB = Color.FromArgb(89, 89, 89);
            shape.Fill.Solid();
            shape.Fill.Color.ColorType = SolidColorType.None;

            //config shape's rich text.
            ITextRange shape_p1 = shape.TextFrame.TextRange.Paragraphs[0];
            shape_p1.Text = "TIP:";
            ITextRange shape_p2 = shape.TextFrame.TextRange.Paragraphs.Add();
            shape_p2.Text = "Customize this PivotTable to fit your needs! Select a cell in the PivotTable to activate the PivotTable Field List pane. Then in the task pane, drag to add, remove, or reorder the fields." + 
                " For example, drag the Product field above the Customer field for a different view. To update PivotTable data, right-click in the PivotTable and then click Refresh.";

            //set first paragraph's font style.
            shape_p1.Font.ThemeFont = ThemeFont.Major;
            shape_p1.Font.Bold = true;
            shape_p1.Font.Size = 12;
            shape_p1.Font.Color.ObjectThemeColor = ThemeColor.Dark1;
            shape_p1.Font.Color.Brightness = 0.25;

            //set second paragraph's font style.
            shape_p2.Font.ThemeFont = ThemeFont.Minor;
            shape_p2.Font.Size = 8;
            shape_p2.Font.Color.ObjectThemeColor = ThemeColor.Dark1;
            shape_p2.Font.Color.Brightness = 0.25;
            #endregion

            #endregion

            #region Worksheet_DataLists
            IWorksheet worksheet3 = workbook.Worksheets.Add();
            worksheet3.Name = "Data Lists";
            worksheet3.SheetView.DisplayGridlines = false;

            #region RowHeightColumnWidth
            worksheet3.StandardHeight = 18.75;
            worksheet3.StandardWidth = 8.43;
            worksheet3.Range["1:1"].RowHeight = 51.75;
            worksheet3.Range["2:32"].RowHeight = 19;
            worksheet3.Range["A:A, D:D"].ColumnWidth = 2.28515625;
            worksheet3.Range["B:C"].ColumnWidth = 34.42578125;
            #endregion

            #region Values
            worksheet3.Range["B1"].Value = "DATA LISTS";
            #endregion

            #region Table
            worksheet3.Range["B2:B32"].Value = new object[,] {
                    { "PRODUCTS" },
                    { "Product 1" },
                    { "Product 2" },
                    { "Product 3" },
                    { "Product 4" },
                    { "Product 5" },
                    { "Product 6" },
                    { "Product 7" },
                    { "Product 8" },
                    { "Product 9" },
                    { "Product 10" },
                    { "Product 11" },
                    { "Product 12" },
                    { "Product 13" },
                    { "Product 14" },
                    { "Product 15" },
                    { "Product 16" },
                    { "Product 17" },
                    { "Product 18" },
                    { "Product 19" },
                    { "Product 20" },
                    { "Product 21" },
                    { "Product 22" },
                    { "Product 23" },
                    { "Product 24" },
                    { "Product 25" },
                    { "Product 26" },
                    { "Product 27" },
                    { "Product 28" },
                    { "Product 29" },
                    { "Product 30" },
                };
            ITable table_Products = worksheet3.Tables.Add(worksheet.Range["B2:B32"], true);
            worksheet3.Range["C2:C30"].Value = new object[,] {
                    { "CUSTOMERS" },
                    { "A. Datum Corporation" },
                    { "Adventure Works" },
                    { "Alpine Ski House" },
                    { "Blue Yonder Airlines" },
                    { "City Power &amp; Light" },
                    { "Coho Vineyard" },
                    { "Coho Winery" },
                    { "Coho Vineyard &amp; Winery" },
                    { "Contoso, Ltd" },
                    { "Contoso Pharmaceuticals" },
                    { "Consolidated Messenger" },
                    { "Fabrikam, Inc." },
                    { "Fourth Coffee" },
                    { "Graphic Design Institute" },
                    { "Humongous Insurance" },
                    { "Litware, Inc." },
                    { "Lucerne Publishing" },
                    { "Margie's Travel" },
                    { "Northwind Traders" },
                    { "Proseware, Inc." },
                    { "School of Fine Art" },
                    { "Southridge Video" },
                    { "Tailspin Toys" },
                    { "Trey Research" },
                    { "The Phone Company" },
                    { "Wide World Importers" },
                    { "Wingtip Toys" },
                    { "Woodgrove Bank" },
                };
            ITable table_Customers = worksheet3.Tables.Add(worksheet.Range["C2:C30"], true);

            table_Products.TableStyle = workbook.TableStyles["TableStyleMedium2"];
            table_Products.Columns[0].Range.HorizontalAlignment = HorizontalAlignment.Left;
            table_Products.Columns[0].Range.IndentLevel = 1;
            table_Products.Columns[0].Range.VerticalAlignment = VerticalAlignment.Center;
            table_Products.HeaderRange.Font.Size = 11;

            table_Customers.TableStyle = workbook.TableStyles["TableStyleMedium2"];
            table_Customers.Columns[0].Range.HorizontalAlignment = HorizontalAlignment.Left;
            table_Customers.Columns[0].Range.IndentLevel = 1;
            table_Customers.Columns[0].Range.VerticalAlignment = VerticalAlignment.Center;
            table_Customers.ShowTableStyleFirstColumn = true;
            table_Customers.HeaderRange.Font.Size = 11;
            #endregion

            #region Style
            worksheet3.Range["1:1"].Style = workbook.Styles["Title"];
            worksheet3.Range["1:1"].Interior.ThemeColor = ThemeColor.Accent1;
            worksheet3.Range["1:1"].HorizontalAlignment = HorizontalAlignment.Left;
            worksheet3.Range["1:1"].IndentLevel = 1;
            worksheet3.Range["1:1"].VerticalAlignment = VerticalAlignment.Center;
            worksheet3.Range["A1"].Style = workbook.Styles["Normal"];
            #endregion

            #region Shape
            IShape shape2 = worksheet3.Shapes.AddShape(AutoShapeType.RectangularCallout, 380, 65, 280, 50);
            shape2.Line.DashStyle = LineDashStyle.Solid;
            shape2.Line.Weight = 4;
            shape2.Line.Color.RGB = Color.FromArgb(89, 89, 89);
            shape2.Fill.Solid();
            shape2.Fill.Color.ColorType = SolidColorType.None;

            ITextRange shape2_p1 = shape2.TextFrame.TextRange.Paragraphs[0];
            shape2_p1.Text = "TIP:";
            ITextRange shape2_p2 = shape2.TextFrame.TextRange.Paragraphs.Add();
            shape2_p2.Text = "To add a new product or customer, start typing below the table and it will automatically expand when you press the Enter or Tab key.";
            shape2_p1.Font.ThemeFont = ThemeFont.Major;
            shape2_p1.Font.Bold = true;
            shape2_p1.Font.Size = 12;
            shape2_p1.Font.Color.ObjectThemeColor = ThemeColor.Dark1;
            shape2_p1.Font.Color.Brightness = 0.25;

            shape2_p2.Font.ThemeFont = ThemeFont.Minor;
            shape2_p2.Font.Size = 8;
            shape2_p2.Font.Color.ObjectThemeColor = ThemeColor.Dark1;
            shape2_p2.Font.Color.Brightness = 0.25;
            #endregion

            #endregion

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelReporting.BidTracker" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //***********************Set RowHeight &amp; ColumnWidth***************
            worksheet.StandardHeight = 30;
            worksheet.Range["1:1"].RowHeight = 57.75;
            worksheet.Range["2:9"].RowHeight = 30.25;
            worksheet.Range["A:A"].ColumnWidth = 2.71;
            worksheet.Range["B:B"].ColumnWidth = 11.71;
            worksheet.Range["C:C"].ColumnWidth = 28;
            worksheet.Range["D:D"].ColumnWidth = 22.425;
            worksheet.Range["E:E"].ColumnWidth = 16.71;
            worksheet.Range["F:F"].ColumnWidth = 28;
            worksheet.Range["G:H"].ColumnWidth = 16.71;
            worksheet.Range["I:I"].ColumnWidth = 2.71;



            //**************************Set Table Value &amp; Formulas*********************
            ITable table = worksheet.Tables.Add(worksheet.Range["B2:H9"], true);
            worksheet.Range["B2:H9"].Value = new object[,]
            {
                { "BID #", "DESCRIPTION", "DATE RECEIVED", "AMOUNT", "PERCENT COMPLETE", "DEADLINE", "DAYS LEFT" },
                { 1, "Bid number 1", null, 2000, 0.5, null, null },
                { 2, "Bid number 2", null, 3500, 0.25, null, null },
                { 3, "Bid number 3", null, 5000, 0.3, null, null },
                { 4, "Bid number 4", null, 4000, 0.2, null, null },
                { 5, "Bid number 5", null, 4000, 0.75, null , null },
                { 6, "Bid number 6", null, 1500, 0.45, null , null },
                { 7, "Bid number 7", null, 5000, 0.65, null, null },
            };
            worksheet.Range["B1"].Value = "Bid Details";
            worksheet.Range["D3"].Formula = "=TODAY()-10";
            worksheet.Range["D4:D5"].Formula = "=TODAY()-20";
            worksheet.Range["D6"].Formula = "=TODAY()-10";
            worksheet.Range["D7"].Formula = "=TODAY()-28";
            worksheet.Range["D8"].Formula = "=TODAY()-17";
            worksheet.Range["D9"].Formula = "=TODAY()-15";
            worksheet.Range["G3:G9"].Formula = "=[@[DATE RECEIVED]]+30";
            worksheet.Range["H3:H9"].Formula = "=[@DEADLINE]-TODAY()";



            //****************************Set Table Style********************************
            ITableStyle tableStyle = workbook.TableStyles.Add("Bid Tracker");
            workbook.DefaultTableStyle = "Bid Tracker";

            //Set WholeTable element style.
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Font.Color = Color.FromArgb(89, 89, 89);
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders.Color = Color.FromArgb(89, 89, 89);
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideVertical].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.Thin;

            //Set HeaderRow element style.
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders.Color = Color.FromArgb(89, 89, 89);
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.InsideVertical].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Interior.Color = Color.FromArgb(131, 95, 1);
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Interior.PatternColor = Color.FromArgb(254, 184, 10);


            //Set TotalRow element style.
            tableStyle.TableStyleElements[TableStyleElementType.TotalRow].Borders.Color = Color.White;
            tableStyle.TableStyleElements[TableStyleElementType.TotalRow].Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.TotalRow].Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.TotalRow].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.TotalRow].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.TotalRow].Borders[BordersIndex.InsideVertical].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.TotalRow].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.TotalRow].Interior.Color = Color.FromArgb(131, 95, 1);



            //***********************************Set Named Styles*****************************
            IStyle titleStyle = workbook.Styles["Title"];
            titleStyle.Font.Name = "Trebuchet MS";
            titleStyle.Font.Size = 36;
            titleStyle.Font.Color = Color.FromArgb(56, 145, 167);
            titleStyle.IncludeAlignment = true;
            titleStyle.VerticalAlignment = VerticalAlignment.Center;


            IStyle heading1Style = workbook.Styles["Heading 1"];
            heading1Style.IncludeAlignment = true;
            heading1Style.HorizontalAlignment = HorizontalAlignment.Left;
            heading1Style.IndentLevel = 1;
            heading1Style.VerticalAlignment = VerticalAlignment.Bottom;
            heading1Style.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.None;
            heading1Style.Font.Size = 14;
            heading1Style.Font.Color = Color.White;
            heading1Style.Font.Bold = false;
            heading1Style.IncludePatterns = true;
            heading1Style.Interior.Color = Color.FromArgb(131, 95, 1);
            heading1Style.Font.Name = "Trebuchet MS";


            IStyle dateStyle = workbook.Styles.Add("Date");
            dateStyle.IncludeNumber = true;
            dateStyle.NumberFormat = "m/d/yyyy";
            dateStyle.IncludeAlignment = true;
            dateStyle.HorizontalAlignment = HorizontalAlignment.Left;
            dateStyle.IndentLevel = 1;
            dateStyle.VerticalAlignment = VerticalAlignment.Center;
            dateStyle.IncludeFont = false;
            dateStyle.IncludeBorder = false;
            dateStyle.IncludePatterns = false;
            dateStyle.Font.Name = "Trebuchet MS";


            IStyle commaStyle = workbook.Styles["Comma"];
            commaStyle.IncludeNumber = true;
            commaStyle.NumberFormat = "#,##0_);(#,##0)";
            commaStyle.IncludeAlignment = true;
            commaStyle.HorizontalAlignment = HorizontalAlignment.Left;
            commaStyle.IndentLevel = 1;
            commaStyle.VerticalAlignment = VerticalAlignment.Center;
            commaStyle.Font.Name = "Trebuchet MS";


            IStyle normalStyle = workbook.Styles["Normal"];
            normalStyle.HorizontalAlignment = HorizontalAlignment.Left;
            normalStyle.IndentLevel = 1;
            normalStyle.VerticalAlignment = VerticalAlignment.Center;
            normalStyle.WrapText = true;
            normalStyle.Font.Color = Color.FromArgb(89, 89, 89);


            IStyle currencyStyle = workbook.Styles["Currency"];
            currencyStyle.NumberFormat = "$#,##0.00";
            currencyStyle.IncludeAlignment = true;
            currencyStyle.HorizontalAlignment = HorizontalAlignment.Left;
            currencyStyle.IndentLevel = 1;
            currencyStyle.VerticalAlignment = VerticalAlignment.Center;
            currencyStyle.Font.Name = "Trebuchet MS";


            IStyle percentStyle = workbook.Styles["Percent"];
            percentStyle.IncludeAlignment = true;
            percentStyle.HorizontalAlignment = HorizontalAlignment.Right;
            percentStyle.VerticalAlignment = VerticalAlignment.Center;
            percentStyle.IncludeFont = true;
            percentStyle.Font.Name = "Trebuchet MS";
            percentStyle.Font.Size = 20;
            percentStyle.Font.Bold = true;
            percentStyle.Font.Color = Color.FromArgb(89, 89, 89);
            percentStyle.Font.Name = "Trebuchet MS";


            IStyle comma0Style = workbook.Styles["Comma [0]"];
            comma0Style.NumberFormat = "#,##0_);(#,##0)";
            comma0Style.IncludeAlignment = true;
            comma0Style.HorizontalAlignment = HorizontalAlignment.Right;
            comma0Style.IndentLevel = 3;
            comma0Style.VerticalAlignment = VerticalAlignment.Center;
            percentStyle.Font.Name = "Trebuchet MS";



            //************************************Add Conditional Formatting****************
            IDataBar dataBar = worksheet.Range["F3:F9"].FormatConditions.AddDatabar();
            dataBar.MinPoint.Type = ConditionValueTypes.Number;
            dataBar.MinPoint.Value = 1;
            dataBar.MaxPoint.Type = ConditionValueTypes.Number;
            dataBar.MaxPoint.Value = 0;

            dataBar.BarFillType = DataBarFillType.Gradient;
            dataBar.BarColor.Color = Color.FromArgb(126, 194, 211);
            dataBar.Direction = DataBarDirection.Context;

            dataBar.AxisColor.Color = Color.Black;
            dataBar.AxisPosition = DataBarAxisPosition.Automatic;

            dataBar.NegativeBarFormat.ColorType = DataBarNegativeColorType.Color;
            dataBar.NegativeBarFormat.Color.Color = Color.Red;
            dataBar.ShowValue = true;



            //****************************************Use NamedStyle**************************
            worksheet.SheetView.DisplayGridlines = false;
            table.TableStyle = tableStyle;
            worksheet.Range["B1"].Style = titleStyle;
            worksheet.Range["B1"].WrapText = false;
            worksheet.Range["B2:H2"].Style = heading1Style;
            worksheet.Range["B3:B9"].Style = commaStyle;
            worksheet.Range["C3:C9"].Style = normalStyle;
            worksheet.Range["D3:D9"].Style = dateStyle;
            worksheet.Range["E3:E9"].Style = currencyStyle;
            worksheet.Range["F3:F9"].Style = percentStyle;
            worksheet.Range["G3:G9"].Style = dateStyle;
            worksheet.Range["H3:H9"].Style = comma0Style;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelReporting.BloodPressureTracker" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            #region theme
            //create a custom theme.
            Themes themes = new Themes();
            ITheme theme = themes.Add("testTheme");
            theme.ThemeColorScheme[ThemeColor.Light1].RGB = Color.FromArgb(255, 255, 255);
            theme.ThemeColorScheme[ThemeColor.Dark1].RGB = Color.FromArgb(0, 0, 0);
            theme.ThemeColorScheme[ThemeColor.Light2].RGB = Color.FromArgb(222, 222, 212);
            theme.ThemeColorScheme[ThemeColor.Dark2].RGB = Color.FromArgb(30, 46, 47);
            theme.ThemeColorScheme[ThemeColor.Accent1].RGB = Color.FromArgb(233, 117, 90);
            theme.ThemeColorScheme[ThemeColor.Accent2].RGB = Color.FromArgb(122, 182, 186);
            theme.ThemeColorScheme[ThemeColor.Accent3].RGB = Color.FromArgb(125, 181, 135);
            theme.ThemeColorScheme[ThemeColor.Accent4].RGB = Color.FromArgb(230, 191, 94);
            theme.ThemeColorScheme[ThemeColor.Accent5].RGB = Color.FromArgb(230, 143, 77);
            theme.ThemeColorScheme[ThemeColor.Accent6].RGB = Color.FromArgb(194, 107, 112);
            theme.ThemeColorScheme[ThemeColor.Hyperlink].RGB = Color.FromArgb(122, 182, 186);
            theme.ThemeColorScheme[ThemeColor.FollowedHyperlink].RGB = Color.FromArgb(166, 140, 177);
            theme.ThemeFontScheme.Major[FontLanguageIndex.Latin].Name = "Gill Sans";
            theme.ThemeFontScheme.Minor[FontLanguageIndex.Latin].Name = "Gill Sans";

            //assign the custom theme for workbook.
            workbook.Theme = theme;
            #endregion

            //does not show sheet gridlines.
            worksheet.SheetView.DisplayGridlines = false;

            #region RowHeightColumnWidth
            //set row height and column width.
            worksheet.StandardHeight = 12.75;
            worksheet.StandardWidth = 8.43;
            worksheet.Rows[1].RowHeight = 32.25;
            worksheet.Rows[2].RowHeight = 13.5;
            worksheet.Rows[3].RowHeight = 18.75;
            worksheet.Rows[6].RowHeight = 18.75;
            worksheet.Rows[9].RowHeight = 18.75;
            worksheet.Rows[12].RowHeight = 18.75;
            worksheet.Rows[15].RowHeight = 19.5;
            worksheet.Rows[16].RowHeight = 13.5;
            worksheet.Rows[33].RowHeight = 19.5;
            worksheet.Rows[34].RowHeight = 13.5;

            worksheet.Columns[0].ColumnWidth = 1.7109375;
            worksheet.Columns[1].ColumnWidth = 12.140625;
            worksheet.Columns[2].ColumnWidth = 12.140625;
            worksheet.Columns[3].ColumnWidth = 12.140625;
            worksheet.Columns[4].ColumnWidth = 11.85546875;
            worksheet.Columns[5].ColumnWidth = 12.7109375;
            worksheet.Columns[6].ColumnWidth = 13.85546875;
            worksheet.Columns[7].ColumnWidth = 44.7109375;
            #endregion

            #region Values
            //initialize worksheet's values.
            worksheet.Name = "BLOOD PRESSURE DATA";
            worksheet.Range["B2"].Value = "BLOOD PRESSURE TRACKER";
            worksheet.Range["B4:F13"].Value = new object[,] {
                                { "NAME", null, null, null, null },
                                { null, null, null, null, null },
                                { null, null, null, "Systolic", "Diastolic" },
                                { "TARGET BLOOD PRESSURE", null, null, 120, 80 },
                                { null, null, null, null, null },
                                { null, null, null, "Systolic", "Diastolic" },
                                { "CALL PHYSICIAN IF ABOVE", null, null, 140, 90 },
                                { null, null, null, null, null },
                                { null, null, null, null, null },
                                { "PHYSICIAN PHONE NUMBER", null, null, "[Phone Number]", null}
                            };

            worksheet.Range["B16"].Value = "CHARTED PROGRESS";
            worksheet.Range["B34"].Value = "DATA ENTRY";
            #endregion

            #region Table
            //initialize table data.
            worksheet.Range["B36:H44"].Value = new object[,] {
                                { "TIME", "DATE", "AM/PM", "SYSTOLIC", "DIASTOLIC", "HEART RATE", "NOTES" },
                                { new TimeSpan(10, 00, 00), DateTime.Parse("7/1/2013 12:00:00 AM"), "AM", 129, 99, 72, null },
                                { new TimeSpan(18, 00, 00), DateTime.Parse("7/1/2013 12:00:00 AM"), "PM", 133, 80, 75, null },
                                { new TimeSpan(10, 30, 00), DateTime.Parse("7/2/2012 12:00:00 AM"), "AM", 142, 86, 70, null },
                                { new TimeSpan(19, 00, 00), DateTime.Parse("7/2/2012 12:00:00 AM"), "PM", 141, 84, 68, null },
                                { new TimeSpan(09, 00, 00), DateTime.Parse("7/3/2012 12:00:00 AM"), "AM", 137, 84, 70, null },
                                { new TimeSpan(18, 30, 00), DateTime.Parse("7/3/2012 12:00:00 AM"), "PM", 139, 83, 72, null },
                                { new TimeSpan(10, 00, 00), DateTime.Parse("7/4/2012 12:00:00 AM"), "AM", 140, 85, 78, null },
                                { new TimeSpan(18, 00, 00), DateTime.Parse("7/4/2012 12:00:00 AM"), "PM", 138, 85, 69, null },
                            };
            ITable table = worksheet.Tables.Add(worksheet.Range["B36:H44"], true);
            table.ShowTotals = true;

            //set total row formulas.
            table.Columns[0].Total.Value = "Average";
            table.Columns[3].TotalsCalculation = TotalsCalculation.Average;
            table.Columns[4].TotalsCalculation = TotalsCalculation.Average;
            table.Columns[5].TotalsCalculation = TotalsCalculation.Average;
            table.Columns[6].TotalsCalculation = TotalsCalculation.None;

            //config data body range and total range's number format.
            table.Columns[0].DataBodyRange.NumberFormat = "h:mm;@";
            table.Columns[1].DataBodyRange.NumberFormat = "m/d/yyyy";
            table.Columns[3].DataBodyRange.NumberFormat = "0";
            table.Columns[4].DataBodyRange.NumberFormat = "0";
            table.Columns[5].DataBodyRange.NumberFormat = "0";
            table.Columns[3].Total.NumberFormat = "0";
            table.Columns[4].Total.NumberFormat = "0";
            table.Columns[5].Total.NumberFormat = "0";

            //config table range's alignment.
            table.Range.HorizontalAlignment = HorizontalAlignment.Left;
            table.Range.IndentLevel = 0;
            table.Range.VerticalAlignment = VerticalAlignment.Center;
            #endregion

            #region TableStyle
            //create a custom table style.
            ITableStyle tablestyle = workbook.TableStyles.Add("testStyle");
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Font.ThemeColor = ThemeColor.Dark1;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Font.TintAndShade = 0.25;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thin;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeTop].ThemeColor = ThemeColor.Accent1;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeTop].TintAndShade = 0.4;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.Thin;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].ThemeColor = ThemeColor.Accent1;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].TintAndShade = 0.4;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thin;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Accent1;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].TintAndShade = 0.4;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.Thin;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeLeft].ThemeColor = ThemeColor.Accent1;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeLeft].TintAndShade = 0.4;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Thin;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeRight].ThemeColor = ThemeColor.Accent1;
            tablestyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeRight].TintAndShade = 0.4;

            tablestyle.TableStyleElements[TableStyleElementType.FirstRowStripe].Interior.ThemeColor = ThemeColor.Accent1;
            tablestyle.TableStyleElements[TableStyleElementType.FirstRowStripe].Interior.TintAndShade = 0.8;

            tablestyle.TableStyleElements[TableStyleElementType.HeaderRow].Font.Bold = true;
            tablestyle.TableStyleElements[TableStyleElementType.HeaderRow].Font.ThemeColor = ThemeColor.Dark1;
            tablestyle.TableStyleElements[TableStyleElementType.HeaderRow].Font.TintAndShade = 0.25;
            tablestyle.TableStyleElements[TableStyleElementType.HeaderRow].Interior.ThemeColor = ThemeColor.Accent1;

            tablestyle.TableStyleElements[TableStyleElementType.TotalRow].Font.Bold = true;
            tablestyle.TableStyleElements[TableStyleElementType.TotalRow].Font.ThemeColor = ThemeColor.Dark1;
            tablestyle.TableStyleElements[TableStyleElementType.TotalRow].Font.TintAndShade = 0.25;
            tablestyle.TableStyleElements[TableStyleElementType.TotalRow].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Double;
            tablestyle.TableStyleElements[TableStyleElementType.TotalRow].Borders[BordersIndex.EdgeTop].ThemeColor = ThemeColor.Accent1;

            //assign custom table style for table.
            table.TableStyle = workbook.TableStyles["testStyle"];
            #endregion

            #region Style
            //assign built-in styles for ranges.
            worksheet.Range["B2:H2"].Style = workbook.Styles["Heading 1"];
            worksheet.Range["B4:F4, B7:D7, B10:D10, B13:D13"].Style = workbook.Styles["Heading 2"];
            worksheet.Range["B16:H16, B34:H34"].Style = workbook.Styles["Heading 3"];

            //modify built-in styles.
            IStyle style_Heading1 = workbook.Styles["Heading 1"];
            style_Heading1.HorizontalAlignment = HorizontalAlignment.General;
            style_Heading1.VerticalAlignment = VerticalAlignment.Center;
            style_Heading1.Font.ThemeFont = ThemeFont.Major;
            style_Heading1.Font.Size = 24;
            style_Heading1.Font.Bold = true;
            style_Heading1.Font.ThemeColor = ThemeColor.Accent1;
            style_Heading1.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            style_Heading1.Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Accent1;

            style_Heading1.IncludeAlignment = true;
            style_Heading1.IncludeFont = true;
            style_Heading1.IncludeBorder = true;
            style_Heading1.IncludeNumber = false;
            style_Heading1.IncludePatterns = false;
            style_Heading1.IncludeProtection = false;

            IStyle style_Heading2 = workbook.Styles["Heading 2"];
            style_Heading2.HorizontalAlignment = HorizontalAlignment.General;
            style_Heading2.VerticalAlignment = VerticalAlignment.Bottom;
            style_Heading2.Font.ThemeFont = ThemeFont.Minor;
            style_Heading2.Font.Size = 14;
            style_Heading2.Font.ThemeColor = ThemeColor.Dark1;
            style_Heading2.Font.TintAndShade = 0.25;
            style_Heading2.Font.Bold = false;
            style_Heading2.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Dotted;
            style_Heading2.Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Light1;
            style_Heading2.Borders[BordersIndex.EdgeBottom].TintAndShade = -0.5;

            style_Heading2.IncludeAlignment = true;
            style_Heading2.IncludeFont = true;
            style_Heading2.IncludeBorder = true;
            style_Heading2.IncludeNumber = false;
            style_Heading2.IncludePatterns = false;
            style_Heading2.IncludeProtection = false;

            IStyle style_Heading3 = workbook.Styles["Heading 3"];
            style_Heading3.HorizontalAlignment = HorizontalAlignment.General;
            style_Heading3.VerticalAlignment = VerticalAlignment.Center;
            style_Heading3.Font.ThemeFont = ThemeFont.Minor;
            style_Heading3.Font.Size = 14;
            style_Heading3.Font.Bold = true;
            style_Heading3.Font.ThemeColor = ThemeColor.Dark1;
            style_Heading3.Font.TintAndShade = 0.25;
            style_Heading3.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            style_Heading3.Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Accent2;

            style_Heading3.IncludeAlignment = true;
            style_Heading3.IncludeFont = true;
            style_Heading3.IncludeBorder = true;
            style_Heading3.IncludeNumber = false;
            style_Heading3.IncludePatterns = false;
            style_Heading3.IncludeProtection = false;

            IStyle style_Normal = workbook.Styles["Normal"];
            style_Normal.NumberFormat = "General";
            style_Normal.HorizontalAlignment = HorizontalAlignment.General;
            style_Normal.VerticalAlignment = VerticalAlignment.Center;
            style_Normal.Font.ThemeFont = ThemeFont.Minor;
            style_Normal.Font.Size = 10;
            style_Normal.Font.ThemeColor = ThemeColor.Dark1;
            style_Normal.Font.TintAndShade = 0.25;

            style_Normal.IncludeAlignment = true;
            style_Normal.IncludeFont = true;
            style_Normal.IncludeBorder = true;
            style_Normal.IncludeNumber = true;
            style_Normal.IncludePatterns = true;
            style_Normal.IncludeProtection = true;

            //modify cell styles.
            worksheet.Range["B4"].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.None;
            worksheet.Range["C4:F4"].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thin;
            IRange range1 = worksheet.Range["E7:F7, E10:F10"];
            range1.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Dotted;
            range1.Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Light1;
            range1.Borders[BordersIndex.EdgeBottom].TintAndShade = -0.5;
            range1.Font.Bold = true;
            IRange range2 = worksheet.Range["E7, E10"];
            range2.Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Thin;
            range2.Borders[BordersIndex.EdgeRight].ThemeColor = ThemeColor.Light1;
            range2.Borders[BordersIndex.EdgeRight].TintAndShade = -0.5;
            #endregion

            #region Chart
            //create a new chart.
            IShape shape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 8.99984251968504, 268.5, 627.750157480315, 184.5);

            //create series for chart.
            ISeries series_systolic = shape.Chart.SeriesCollection.NewSeries();
            ISeries series_diatolic = shape.Chart.SeriesCollection.NewSeries();
            ISeries series_HeartRate = shape.Chart.SeriesCollection.NewSeries();

            //set series formulas.
            series_systolic.Formula = "=SERIES('BLOOD PRESSURE DATA'!$E$36,'BLOOD PRESSURE DATA'!$C$37:$D$44,'BLOOD PRESSURE DATA'!$E$37:$E$44,1)";
            series_diatolic.Formula = "=SERIES('BLOOD PRESSURE DATA'!$F$36,'BLOOD PRESSURE DATA'!$C$37:$D$44,'BLOOD PRESSURE DATA'!$F$37:$F$44,2)";

            //set series plot on secondary axis, and change its chart type.
            series_HeartRate.AxisGroup = AxisGroup.Secondary;
            series_HeartRate.ChartType = ChartType.Line;
            series_HeartRate.Formula = "=SERIES('BLOOD PRESSURE DATA'!$G$36,,'BLOOD PRESSURE DATA'!$G$37:$G$44,3)";

            //set series fill to gradient fill.
            series_systolic.Format.Fill.TwoColorGradient(GradientStyle.Horizontal, 1);
            series_systolic.Format.Fill.GradientAngle = 270;
            series_systolic.Format.Fill.GradientStops[0].Color.RGB = Color.FromArgb(255, 172, 175);
            series_systolic.Format.Fill.GradientStops[1].Color.RGB = Color.FromArgb(255, 227, 228);
            series_systolic.Format.Fill.GradientStops.Insert(0xFEC6C8, 0.35);
            series_systolic.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent6;

            series_diatolic.Format.Fill.TwoColorGradient(GradientStyle.Horizontal, 1);
            series_diatolic.Format.Fill.GradientAngle = 270;
            series_diatolic.Format.Fill.GradientStops[0].Color.RGB = Color.FromArgb(255, 192, 147);
            series_diatolic.Format.Fill.GradientStops[1].Color.RGB = Color.FromArgb(255, 227, 212);
            series_diatolic.Format.Fill.GradientStops.Insert(0xFFCBA9, 0.35);
            series_diatolic.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent5;

            //set series gap width and overlap.
            shape.Chart.ColumnGroups[0].GapWidth = 150;
            shape.Chart.ColumnGroups[0].Overlap = 0;

            //set series line style.
            series_HeartRate.Format.Line.BeginArrowheadLength = ArrowheadLength.Medium;
            series_HeartRate.Format.Line.BeginArrowheadStyle = ArrowheadStyle.None;
            series_HeartRate.Format.Line.BeginArrowheadWidth = ArrowheadWidth.Medium;
            series_HeartRate.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent4;
            series_HeartRate.Format.Line.Color.TintAndShade = 0;
            series_HeartRate.Format.Line.DashStyle = LineDashStyle.Solid;
            series_HeartRate.Format.Line.EndArrowheadLength = ArrowheadLength.Medium;
            series_HeartRate.Format.Line.EndArrowheadStyle = ArrowheadStyle.None;
            series_HeartRate.Format.Line.EndArrowheadWidth = ArrowheadWidth.Medium;
            series_HeartRate.Format.Line.Style = LineStyle.Single;
            series_HeartRate.Format.Line.Weight = 1.25;

            IAxis primary_axis = shape.Chart.Axes.Item(AxisType.Value, AxisGroup.Primary);
            primary_axis.HasTitle = true;
            primary_axis.AxisTitle.Text = "BLOOD PRESSURE";
            primary_axis.AxisTitle.IncludeInLayout = true;

            IAxis secondary_axis = shape.Chart.Axes.Item(AxisType.Value, AxisGroup.Secondary);
            secondary_axis.HasTitle = true;
            secondary_axis.AxisTitle.Text = "HEART RATE";
            secondary_axis.AxisTitle.IncludeInLayout = true;

            IAxis category_axis = shape.Chart.Axes.Item(AxisType.Category, AxisGroup.Primary);
            category_axis.HasTitle = true;
            category_axis.CategoryType = CategoryType.CategoryScale;
            category_axis.Format.Line.Color.ColorType = SolidColorType.None;

            shape.Chart.HasTitle = false;
            //set chart font style.
            shape.Chart.ChartArea.Font.Size = 9;
            shape.Chart.ChartArea.Font.Color.ObjectThemeColor = ThemeColor.Dark1;
            shape.Chart.ChartArea.Font.Color.Brightness = 0.5;
            #endregion


            #region Shape
            IShape shape1 = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 402, 77.25, 234, 100);
            shape1.Fill.Solid();
            shape1.Fill.Color.ObjectThemeColor = ThemeColor.Accent1;
            shape1.Fill.Color.Brightness = 0.6;
            //set shape's border to no line.
            shape1.Line.Color.ColorType = SolidColorType.None;

            //set shape rich text.
            ITextRange shape1_p1 = shape1.TextFrame.TextRange.Paragraphs[0];
            shape1_p1.Text = "*";
            shape1_p1.Runs.Add(" Blood pressures may vary dependent on many");
            shape1_p1.Runs.Add(" factors.  Always consult with a physician about what is normal for you.  These numbers may vary slightly.");
            
            ITextRange shape1_p2 = shape1.TextFrame.TextRange.Paragraphs.Add("");
            ITextRange shape1_p3 = shape1.TextFrame.TextRange.Paragraphs.Add("Info from National Institute of Health:");
            ITextRange shape1_p4 = shape1.TextFrame.TextRange.Paragraphs.Add("http://www.nhlbi.nih.gov/health/health-topics/topics/hbp/");

            shape1.TextFrame.TextRange.Font.Size = 10;
            shape1.TextFrame.TextRange.Font.ThemeFont = ThemeFont.Minor;
            shape1.TextFrame.TextRange.Font.Color.ObjectThemeColor = ThemeColor.Dark1;
            shape1.TextFrame.TextRange.Font.Color.Brightness = 0.25;
            shape1_p3.Runs[0].Font.Bold = true;

            IShape shape2 = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 421.5, 546.75, 198, 50);
            shape2.Fill.Solid();
            shape2.Fill.Color.ObjectThemeColor = ThemeColor.Accent3;
            shape2.Fill.Color.Brightness = 0.6;
            //set shape's border to no line.
            shape2.Line.Color.ColorType = SolidColorType.None;

            ITextRange shape2_p1 = shape2.TextFrame.TextRange.Paragraphs[0];
            shape2_p1.Text = "NOTE:";
            shape2_p1.Runs.Add(" Any blood pressure readings over the indicated numbers (\"CALL PHYSICIAN IF ABOVE\") will be");
            shape2_p1.Runs.Add(" highlighted.");

            shape2.TextFrame.TextRange.Font.Size = 10;
            shape2.TextFrame.TextRange.Font.ThemeFont = ThemeFont.Minor;
            shape2.TextFrame.TextRange.Font.Color.ObjectThemeColor = ThemeColor.Dark1;
            shape2.TextFrame.TextRange.Font.Color.Brightness = 0.25;
            shape2_p1.Runs[0].Font.Bold = true;
            #endregion

            #region DefinedName
            //create defined names for workbook.
            workbook.Names.Add("MaxDiastolic", "='BLOOD PRESSURE DATA'!$F$10");
            workbook.Names.Add("MaxSystolic", "='BLOOD PRESSURE DATA'!$E$10");
            #endregion

            #region ConditionalFormat
            //create conditional format for ranges.
            IFormatCondition condition1 = worksheet.Range["E37:E44"].FormatConditions.Add(FormatConditionType.Expression, formula1: "=E37&gt;MaxSystolic") as IFormatCondition;
            IFormatCondition condition2 = worksheet.Range["F37:F44"].FormatConditions.Add(FormatConditionType.Expression, formula1: "=F37&gt;MaxDiastolic") as IFormatCondition;
            condition1.Interior.Color = Color.Red;
            condition2.Interior.Color = Color.Red;
            #endregion
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelReporting.CostAnalysisWithParetoChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,] {
                { "Cost Center", "Annual Cost", "Percent of Total", "Cumulative Percent" },
                { "Parts and materials", 1325000, null, null },
                { "Manufacturing equipment", 900500, null, null },
                { "Salaries", 575000, null, null },
                { "Maintenance", 395000, null, null },
                { "Office lease", 295000, null, null },
                { "Warehouse lease", 250000, null, null },
                { "Insurance", 180000, null, null },
                { "Benefits and pensions", 130000, null, null },
                { "Vehicles", 125000, null, null },
                { "Research", 75000, null, null },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Name = "COST DATA and CHART";
            worksheet.TabColor = Color.FromArgb(63, 94, 101);
            worksheet.SheetView.DisplayGridlines = false;

            //Set Value.
            worksheet.Range["B2"].Value = "COST ANALYSIS - PARETO";
            worksheet.Range["B39"].Value = "COST ANALYSIS";
            worksheet.Range["B41:E51"].Value = data;

            //Set NumberFormat.
            worksheet.Range["C42:C52"].NumberFormat = "\"$\"#,##0.00_);[Red](\"$\"#,##0.00)";
            worksheet.Range["D42:E52"].NumberFormat = "0.00%";

            //Change the range's RowHeight and ColumnWidth.
            worksheet.StandardHeight = 15.75;
            worksheet.StandardWidth = 8.43;
            worksheet.Range["1:1"].RowHeight = 12.75;
            worksheet.Range["2:2"].RowHeight = 20.25;
            worksheet.Range["3:3"].RowHeight = 16.5;
            worksheet.Range["39:39"].RowHeight = 20.25;
            worksheet.Range["40:40"].RowHeight = 16.5;
            worksheet.Range["41:41"].RowHeight = 29.25;
            worksheet.Range["42:51"].RowHeight = 20.1;
            worksheet.Range["A:A"].ColumnWidth = 1.44140625;
            worksheet.Range["B:B"].ColumnWidth = 25.88671875;
            worksheet.Range["C:C"].ColumnWidth = 18.5546875;
            worksheet.Range["D:D"].ColumnWidth = 17.77734375;
            worksheet.Range["E:E"].ColumnWidth = 20.77734375;

            //Apply one build in name style on the ranges.
            worksheet.Range["B2:J2"].Style = workbook.Styles["Heading 1"];
            worksheet.Range["B39:E39"].Style = workbook.Styles["Heading 1"];

            //Create a table and apply one build in table style.
            ITable table = worksheet.Tables.Add(worksheet.Range["B41:E51"], true);
            table.Name = "tblData";
            table.TableStyle = workbook.TableStyles["TableStyleLight9"];
            table.ShowTotals = true;
            table.ShowTableStyleRowStripes = true;

            //Use table formula in table range.
            worksheet.Range["D42:D51"].Formula = "=[@[Annual Cost]]/SUM([[Annual Cost]])";
            worksheet.Range["E42:E51"].Formula = "=SUM(INDEX([Percent of Total],1):[@[Percent of Total]])";
            table.Columns[1].TotalsCalculation = TotalsCalculation.Sum;
            table.Columns[2].TotalsCalculation = TotalsCalculation.Sum;
            table.Columns[3].TotalsCalculation = TotalsCalculation.None;

            //Add chart.
            IShape shape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 9.75, 48, 597, 472.5);
            shape.Name = "Pareto Chart";

            //Add Series.
            ISeries series_ColumnClustered = shape.Chart.SeriesCollection.NewSeries();
            series_ColumnClustered.Formula = "=SERIES('COST DATA and CHART'!$C$41,'COST DATA and CHART'!$B$42:$B$51,'COST DATA and CHART'!$C$42:$C$51,1)";
            series_ColumnClustered.Format.Fill.TwoColorGradient(GradientStyle.Horizontal, 1);
            series_ColumnClustered.Format.Fill.GradientAngle = 90;
            series_ColumnClustered.Format.Fill.GradientStops[0].Color.ObjectThemeColor = ThemeColor.Accent1;
            series_ColumnClustered.Format.Fill.GradientStops[0].Color.Brightness = 0;
            series_ColumnClustered.Format.Fill.GradientStops[0].Position = 0;
            series_ColumnClustered.Format.Fill.GradientStops[1].Color.ObjectThemeColor = ThemeColor.Accent1;
            series_ColumnClustered.Format.Fill.GradientStops[1].Color.Brightness = -0.16;
            series_ColumnClustered.Format.Fill.GradientStops[1].Position = 1;
            series_ColumnClustered.Format.Line.Color.ObjectThemeColor = ThemeColor.Light1;

            ISeries series_Line = shape.Chart.SeriesCollection.NewSeries();
            series_Line.ChartType = ChartType.Line;
            series_Line.Formula = "=SERIES('COST DATA and CHART'!$E$41,,'COST DATA and CHART'!$E$42:$E$51,2)";
            series_Line.Format.Line.Weight = 2.25;
            series_Line.AxisGroup = AxisGroup.Secondary;

            //Change the secondary's maxinumscale.
            IAxis secondary_axis = shape.Chart.Axes.Item(AxisType.Value, AxisGroup.Secondary);
            secondary_axis.MaximumScale = 1.0;

            //Set the chart's title format.
            shape.Chart.ChartTitle.Text = "Cost Center";
            shape.Chart.ChartTitle.Font.ThemeFont = ThemeFont.Minor;
            shape.Chart.ChartTitle.Font.Color.RGB = Color.FromArgb(89, 89, 89);
            shape.Chart.ChartTitle.Font.Size = 18;

            //Set the chart has no legend.
            shape.Chart.HasLegend = false;

            //Set the char group's Overlap and GapWidth.
            shape.Chart.ColumnGroups[0].Overlap = 0;
            shape.Chart.ColumnGroups[0].GapWidth = 0;

            //Set chart area's format.
            shape.Chart.ChartArea.Format.Fill.PresetGradient(GradientStyle.Horizontal, 1, PresetGradientType.EarlySunset);
            shape.Chart.ChartArea.Format.Fill.GradientStops.Delete(3);
            shape.Chart.ChartArea.Format.Fill.GradientStops.Delete(3);
            shape.Chart.ChartArea.Format.Fill.GradientAngle = 90;
            shape.Chart.ChartArea.Format.Fill.GradientStops[0].Color.ObjectThemeColor = ThemeColor.Light1;
            shape.Chart.ChartArea.Format.Fill.GradientStops[0].Color.Brightness = 0;
            shape.Chart.ChartArea.Format.Fill.GradientStops[0].Position = 0;
            shape.Chart.ChartArea.Format.Fill.GradientStops[1].Color.ObjectThemeColor = ThemeColor.Light1;
            shape.Chart.ChartArea.Format.Fill.GradientStops[1].Color.Brightness = -0.15;
            shape.Chart.ChartArea.Format.Fill.GradientStops[1].Position = 0.68;
            shape.Chart.ChartArea.Format.Fill.GradientStops[2].Color.ObjectThemeColor = ThemeColor.Light1;
            shape.Chart.ChartArea.Format.Fill.GradientStops[2].Color.Brightness = 0;
            shape.Chart.ChartArea.Format.Fill.GradientStops[2].Position = 1;

            //Create customize theme.
            Themes themes = new Themes();
            ITheme theme = themes.Add("test");
            theme.ThemeColorScheme[ThemeColor.Dark1].RGB = Color.FromArgb(0, 0, 0);
            theme.ThemeColorScheme[ThemeColor.Light1].RGB = Color.FromArgb(255, 255, 255);
            theme.ThemeColorScheme[ThemeColor.Dark2].RGB = Color.FromArgb(96, 89, 88);
            theme.ThemeColorScheme[ThemeColor.Light2].RGB = Color.FromArgb(241, 246, 246);
            theme.ThemeColorScheme[ThemeColor.Accent1].RGB = Color.FromArgb(63, 94, 101);
            theme.ThemeColorScheme[ThemeColor.Accent2].RGB = Color.FromArgb(224, 170, 83);
            theme.ThemeColorScheme[ThemeColor.Accent3].RGB = Color.FromArgb(179, 29, 66);
            theme.ThemeColorScheme[ThemeColor.Accent4].RGB = Color.FromArgb(162, 67, 162);
            theme.ThemeColorScheme[ThemeColor.Accent5].RGB = Color.FromArgb(120, 59, 101);
            theme.ThemeColorScheme[ThemeColor.Accent6].RGB = Color.FromArgb(55, 120, 169);
            theme.ThemeColorScheme[ThemeColor.Hyperlink].RGB = Color.FromArgb(71, 166, 181);
            theme.ThemeColorScheme[ThemeColor.FollowedHyperlink].RGB = Color.FromArgb(120, 59, 101);
            theme.ThemeFontScheme.Major[FontLanguageIndex.Latin].Name = "Constantia";
            theme.ThemeFontScheme.Minor[FontLanguageIndex.Latin].Name = "Helvetica";

            //Apply the above custom theme.
            workbook.Theme = theme;

            //Set active cell.
            worksheet.Range["B43"].Activate();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelReporting.CustomerProfitabilityAnalysis" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,] {
	            { null, "[Segment Name]", "[Segment Name]", "[Segment Name]", "Overall" },
	            { "Customer Activity:", null, null, null, null },
	            { "Number of active customers—Beginning of period", 5, 8, 8, null },
	            { "Number of customers added", 2, 4, 4, null },
	            { "Number of customers lost/terminated", -1, -2, -2, null },
	            { "Number of active customers—End of period", null, null, null, null },
	            { null, null, null, null, null },
	            { "Profitability Analysis:", null, null, null, null },
	            { "Revenue per segment", 1500000, 1800000, 2500000, null },
	            { "Weighting", null, null, null, null },
	            { null, null, null, null, null },
	            { "Cost of sales:", null, null, null, null },
	            { "Ongoing service and support costs", 1000000, 1400000, 1400000, null },
	            { "Other direct customer costs", 200000, 100000, 100000, null },
	            { "Total cost of sales", null, null, null, null },
	            { "Gross margin", null, null, null, null },
	            { "Weighting", null, null, null, null },
	            { null, null, null, null, null },
	            { "Other costs:", null, null, null, null },
	            { "Customer acquisition", 105000, 120000, 235000, null },
	            { "Customer marketing", 150000, 125000, 275000, null },
	            { "Customer termination", 80000, 190000, 140000, null },
	            { "Total other customer costs", null, null, null, null },
	            { "Customer profit by segment", null, null, null, null },
	            { "Weighting", null, null, null, null },
	            { null, null, null, null, null },
	            { "Summary Metrics:", "[Segment Name]", "[Segment Name]", "[Segment Name]", "Trend" },
	            { "Average cost per acquired customer", null, null, null, null },
	            { "Average cost per terminated customer", null, null, null, null },
	            { "Average marketing cost per active customer", null, null, null, null },
	            { "Average profit (loss) per customer", null, null, null, null },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Name = "Customer Profitability";
            worksheet.TabColor = Color.FromArgb(131, 172, 121);
            worksheet.SheetView.DisplayGridlines = false;

            //Set Value.
            worksheet.Range["B2"].Value = "[Company Name]";
            worksheet.Range["B3"].Value = "Customer Profitability Analysis";
            worksheet.Range["B4"].Value = "[Date]";
            worksheet.Range["B6"].Value = "Gray cells will be calculated for you. You do not need to enter anything into them.";
            worksheet.Range["B7:F37"].Value = data;

            //Set formula.
            worksheet.Range["F9:F11"].Formula = "=SUM(C9:E9)";
            worksheet.Range["C12:F12"].Formula = "=SUM(C9:C11)";

            worksheet.Range["C16:E16"].Formula = "=+C15/$F$15";
            worksheet.Range["F15:F16"].Formula = "=SUM(C15:E15)";

            worksheet.Range["F19:F20"].Formula = "=SUM(C19:E19)";
            worksheet.Range["C21:F21"].Formula = "=SUM(C19:C20)";
            worksheet.Range["C22:F22"].Formula = "=+C15-C21";
            worksheet.Range["C23:E23"].Formula = "=MAX(0, MIN(1,C22/$F$22))";
            worksheet.Range["F23"].Formula = "=SUM(C23:E23)";

            worksheet.Range["F26:F28"].Formula = "=SUM(C26:E26)";
            worksheet.Range["C29:F29"].Formula = "=SUM(C26:C28)";
            worksheet.Range["C30:E30"].Formula = "=+C22-C29";
            worksheet.Range["C31:E31"].Formula = "=MAX(0,MIN(1, C30/$F$30))";
            worksheet.Range["F30:F31"].Formula = "=SUM(C30:E30)";

            worksheet.Range["C34:E34"].Formula = "=+C26/C10";
            worksheet.Range["C35:E35"].Formula = "=-C28/C11";
            worksheet.Range["C36:E36"].Formula = "=+C27/C12";
            worksheet.Range["C37:E37"].Formula = "=+C30/C12";

            //Change the range's RowHeight and ColumnWidth.
            worksheet.StandardHeight = 15;
            worksheet.StandardWidth = 9.140625;
            worksheet.Rows[0].RowHeight = 9.95;
            worksheet.Rows[1].RowHeight = 33;
            worksheet.Rows[2].RowHeight = 27;
            worksheet.Rows[3].RowHeight = 19.5;
            worksheet.Rows[4].RowHeight = 9;
            worksheet.Rows[5].RowHeight = 19.5;
            worksheet.Rows[6].RowHeight = 18;
            worksheet.Rows[12].RowHeight = 9;
            worksheet.Rows[16].RowHeight = 9;
            worksheet.Rows[23].RowHeight = 9;
            worksheet.Rows[31].RowHeight = 9;

            worksheet.Columns[0].ColumnWidth = 1.85546875;
            worksheet.Columns[1].ColumnWidth = 46.7109375;
            worksheet.Columns[2].ColumnWidth = 16.42578125;
            worksheet.Columns[3].ColumnWidth = 16.42578125;
            worksheet.Columns[4].ColumnWidth = 16.42578125;
            worksheet.Columns[5].ColumnWidth = 16.42578125;

            //Modify the build in name styles.
            var nameStyle_Normal = workbook.Styles["Normal"];
            nameStyle_Normal.VerticalAlignment = VerticalAlignment.Center;
            nameStyle_Normal.Font.ThemeColor = ThemeColor.Dark1;
            nameStyle_Normal.Font.TintAndShade = 0.249946592608417;
            nameStyle_Normal.Font.Size = 10;

            var nameStyle_Heading_1 = workbook.Styles["Heading 1"];
            nameStyle_Heading_1.HorizontalAlignment = HorizontalAlignment.Left;
            nameStyle_Heading_1.VerticalAlignment = VerticalAlignment.Center;
            nameStyle_Heading_1.Font.ThemeFont = ThemeFont.Major;
            nameStyle_Heading_1.Font.Bold = false;
            nameStyle_Heading_1.Font.Size = 24;
            nameStyle_Heading_1.Font.ThemeColor = ThemeColor.Dark1;
            nameStyle_Heading_1.Font.TintAndShade = 0.249946592608417;
            nameStyle_Heading_1.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.None;
            nameStyle_Heading_1.IncludeAlignment = true;

            var nameStyle_Heading_2 = workbook.Styles["Heading 2"];
            nameStyle_Heading_2.HorizontalAlignment = HorizontalAlignment.Left;
            nameStyle_Heading_2.VerticalAlignment = VerticalAlignment.Center;
            nameStyle_Heading_2.Font.ThemeFont = ThemeFont.Major;
            nameStyle_Heading_2.Font.Bold = false;
            nameStyle_Heading_2.Font.Size = 20;
            nameStyle_Heading_2.Font.ThemeColor = ThemeColor.Dark1;
            nameStyle_Heading_2.Font.TintAndShade = 0.249946592608417;
            nameStyle_Heading_2.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.None;
            nameStyle_Heading_2.Interior.ThemeColor = ThemeColor.Accent3;
            nameStyle_Heading_2.Interior.TintAndShade = 0.39994506668294322;
            nameStyle_Heading_2.IncludeNumber = true;
            nameStyle_Heading_2.IncludePatterns = true;

            var nameStyle_Heading_3 = workbook.Styles["Heading 3"];
            nameStyle_Heading_3.HorizontalAlignment = HorizontalAlignment.Left;
            nameStyle_Heading_3.VerticalAlignment = VerticalAlignment.Center;
            nameStyle_Heading_3.Font.ThemeFont = ThemeFont.Major;
            nameStyle_Heading_3.Font.Bold = false;
            nameStyle_Heading_3.Font.Size = 14;
            nameStyle_Heading_3.Font.ThemeColor = ThemeColor.Dark1;
            nameStyle_Heading_3.Font.TintAndShade = 0.249946592608417;
            nameStyle_Heading_3.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.None;
            nameStyle_Heading_3.IncludeAlignment = true;
            nameStyle_Heading_3.IncludePatterns = true;

            var nameStyle_Heading_4 = workbook.Styles["Heading 4"];
            nameStyle_Heading_4.HorizontalAlignment = HorizontalAlignment.Left;
            nameStyle_Heading_4.VerticalAlignment = VerticalAlignment.Center;
            nameStyle_Heading_4.Font.ThemeFont = ThemeFont.Major;
            nameStyle_Heading_4.Font.Bold = true;
            nameStyle_Heading_4.Font.Size = 10;
            nameStyle_Heading_4.Font.ThemeColor = ThemeColor.Light1;
            nameStyle_Heading_4.Font.TintAndShade = -0.0499893185216834;
            nameStyle_Heading_4.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.None;
            nameStyle_Heading_4.Interior.ThemeColor = ThemeColor.Accent3;
            nameStyle_Heading_4.Interior.TintAndShade = -0.249946592608417;
            nameStyle_Heading_4.IncludeAlignment = true;
            nameStyle_Heading_4.IncludeBorder = true;
            nameStyle_Heading_4.IncludePatterns = true;

            //Apply the above name styles on ranges.
            worksheet.Range["B2:F2"].Style = workbook.Styles["Heading 1"];
            worksheet.Range["B3:F3"].Style = workbook.Styles["Heading 2"];
            worksheet.Range["B4:F4"].Style = workbook.Styles["Heading 3"];
            worksheet.Range["B8:F8"].Style = workbook.Styles["Heading 4"];
            worksheet.Range["B14:F14"].Style = workbook.Styles["Heading 4"];
            worksheet.Range["B18:F18"].Style = workbook.Styles["Heading 4"];
            worksheet.Range["B25:F25"].Style = workbook.Styles["Heading 4"];
            worksheet.Range["B33:F33"].Style = workbook.Styles["Heading 4"];

            //Set NumberFormat.
            worksheet.Range["C9:F12"].NumberFormat = "0_);[Red](0)";
            worksheet.Range["C15:F15"].NumberFormat = "\"$\"#,##0.00_);[Red](\"$\"#,##0.00)";
            worksheet.Range["C16:F16"].NumberFormat = "0%";
            worksheet.Range["C19:F22"].NumberFormat = "\"$\"#,##0.00_);[Red](\"$\"#,##0.00)";
            worksheet.Range["C23:F23"].NumberFormat = "0%";
            worksheet.Range["C26:F30"].NumberFormat = "\"$\"#,##0.00_);[Red](\"$\"#,##0.00)";
            worksheet.Range["C31:F31"].NumberFormat = "0%";
            worksheet.Range["C34:F37"].NumberFormat = "\"$\"#,##0.00_);[Red](\"$\"#,##0.00)";

            //Set range's font style.
            worksheet.Range["B6"].Font.TintAndShade = 0.34998626667073579;
            worksheet.Range["B6"].Font.Size = 8;
            worksheet.Range["B6"].Font.Italic = true;
            worksheet.Range["C7:F7"].Font.TintAndShade = 0;
            worksheet.Range["B9:F12"].Font.TintAndShade = 0;
            worksheet.Range["B15:F16"].Font.TintAndShade = 0;
            worksheet.Range["B19:F23"].Font.TintAndShade = 0;
            worksheet.Range["B26:F31"].Font.TintAndShade = 0;
            worksheet.Range["B34:F37"].Font.TintAndShade = 0;
            worksheet.Range["C33:F33"].Font.Bold = false;

            //Set range's alignment.
            worksheet.Range["C7:F7"].HorizontalAlignment = HorizontalAlignment.Center;
            worksheet.Range["C33:F33"].HorizontalAlignment = HorizontalAlignment.Center;

            //Set range's border
            worksheet.Range["B9:F12"].Borders.LineStyle = BorderLineStyle.Thin;
            worksheet.Range["B9:F12"].Borders.ThemeColor = ThemeColor.Accent3;
            worksheet.Range["B9:F12"].Borders.TintAndShade = 0.39994506668294322;

            worksheet.Range["B15:F16"].Borders.LineStyle = BorderLineStyle.Thin;
            worksheet.Range["B15:F16"].Borders.ThemeColor = ThemeColor.Accent3;
            worksheet.Range["B15:F16"].Borders.TintAndShade = 0.39994506668294322;

            worksheet.Range["B19:F23"].Borders.LineStyle = BorderLineStyle.Thin;
            worksheet.Range["B19:F23"].Borders.ThemeColor = ThemeColor.Accent3;
            worksheet.Range["B19:F23"].Borders.TintAndShade = 0.39994506668294322;

            worksheet.Range["B26:F31"].Borders.LineStyle = BorderLineStyle.Thin;
            worksheet.Range["B26:F31"].Borders.ThemeColor = ThemeColor.Accent3;
            worksheet.Range["B26:F31"].Borders.TintAndShade = 0.39994506668294322;

            worksheet.Range["B34:F37"].Borders.LineStyle = BorderLineStyle.Thin;
            worksheet.Range["B34:F37"].Borders.ThemeColor = ThemeColor.Accent3;
            worksheet.Range["B34:F37"].Borders.TintAndShade = 0.39994506668294322;

            //Set range's fill.
            worksheet.Range["F9:F12"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["F9:F12"].Interior.TintAndShade = -0.0499893185216834;
            worksheet.Range["C12:E12"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["C12:E12"].Interior.TintAndShade = -0.0499893185216834;
            worksheet.Range["F15:F16"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["F15:F16"].Interior.TintAndShade = -0.0499893185216834;
            worksheet.Range["C16:E16"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["C16:E16"].Interior.TintAndShade = -0.0499893185216834;
            worksheet.Range["F19:F23"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["F19:F23"].Interior.TintAndShade = -0.0499893185216834;
            worksheet.Range["C21:E23"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["C21:E23"].Interior.TintAndShade = -0.0499893185216834;
            worksheet.Range["F26:F31"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["F26:F31"].Interior.TintAndShade = -0.0499893185216834;
            worksheet.Range["C29:E31"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["C29:E31"].Interior.TintAndShade = -0.0499893185216834;
            worksheet.Range["C34:E37"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["C34:E37"].Interior.TintAndShade = -0.0499893185216834;

            //create a new group of sparklines.
            ISparklineGroup sparklineGroup = worksheet.Range["F34:F37"].SparklineGroups.Add(SparkType.Line, "C34:E37");
            sparklineGroup.SeriesColor.ThemeColor = ThemeColor.Accent3;
            sparklineGroup.SeriesColor.TintAndShade = -0.249977111117893;
            sparklineGroup.Points.Negative.Color.ThemeColor = ThemeColor.Accent4;
            sparklineGroup.Points.Markers.Color.ThemeColor = ThemeColor.Accent4;
            sparklineGroup.Points.Markers.Color.TintAndShade = -0.249977111117893;
            sparklineGroup.Points.Highpoint.Color.ThemeColor = ThemeColor.Accent4;
            sparklineGroup.Points.Highpoint.Color.TintAndShade = -0.249977111117893;
            sparklineGroup.Points.Lowpoint.Color.ThemeColor = ThemeColor.Accent4;
            sparklineGroup.Points.Lowpoint.Color.TintAndShade = -0.249977111117893;
            sparklineGroup.Points.Firstpoint.Color.ThemeColor = ThemeColor.Accent4;
            sparklineGroup.Points.Firstpoint.Color.TintAndShade = -0.249977111117893;
            sparklineGroup.Points.Lastpoint.Color.ThemeColor = ThemeColor.Accent4;
            sparklineGroup.Points.Lastpoint.Color.TintAndShade = -0.249977111117893;
            sparklineGroup.Points.Negative.Visible = false;
            sparklineGroup.Points.Firstpoint.Visible = false;
            sparklineGroup.Points.Lastpoint.Visible = false;

            //Add chart.
            IShape shape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 9.75, 576.95, 590.25, 237);
            shape.Name = "Chart 3";

            //Add Series.
            ISeries series1 = shape.Chart.SeriesCollection.NewSeries();
            series1.Formula = "=SERIES('Customer Profitability'!$B$34,'Customer Profitability'!$C$33:$E$33,'Customer Profitability'!$C$34:$E$34,1)";
            series1.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent2;

            ISeries series2 = shape.Chart.SeriesCollection.NewSeries();
            series2.Formula = "=SERIES('Customer Profitability'!$B$35,'Customer Profitability'!$C$33:$E$33,'Customer Profitability'!$C$35:$E$35,2)";
            series2.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent4;

            ISeries series3 = shape.Chart.SeriesCollection.NewSeries();
            series3.Formula = "=SERIES('Customer Profitability'!$B$36,'Customer Profitability'!$C$33:$E$33,'Customer Profitability'!$C$36:$E$36,3)";
            series3.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent3;

            ISeries series4 = shape.Chart.SeriesCollection.NewSeries();
            series4.Formula = "=SERIES('Customer Profitability'!$B$37,'Customer Profitability'!$C$33:$E$33,'Customer Profitability'!$C$37:$E$37,4)";
            series4.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent5;

            //Set the char group's Overlap and GapWidth.
            shape.Chart.ColumnGroups[0].Overlap = 0;
            shape.Chart.ColumnGroups[0].GapWidth = 199;

            //Set the chart's title format.
            var chartTitle = shape.Chart.ChartTitle;
            chartTitle.Text = "Summary Metrics per Customer Segment";
            chartTitle.Font.ThemeFont = ThemeFont.Major;
            chartTitle.Font.Color.ObjectThemeColor = ThemeColor.Dark1;
            chartTitle.Font.Size = 20;

            //Set the chart legend's position.
            shape.Chart.Legend.Position = LegendPosition.Top;

            //Set category axis format.
            IAxis category_axis = shape.Chart.Axes.Item(AxisType.Category);
            category_axis.HasTitle = true;
            category_axis.AxisTitle.Text = "SEGMENT";
            category_axis.AxisTitle.Font.Size = 9;
            category_axis.AxisTitle.Font.ThemeFont = ThemeFont.Minor;

            //Set value axis format.
            IAxis value_axis = shape.Chart.Axes.Item(AxisType.Value);
            value_axis.CrossesAt = -200000;
            value_axis.HasMinorGridlines = true;
            value_axis.MinorGridlines.Format.Line.Color.ObjectThemeColor = ThemeColor.Dark1;
            value_axis.MinorGridlines.Format.Line.Color.Brightness = 0.95;

            //Create customize theme.
            Themes themes = new Themes();
            ITheme theme = themes.Add("test");
            theme.ThemeColorScheme[ThemeColor.Dark1].RGB = Color.FromArgb(0, 0, 0);
            theme.ThemeColorScheme[ThemeColor.Light1].RGB = Color.FromArgb(255, 255, 255);
            theme.ThemeColorScheme[ThemeColor.Dark2].RGB = Color.FromArgb(77, 70, 70);
            theme.ThemeColorScheme[ThemeColor.Light2].RGB = Color.FromArgb(255, 251, 239);
            theme.ThemeColorScheme[ThemeColor.Accent1].RGB = Color.FromArgb(255, 225, 132);
            theme.ThemeColorScheme[ThemeColor.Accent2].RGB = Color.FromArgb(102, 173, 166);
            theme.ThemeColorScheme[ThemeColor.Accent3].RGB = Color.FromArgb(131, 172, 121);
            theme.ThemeColorScheme[ThemeColor.Accent4].RGB = Color.FromArgb(254, 191, 102);
            theme.ThemeColorScheme[ThemeColor.Accent5].RGB = Color.FromArgb(219, 112, 87);
            theme.ThemeColorScheme[ThemeColor.Accent6].RGB = Color.FromArgb(165, 115, 137);
            theme.ThemeColorScheme[ThemeColor.Hyperlink].RGB = Color.FromArgb(102, 173, 166);
            theme.ThemeColorScheme[ThemeColor.FollowedHyperlink].RGB = Color.FromArgb(165, 115, 137);
            theme.ThemeFontScheme.Major[FontLanguageIndex.Latin].Name = "Marion";
            theme.ThemeFontScheme.Minor[FontLanguageIndex.Latin].Name = "Marion";

            //Apply the above custom theme.
            workbook.Theme = theme;

            //Set active cell.
            worksheet.Range["B7"].Activate();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelReporting.MovieList" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //------------------Set RowHeight &amp; ColumnWidth----------------
            worksheet.StandardHeight = 43.5;
            worksheet.StandardWidth = 8.43;

            worksheet.Range["1:1"].RowHeight = 171;
            worksheet.Range["2:2"].RowHeight = 12.75;
            worksheet.Range["3:3"].RowHeight = 22.5;
            worksheet.Range["4:7"].RowHeight = 43.75;
            worksheet.Range["A:A"].ColumnWidth = 2.887;
            worksheet.Range["B:B"].ColumnWidth = 8.441;
            worksheet.Range["C:C"].ColumnWidth = 12.777;
            worksheet.Range["D:D"].ColumnWidth = 25.109;
            worksheet.Range["E:E"].ColumnWidth = 12.109;
            worksheet.Range["F:F"].ColumnWidth = 41.664;
            worksheet.Range["G:G"].ColumnWidth = 18.555;
            worksheet.Range["H:H"].ColumnWidth = 11;
            worksheet.Range["I:I"].ColumnWidth = 13.664;
            worksheet.Range["J:J"].ColumnWidth = 15.109;
            worksheet.Range["K:K"].ColumnWidth = 38.887;
            worksheet.Range["L:L"].ColumnWidth = 2.887;


            //------------------------Set Table Values-------------------
            ITable table = worksheet.Tables.Add(worksheet.Range["B3:K7"], true);
            worksheet.Range["B3:K7"].Value = new object[,]
            {
                { "NO.", "YEAR", "TITLE", "REVIEW", "STARRING ACTORS", "DIRECTOR", "GENRE", "RATING", "FORMAT", "COMMENTS" },
                { 1, 1994, "Forrest Gump", "5 Stars", "Tom Hanks, Robin Wright, Gary Sinise", "Robert Zemeckis", "Drama", "PG-13", "DVD", "Based on the 1986 novel of the same name by Winston Groom" },
                { 2, 1946, "It’s a Wonderful Life", "2 Stars", "James Stewart, Donna Reed, Lionel Barrymore ", "Frank Capra", "Drama", "G", "VHS", "Colorized version" },
                { 3, 1988, "Big", "4 Stars", "Tom Hanks, Elizabeth Perkins, Robert Loggia ", "Penny Marshall", "Comedy", "PG", "DVD", "" },
                { 4, 1954, "Rear Window", "3 Stars", "James Stewart, Grace Kelly, Wendell Corey ", "Alfred Hitchcock", "Suspense", "PG", "Blu-ray", "" },
            };


            //-----------------------Set Table style--------------------
            ITableStyle tableStyle = workbook.TableStyles.Add("Movie List");
            workbook.DefaultTableStyle = "Movie List";

            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Interior.Color = Color.White;

            tableStyle.TableStyleElements[TableStyleElementType.FirstRowStripe].Interior.Color = Color.FromArgb(38, 38, 38);

            tableStyle.TableStyleElements[TableStyleElementType.SecondRowStripe].Interior.Color = Color.Black;

            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Font.Color = Color.Black;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders.Color = Color.FromArgb(38, 38, 38);
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Interior.Color = Color.FromArgb(68, 217, 255);
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thick;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.None;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.None;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.None;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.None;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.InsideVertical].LineStyle = BorderLineStyle.None;


            //--------------------------------Set Named Styles---------------------
            IStyle movieListBorderStyle = workbook.Styles.Add("Movie list border");
            movieListBorderStyle.IncludeNumber = true;
            movieListBorderStyle.IncludeAlignment = true;
            movieListBorderStyle.VerticalAlignment = VerticalAlignment.Center;
            movieListBorderStyle.WrapText = true;
            movieListBorderStyle.IncludeFont = true;
            movieListBorderStyle.Font.Name = "Helvetica";
            movieListBorderStyle.Font.Size = 11;
            movieListBorderStyle.Font.Color = Color.White;
            movieListBorderStyle.IncludeBorder = true;
            movieListBorderStyle.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            movieListBorderStyle.Borders[BordersIndex.EdgeBottom].Color = Color.FromArgb(38, 38, 38);
            movieListBorderStyle.IncludePatterns = true;
            movieListBorderStyle.Interior.Color = Color.FromArgb(238, 219, 78);

            IStyle nOStyle = workbook.Styles.Add("NO.");
            nOStyle.IncludeNumber = true;
            nOStyle.IncludeAlignment = true;
            nOStyle.HorizontalAlignment = HorizontalAlignment.Left;
            nOStyle.VerticalAlignment = VerticalAlignment.Center;
            nOStyle.IncludeFont = true;
            nOStyle.Font.Name = "Helvetica";
            nOStyle.Font.Size = 11;
            nOStyle.Font.Color = Color.White;
            nOStyle.IncludeBorder = true;
            nOStyle.IncludePatterns = true;
            nOStyle.Interior.Color = Color.FromArgb(38, 38, 38);

            IStyle reviewStyle = workbook.Styles.Add("Review");
            reviewStyle.IncludeNumber = true;
            reviewStyle.IncludeAlignment = true;
            reviewStyle.VerticalAlignment = VerticalAlignment.Center;
            reviewStyle.IncludeFont = true;
            reviewStyle.Font.Name = "Helvetica";
            reviewStyle.Font.Size = 11;
            reviewStyle.Font.Color = Color.White;
            reviewStyle.IncludeBorder = true;
            reviewStyle.IncludePatterns = true;
            reviewStyle.Interior.Color = Color.FromArgb(38, 38, 38);

            IStyle yearStyle = workbook.Styles.Add("Year");
            yearStyle.IncludeNumber = true;
            yearStyle.IncludeAlignment = true;
            yearStyle.HorizontalAlignment = HorizontalAlignment.Left;
            yearStyle.VerticalAlignment = VerticalAlignment.Center;
            yearStyle.IncludeFont = true;
            yearStyle.Font.Name = "Helvetica";
            yearStyle.Font.Size = 11;
            yearStyle.Font.Color = Color.White;
            yearStyle.IncludeBorder = true;
            yearStyle.IncludePatterns = true;
            yearStyle.Interior.Color = Color.FromArgb(38, 38, 38);

            IStyle heading1Style = workbook.Styles["Heading 1"];
            heading1Style.IncludeAlignment = true;
            heading1Style.VerticalAlignment = VerticalAlignment.Bottom;
            heading1Style.IncludeBorder = true;
            heading1Style.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            heading1Style.Borders[BordersIndex.EdgeBottom].Color = Color.FromArgb(68, 217, 255);
            heading1Style.IncludeFont = true;
            heading1Style.Font.Name = "Helvetica";
            heading1Style.Font.Bold = false;
            heading1Style.Font.Size = 12;
            heading1Style.Font.Color = Color.Black;

            IStyle normalStyle = workbook.Styles["Normal"];
            normalStyle.IncludeNumber = true;
            normalStyle.IncludeAlignment = true;
            normalStyle.VerticalAlignment = VerticalAlignment.Center;
            normalStyle.WrapText = true;
            normalStyle.IncludeFont = true;
            normalStyle.Font.Name = "Helvetica";
            normalStyle.Font.Size = 11;
            normalStyle.Font.Color = Color.White;
            normalStyle.IncludePatterns = true;
            normalStyle.Interior.Color = Color.FromArgb(38, 38, 38);


            //-----------------------------Use NamedStyle--------------------------
            worksheet.SheetView.DisplayGridlines = false;
            worksheet.TabColor = Color.FromArgb(38, 38, 38);
            table.TableStyle = tableStyle;

            worksheet.Range["A2:L2"].Style = movieListBorderStyle;
            worksheet.Range["B3:K3"].Style = heading1Style;
            worksheet.Range["B4:B7"].Style = nOStyle;
            worksheet.Range["C4:C7"].Style = yearStyle;
            worksheet.Range["E4:E7"].Style = reviewStyle;
            worksheet.Range["F4:F7"].IndentLevel = 1;
            worksheet.Range["F4:F7"].HorizontalAlignment = HorizontalAlignment.Left;


            //-----------------------------Add Shapes------------------------------
            //Movie picture
            System.IO.Stream stream = this.GetResourceStream("movie.png");
            IShape pictureShape = worksheet.Shapes.AddPicture(stream, ImageType.PNG, 0, 1, worksheet.Range["A:L"].Width, worksheet.Range["1:1"].Height - 1.5);
            pictureShape.Placement = Placement.Move;

            //Movie list picture
            System.IO.Stream stream2 = this.GetResourceStream("list.png");
            IShape pictureShape2 = worksheet.Shapes.AddPicture(stream2, ImageType.PNG, 1, 0.8, 325.572, 85.51);
            pictureShape2.Placement = Placement.Move;

            //Rounded Rectangular Callout 7
            IShape roundedRectangular = worksheet.Shapes.AddShape(AutoShapeType.RoundedRectangularCallout, 437.5, 22.75, 342, 143);
            roundedRectangular.Name = "Rounded Rectangular Callout 7";
            roundedRectangular.Placement = Placement.Move;
            roundedRectangular.TextFrame.TextRange.Font.Name = "Helvetica";
            roundedRectangular.TextFrame.TextRange.Font.Color.RGB = Color.FromArgb(38, 38, 38);

            roundedRectangular.Fill.Solid();
            roundedRectangular.Fill.Color.RGB = Color.FromArgb(68, 217, 255);
            roundedRectangular.Fill.Transparency = 0;
            roundedRectangular.Line.Solid();
            roundedRectangular.Line.Color.RGB = Color.FromArgb(0, 129, 162);
            roundedRectangular.Line.Weight = 2;
            roundedRectangular.Line.Transparency = 0;

            ITextRange roundedRectangular_p0 = roundedRectangular.TextFrame.TextRange.Paragraphs[0];
            roundedRectangular_p0.Runs.Font.Bold = true;
            roundedRectangular_p0.Runs.Add("TABLE");
            roundedRectangular_p0.Runs.Add(" TIP");

            roundedRectangular.TextFrame.TextRange.Paragraphs.Add("");

            ITextRange roundedRectangular_p2 = roundedRectangular.TextFrame.TextRange.Paragraphs.Add();
            roundedRectangular_p2.Runs.Add("Use the drop down arrows in the table headings to quickly filter your movie list. " +
                "For multiple entry fields, such as Starring Actors,  select the drop down arrow next to the field and enter text in the Search box. " +
                "For example, type Tom Hanks or James Stewart, and then select OK.");

            roundedRectangular.TextFrame.TextRange.Paragraphs.Add("");

            ITextRange roundedRectangular_p4 = roundedRectangular.TextFrame.TextRange.Paragraphs.Add();
            roundedRectangular_p4.Runs.Add("To delete this note, click the edge to select it and then press ");
            roundedRectangular_p4.Runs.Add("Delete");
            roundedRectangular_p4.Runs.Add(".");
            roundedRectangular_p4.Runs[2].Font.Bold = true;

            roundedRectangular.TextFrame.TextRange.Paragraphs.Add("");

            //Add Stright Line Shape
            IShape lineShape = worksheet.Shapes.AddConnector(ConnectorType.Straight, 455.228f, 57.35f, 756.228f, 57.35f);
            lineShape.Line.Solid();
            lineShape.Line.Weight = 3;
            lineShape.Line.Color.RGB = Color.FromArgb(38, 38, 38);
            lineShape.Line.DashStyle = LineDashStyle.SysDot;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelReporting.PersonalAddressBook" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();


            IWorksheet worksheet = workbook.Worksheets[0];


            
            //***************************Set RowHeight &amp; Width****************************
                worksheet.StandardHeight = 30;
                worksheet.Range["3:4"].RowHeight = 30.25;
                worksheet.Range["1:1"].RowHeight = 103.50;
                worksheet.Range["2:2"].RowHeight = 38.25;
                worksheet.Range["A:A"].ColumnWidth = 2.625;
                worksheet.Range["B:B"].ColumnWidth = 22.25;
                worksheet.Range["C:E"].ColumnWidth = 17.25;
                worksheet.Range["F:F"].ColumnWidth = 31.875;
                worksheet.Range["G:G"].ColumnWidth = 22.625;
                worksheet.Range["H:H"].ColumnWidth = 30;
                worksheet.Range["I:I"].ColumnWidth = 20.25;
                worksheet.Range["J:J"].ColumnWidth = 17.625;
                worksheet.Range["K:K"].ColumnWidth = 12.625;
                worksheet.Range["L:L"].ColumnWidth = 37.25;
                worksheet.Range["M:M"].ColumnWidth = 2.625;

            

            //*******************************Set Table Value &amp; Formulas*************************************
            ITable table = worksheet.Tables.Add(worksheet.Range["B2:L4"], true);
            worksheet.Range["B2:L4"].Value = new object[,]
            {
                { "NAME", "WORK", "CELL", "HOME", "EMAIL", "BIRTHDAY", "ADDRESS", "CITY", "STATE", "ZIP", "NOTE" },
                { "Kim Abercrombie", 1235550123, 1235550123, 1235550123, "someone@example.com", null, "123 N. Maple", "Cherryville", "WA", 98031, "" },
                { "John Smith", 3215550123, "", "", "someone@example.com", null, "456 E. Aspen", "", "", "", "" },
            };
            worksheet.Range["B1"].Value = "ADDRESS BOOK";
            worksheet.Range["G3"].Formula = "=TODAY()";
            worksheet.Range["G4"].Formula = "=TODAY()+5";

            

            //****************************Set Table Style********************************
            ITableStyle tableStyle = workbook.TableStyles.Add("Personal Address Book");
            workbook.DefaultTableStyle = "Personal Address Book";

            //Set WholeTable element style.
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders.Color = Color.FromArgb(179, 35, 23);
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideVertical].LineStyle = BorderLineStyle.Thin;
            tableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.Thin;

            //Set FirstColumn element style.
            tableStyle.TableStyleElements[TableStyleElementType.FirstColumn].Font.Bold = true;

            //Set SecondColumns element style.
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders.Color = Color.FromArgb(179, 35, 23);
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thick;
            tableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            


            //***********************************Set Named Styles*****************************
            IStyle normalStyle = workbook.Styles["Normal"];
            normalStyle.Font.Name = "Arial";
            normalStyle.Font.Color = Color.FromArgb(179, 35, 23);
            normalStyle.HorizontalAlignment = HorizontalAlignment.Left;
            normalStyle.IndentLevel = 1;
            normalStyle.VerticalAlignment = VerticalAlignment.Center;
            normalStyle.WrapText = true;

            IStyle titleStyle = workbook.Styles["Title"];
            titleStyle.IncludeAlignment = true;
            titleStyle.HorizontalAlignment = HorizontalAlignment.Left;
            titleStyle.VerticalAlignment = VerticalAlignment.Center;
            titleStyle.Font.Name = "Arial";
            titleStyle.Font.Bold = true;
            titleStyle.Font.Size = 72;
            titleStyle.Font.Color = Color.FromArgb(179, 35, 23);

            IStyle heading1Style = workbook.Styles["Heading 1"];
            heading1Style.IncludeBorder = false;
            heading1Style.Font.Name = "Arial";
            heading1Style.Font.Size = 18;
            heading1Style.Font.Color = Color.FromArgb(179, 35, 23);

            IStyle dataStyle = workbook.Styles.Add("Data");
            dataStyle.IncludeNumber = true;
            dataStyle.NumberFormat = "m/d/yyyy";

            IStyle phoneStyle = workbook.Styles.Add("Phone");
            phoneStyle.IncludeNumber = true;
            phoneStyle.NumberFormat = "[&lt;=9999999]###-####;(###) ###-####";



            //****************************************Use NamedStyle**************************
            worksheet.SheetView.DisplayGridlines = false;
            worksheet.Range["B2:L2"].Interior.Color = Color.FromArgb(217, 217, 217);
            worksheet.Range["B3:B4"].Font.Bold = true;
            worksheet.Range["2:2"].HorizontalAlignment = HorizontalAlignment.Left;

            table.TableStyle = tableStyle;
            worksheet.Range["B1"].Style = titleStyle;
            worksheet.Range["B2:L2"].Style = heading1Style;
            worksheet.Range["C3:E4"].Style = phoneStyle;
            worksheet.Range["G3:G4"].Style = dataStyle;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelReporting.PersonalNetWorthCalculator" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //-------------------------Set RowHeight &amp; Width-----------------------------------
            worksheet.StandardHeight = 30;
            worksheet.StandardWidth = 8.43;

            worksheet.Range["1:1"].RowHeight = 278.25;
            worksheet.Range["2:4"].RowHeight = 30.25;
            worksheet.Range["8:8"].RowHeight = 55.5;
            worksheet.Range["9:30"].RowHeight = 30.25;
            worksheet.Range["33:33"].RowHeight = 55.5;
            worksheet.Range["34:44"].RowHeight = 43.5;
            worksheet.Range["A:A"].ColumnWidth = 2.777;
            worksheet.Range["B:B"].ColumnWidth = 32.887;
            worksheet.Range["C:C"].ColumnWidth = 24.219;
            worksheet.Range["D:D"].ColumnWidth = 10.109;
            worksheet.Range["E:E"].ColumnWidth = 61.332;
            worksheet.Range["F:F"].ColumnWidth = 2.777;


            //-------------------------Set Table Value &amp; Formulas-------------------------------
            ITable assetsTable = worksheet.Tables.Add(worksheet.Range["B9:D30"], true);
            assetsTable.Name = "Assets";
            worksheet.Range["B8"].Value = "Assets";
            worksheet.Range["B9:D30"].Value = new object[,]
            {
                { "Category", "Item", "Value" },
                { "Real Estate", "Home", 560000 },
                { "Real Estate", "Other", 255000 },
                { "Investments", "Retirement accounts", 98000 },
                { "Investments", "Stocks", 53000 },
                { "Investments", "Bonds", 25000 },
                { "Investments", "Mutual funds", 33000 },
                { "Investments", "CDs", 74000 },
                { "Investments", "Bullion", 20000 },
                { "Investments", "Trust funds", 250000 },
                { "Investments", "Health savings account", 18000 },
                { "Investments", "Face value of life insurance policy", 85000 },
                { "Investments", "Other", 20000 },
                { "Cash", "Checking accounts", 14500 },
                { "Cash", "Savings accounts", 5000 },
                { "Cash", "Other", 2000 },
                { "Personal Property", "Cars", 55000 },
                { "Personal Property", "Other vehicles", 85000 },
                { "Personal Property", "Furnishings", 100000 },
                { "Personal Property", "Collectibles", 50000 },
                { "Personal Property", "Jewelry", 60000 },
                { "Personal Property", "Other luxury goods", 40000 },
            };

            ITable debtsTable = worksheet.Tables.Add(worksheet.Range["B34:C44"], true);
            debtsTable.Name = "Debts";
            worksheet.Range["B33"].Value = "Debts";
            worksheet.Range["B34:C44"].Value = new object[,]
            {
                { "Category", "Value" },
                { "Mortgages", 400000 },
                { "Home equity loans", 50000 },
                { "Car loans", 30000 },
                { "Personal loans", 0 },
                { "Credit cards", 0 },
                { "Student loans", 10000 },
                { "Loans against investments", 20000 },
                { "Life insurance loans", 5000 },
                { "Other installment loans", 10000 },
                { "Other debts", 50000 },
            };

            worksheet.Range["B1:C1"].Merge();
            worksheet.Range["B1"].Value = "Personal\r\nNet\r\nWorth";
            worksheet.Range["B2"].Formula = "=\"Total \"&amp;TotalAssetsLabel";
            worksheet.Range["B3"].Formula = "=\"Total \"&amp;TotalDebtsLabel";
            worksheet.Range["B4"].Formula = "=NetWorthLabel";
            worksheet.Range["C2"].Formula = "=TotalAssets";
            worksheet.Range["C3"].Formula = "=TotalDebts";
            worksheet.Range["C4"].Formula = "=NetWorth";

            worksheet.Names.Add("TotalAssets", "=SUM(Assets[Value])");
            worksheet.Names.Add("TotalDebts", "=SUM(Debts[Value])");
            worksheet.Names.Add("NetWorth", "=TotalAssets-TotalDebts");
            worksheet.Names.Add("TotalAssetsLabel", "=Sheet1!$B$8");
            worksheet.Names.Add("TotalDebtsLabel", "=Sheet1!$B$33");
            worksheet.Names.Add("NetWorthLabel", "=\"Net Worth\"");


            //---------------------------Set Table Style---------------------------
            ITableStyle assetsTableStyle = workbook.TableStyles.Add("Assets");
            workbook.DefaultTableStyle = "Assets";
            assetsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Font.Color = Color.FromArgb(64, 64, 64);
            assetsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders.Color = Color.FromArgb(128, 128, 128);
            assetsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.Dotted;
            assetsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thin;
            assetsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.None;
            assetsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.None;
            assetsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.None;
            assetsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideVertical].LineStyle = BorderLineStyle.None;

            assetsTableStyle.TableStyleElements[TableStyleElementType.SecondRowStripe].Interior.Color = Color.White;
            assetsTableStyle.TableStyleElements[TableStyleElementType.SecondRowStripe].StripeSize = 1;

            assetsTableStyle.TableStyleElements[TableStyleElementType.LastColumn].Font.Bold = true;
            assetsTableStyle.TableStyleElements[TableStyleElementType.LastColumn].Font.Color = Color.FromArgb(61, 125, 137);
            assetsTableStyle.TableStyleElements[TableStyleElementType.LastColumn].Interior.Color = Color.White;

            assetsTableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Interior.Color = Color.FromArgb(61, 125, 137);


            ITableStyle debtsTableStyle = workbook.TableStyles.Add("Debts");
            debtsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Font.Color = Color.FromArgb(64, 64, 64);
            debtsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders.Color = Color.FromArgb(128, 128, 128);
            debtsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.Dotted;
            debtsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thin;
            debtsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.None;
            debtsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.None;
            debtsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.None;
            debtsTableStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideVertical].LineStyle = BorderLineStyle.None;

            debtsTableStyle.TableStyleElements[TableStyleElementType.SecondRowStripe].Interior.Color = Color.White;
            debtsTableStyle.TableStyleElements[TableStyleElementType.SecondRowStripe].StripeSize = 1;

            debtsTableStyle.TableStyleElements[TableStyleElementType.LastColumn].Font.Bold = true;
            debtsTableStyle.TableStyleElements[TableStyleElementType.LastColumn].Font.Color = Color.FromArgb(146, 75, 12);
            debtsTableStyle.TableStyleElements[TableStyleElementType.LastColumn].Interior.Color = Color.White;

            debtsTableStyle.TableStyleElements[TableStyleElementType.HeaderRow].Interior.Color = Color.FromArgb(218, 113, 18);


            //----------------------------Set Named Styles-------------------------
            IStyle normalStyle = workbook.Styles["Normal"];
            normalStyle.Font.Name = "Century Gothic";
            normalStyle.Font.Size = 12;
            normalStyle.Font.Color = Color.FromArgb(64, 64, 64);
            normalStyle.Interior.Color = Color.FromArgb(243, 243, 236);
            normalStyle.Interior.PatternColor = Color.FromArgb(243, 243, 236);
            normalStyle.HorizontalAlignment = HorizontalAlignment.Left;
            normalStyle.IndentLevel = 1;
            normalStyle.VerticalAlignment = VerticalAlignment.Center;
            normalStyle.WrapText = true;

            IStyle titleStyle = workbook.Styles["Title"];
            titleStyle.IncludeAlignment = true;
            titleStyle.VerticalAlignment = VerticalAlignment.Center;
            titleStyle.WrapText = true;
            titleStyle.Font.Name = "Century Gothic";
            titleStyle.Font.Size = 66;
            titleStyle.Font.Color = Color.FromArgb(64, 64, 64);
            titleStyle.IncludePatterns = true;
            titleStyle.Interior.Color = Color.FromArgb(243, 243, 236);

            IStyle heading1Style = workbook.Styles["Heading 1"];
            heading1Style.IncludeAlignment = true;
            heading1Style.HorizontalAlignment = HorizontalAlignment.Left;
            heading1Style.IndentLevel = 4;
            heading1Style.VerticalAlignment = VerticalAlignment.Center;
            heading1Style.Font.Name = "Century Gothic";
            heading1Style.Font.Bold = false;
            heading1Style.Font.Size = 16;
            heading1Style.Font.Color = Color.FromArgb(64, 64, 64);
            heading1Style.IncludeBorder = false;
            heading1Style.IncludePatterns = true;
            heading1Style.Interior.Color = Color.FromArgb(243, 243, 236);

            IStyle heading2Style = workbook.Styles["Heading 2"];
            heading2Style.IncludeNumber = true;
            heading2Style.NumberFormat = "$#,##0";
            heading2Style.IncludeAlignment = true;
            heading2Style.HorizontalAlignment = HorizontalAlignment.Right;
            heading2Style.IndentLevel = 2;
            heading2Style.VerticalAlignment = VerticalAlignment.Center;
            heading2Style.Font.Name = "Century Gothic";
            heading2Style.Font.Size = 16;
            heading2Style.Font.Color = Color.FromArgb(64, 64, 64);
            heading2Style.IncludeBorder = false;
            heading2Style.IncludePatterns = true;
            heading2Style.Interior.Color = Color.FromArgb(243, 243, 236);

            IStyle heading3Style = workbook.Styles["Heading 3"];
            heading3Style.IncludeAlignment = true;
            heading3Style.HorizontalAlignment = HorizontalAlignment.Left;
            heading3Style.VerticalAlignment = VerticalAlignment.Bottom;
            heading3Style.IncludeBorder = false;
            heading3Style.Font.Name = "Century Gothic";
            heading3Style.Font.Bold = false;
            heading3Style.Font.Size = 27;
            heading3Style.Font.Color = Color.FromArgb(64, 64, 64);
            heading3Style.IncludePatterns = true;
            heading3Style.Interior.Color = Color.FromArgb(243, 243, 236);

            IStyle heading4Style = workbook.Styles["Heading 4"];
            heading4Style.Font.Name = "Century Gothic";
            heading4Style.Font.Size = 16;
            heading4Style.Font.Color = Color.White;
            heading4Style.Font.Bold = false;

            IStyle currencyStyle = workbook.Styles["Currency"];
            currencyStyle.NumberFormat = "$#,##0";
            currencyStyle.IncludeAlignment = true;
            currencyStyle.HorizontalAlignment = HorizontalAlignment.Right;
            currencyStyle.IndentLevel = 1;
            currencyStyle.VerticalAlignment = VerticalAlignment.Center;
            currencyStyle.IncludeFont = true;
            currencyStyle.Font.Bold = true;
            currencyStyle.Font.Name = "Century Gothic";
            currencyStyle.Font.Size = 12;


            //----------------------------------Use Style---------------------------
            assetsTable.TableStyle = assetsTableStyle;
            debtsTable.TableStyle = debtsTableStyle;

            worksheet.SheetView.DisplayGridlines = false;
            worksheet.Range["B2:B4"].Style = heading1Style;
            worksheet.Range["C2:C4"].Style = heading2Style;
            worksheet.Range["B9:D9"].Style = heading4Style;
            worksheet.Range["D10:D30"].Style = currencyStyle;
            worksheet.Range["D10:D30"].Font.Color = Color.FromArgb(61, 125, 137);

            worksheet.Range["B34:C34"].Style = heading4Style;
            worksheet.Range["C35:C44"].Style = currencyStyle;
            worksheet.Range["C35:C44"].Font.Color = Color.FromArgb(218, 113, 18);
            worksheet.Range["B1"].Style = titleStyle;
            worksheet.Range["B8"].Style = heading3Style;
            worksheet.Range["B33"].Style = heading3Style;

            worksheet.Range["B3:C3"].Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Hair;
            worksheet.Range["B3:C3"].Borders[BordersIndex.EdgeTop].Color = Color.FromArgb(128, 128, 128);
            worksheet.Range["B3:C3"].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Hair;
            worksheet.Range["B3:C3"].Borders[BordersIndex.EdgeBottom].Color = Color.FromArgb(128, 128, 128);


            //--------------------------------Add Shape--------------------------------
            IShape recShape1 = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 17.81, 282.75, 20.963, 21.75);
            recShape1.Line.Color.ColorType = SolidColorType.None;
            recShape1.Fill.Color.RGB= Color.FromArgb(60, 126, 138);
            IShape recShape2 = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 17.81, 312.75, 20.963, 21.75);
            recShape2.Line.Color.ColorType = SolidColorType.None;
            recShape2.Fill.Color.RGB = Color.FromArgb(218, 118, 13);
            IShape recShape3 = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 17.81, 342.75, 20.963, 21.75);
            recShape3.Line.Color.ColorType = SolidColorType.None;
            recShape3.Fill.Color.RGB = Color.FromArgb(84, 138, 57);

            IShape pieShape = worksheet.Shapes.AddChart(ChartType.Pie, 442.5, 26.25, 346, 350.25);
            pieShape.Chart.HasLegend = false;
            pieShape.Chart.HasTitle = false;
            pieShape.Chart.ChartGroups[0].FirstSliceAngle = 180;
            pieShape.Placement = Placement.Move;

            IChartArea chartArea = pieShape.Chart.ChartArea;
            chartArea.Format.Fill.Transparency = 1;
            chartArea.Format.Line.Transparency = 1;

            ISeries chartSeries = pieShape.Chart.SeriesCollection.NewSeries();
            chartSeries.Formula = "=SERIES('Sheet1'!$B$2:$B$4,,'Sheet1'!$C$2:$C$4,1)";

            chartSeries.HasDataLabels = true;
            chartSeries.DataLabels.Font.Name = "Century Gothic";
            chartSeries.DataLabels.Font.Size = 20;
            chartSeries.DataLabels.Font.Bold = true;
            chartSeries.DataLabels.Font.Color.RGB = Color.White;
            chartSeries.DataLabels.ShowValue = false;
            chartSeries.DataLabels.ShowPercentage = true;
            chartSeries.DataLabels.Position = DataLabelPosition.Center;

            chartSeries.Points[0].Format.Fill.Color.RGB = Color.FromArgb(60, 126, 138);
            chartSeries.Points[1].Format.Fill.Color.RGB = Color.FromArgb(218, 118, 13);
            chartSeries.Points[2].Format.Fill.Color.RGB = Color.FromArgb(84, 138, 57);
            chartSeries.Explosion = 1;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelReporting.ToDoListWithProgressTracker" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                { "TASK", "PRIORITY", "STATUS", "START DATE", "DUE DATE","% COMPLETE", "DONE?", "NOTES" },
                { "First Thing I Need To Do", "Normal", "Not Started", null, null, 0, null, null },
                { "Other Thing I Need To Finish", "High", "In Progress", null , null, 0.5, null, null},
                { "Something Else To Get Done", "Low", "Complete",null, null, 1, null, null },
                { "More Errands And Things", "Normal", "In Progress", null, null, 0.75, null, null },
                { "So Much To Get Done This Week", "High", "In Progress", null, null, 0.25, null, null }
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Name = "To-Do List";
            worksheet.TabColor = Color.FromArgb(148, 112, 135);
            worksheet.SheetView.DisplayGridlines = false;

            //Set Value.
            worksheet.Range["B1"].Value = "To-Do List";
            worksheet.Range["B2:I7"].Value = data;

            //Set formula.
            worksheet.Range["E3"].Formula = "=TODAY()";
            worksheet.Range["E4"].Formula = "=TODAY()-30";
            worksheet.Range["E5"].Formula = "=TODAY()-23";
            worksheet.Range["E6"].Formula = "=TODAY()-15";
            worksheet.Range["E7"].Formula = "=TODAY()-5";

            //Change the range's RowHeight and ColumnWidth.
            worksheet.StandardHeight = 30;
            worksheet.StandardWidth = 8.88671875;
            worksheet.Range["1:1"].RowHeight = 72.75;
            worksheet.Range["2:2"].RowHeight = 33;
            worksheet.Range["3:7"].RowHeight = 30.25;
            worksheet.Range["A:A"].ColumnWidth = 2.77734375;
            worksheet.Range["B:B"].ColumnWidth = 29.109375;
            worksheet.Range["C:G"].ColumnWidth = 16.77734375;
            worksheet.Range["H:H"].ColumnWidth = 10.77734375;
            worksheet.Range["I:I"].ColumnWidth = 29.6640625;
            worksheet.Range["J:J"].ColumnWidth = 2.77734375;

            //Modify the build in name styles.
            var nameStyle_Normal = workbook.Styles["Normal"];
            nameStyle_Normal.VerticalAlignment = VerticalAlignment.Center;
            nameStyle_Normal.WrapText = true;
            nameStyle_Normal.Font.ThemeFont = ThemeFont.Minor;
            nameStyle_Normal.Font.ThemeColor = ThemeColor.Dark1;
            nameStyle_Normal.Font.TintAndShade = 0.25;

            var nameStyle_Title = workbook.Styles["Title"];
            nameStyle_Title.HorizontalAlignment = HorizontalAlignment.General;
            nameStyle_Title.VerticalAlignment = VerticalAlignment.Bottom;
            nameStyle_Title.Font.ThemeFont = ThemeFont.Minor;
            nameStyle_Title.Font.Bold = true;
            nameStyle_Title.Font.Size = 38;
            nameStyle_Title.Font.ThemeColor = ThemeColor.Dark1;
            nameStyle_Title.Font.TintAndShade = 0.249946592608417;
            nameStyle_Title.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            nameStyle_Title.Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Dark1;
            nameStyle_Title.IncludeAlignment = true;
            nameStyle_Title.IncludeBorder = true;

            var nameStyle_Percent = workbook.Styles["Percent"];
            nameStyle_Percent.HorizontalAlignment = HorizontalAlignment.Right;
            nameStyle_Percent.IndentLevel = 1;
            nameStyle_Percent.VerticalAlignment = VerticalAlignment.Center;
            nameStyle_Percent.IncludeAlignment = true;

            var nameStyle_Heading_1 = workbook.Styles["Heading 1"];
            nameStyle_Heading_1.HorizontalAlignment = HorizontalAlignment.Left;
            nameStyle_Heading_1.VerticalAlignment = VerticalAlignment.Bottom;
            nameStyle_Heading_1.Font.ThemeFont = ThemeFont.Major;
            nameStyle_Heading_1.Font.Bold = false;
            nameStyle_Heading_1.Font.Size = 11;
            nameStyle_Heading_1.Font.ThemeColor = ThemeColor.Dark1;
            nameStyle_Heading_1.Font.TintAndShade = 0.249946592608417;
            nameStyle_Heading_1.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.None;
            nameStyle_Heading_1.IncludeNumber = true;
            nameStyle_Heading_1.IncludeAlignment = true;
            nameStyle_Heading_1.IncludeBorder = false;

            var nameStyle_Heading_2 = workbook.Styles["Heading 2"];
            nameStyle_Heading_2.HorizontalAlignment = HorizontalAlignment.Right;
            nameStyle_Heading_2.IndentLevel = 2;
            nameStyle_Heading_2.VerticalAlignment = VerticalAlignment.Bottom;
            nameStyle_Heading_2.Font.ThemeFont = ThemeFont.Major;
            nameStyle_Heading_2.Font.Bold = false;
            nameStyle_Heading_2.Font.Size = 11;
            nameStyle_Heading_2.Font.ThemeColor = ThemeColor.Dark2;
            nameStyle_Heading_2.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.None;
            nameStyle_Heading_2.IncludeNumber = true;
            nameStyle_Heading_2.IncludeAlignment = true;

            //Create custom name styes.
            IStyle nameStyle_Done = workbook.Styles.Add("Done");
            nameStyle_Done.NumberFormat = "\"Done\";\"\";\"\"";
            nameStyle_Done.HorizontalAlignment = HorizontalAlignment.Center;
            nameStyle_Done.VerticalAlignment = VerticalAlignment.Center;
            nameStyle_Done.Font.ThemeFont = ThemeFont.Minor;
            nameStyle_Done.Font.ThemeColor = ThemeColor.Light1;

            IStyle nameStyle_Date = workbook.Styles.Add("Date");
            nameStyle_Date.NumberFormat = "yyyy/m/d";
            nameStyle_Date.HorizontalAlignment = HorizontalAlignment.Right;
            nameStyle_Date.VerticalAlignment = VerticalAlignment.Center;
            nameStyle_Date.Font.ThemeFont = ThemeFont.Minor;
            nameStyle_Date.Font.ThemeColor = ThemeColor.Dark1;
            nameStyle_Date.Font.TintAndShade = 0.249946592608417;
            nameStyle_Date.IncludeBorder = false;
            nameStyle_Date.IncludePatterns = false;

            //Apply the above name styles on ranges.
            worksheet.Range["B1:I1"].Style = workbook.Styles["Title"];
            worksheet.Range["B2:D2"].Style = workbook.Styles["Heading 1"];
            worksheet.Range["E2:F2"].Style = workbook.Styles["Heading 2"];
            worksheet.Range["G2"].Style = workbook.Styles["Heading 1"];
            worksheet.Range["H2:H7"].Style = workbook.Styles["Done"];
            worksheet.Range["I2"].Style = workbook.Styles["Heading 1"];
            worksheet.Range["E3:F7"].Style = workbook.Styles["Date"];
            worksheet.Range["G3:G7"].Style = workbook.Styles["Percent"];

            //Add one custom table style.
            ITableStyle style = workbook.TableStyles.Add("To-do List");
            style.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thin;
            style.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Light1;
            style.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.EdgeBottom].TintAndShade = -0.14993743705557422;
            style.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.Thin;
            style.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].ThemeColor = ThemeColor.Light1;
            style.TableStyleElements[TableStyleElementType.WholeTable].Borders[BordersIndex.InsideHorizontal].TintAndShade = -0.14993743705557422;

            //Create a table and apply the above table style.
            ITable table = worksheet.Tables.Add(worksheet.Range["B2:I7"], true);
            table.Name = "ToDoList";
            table.TableStyle = style;

            //Use table formula in table range.
            worksheet.Range["F3"].Formula = "=[@[START DATE]]+7";
            worksheet.Range["F4"].Formula = "=[@[START DATE]]+35";
            worksheet.Range["F5"].Formula = "=[@[START DATE]]+10";
            worksheet.Range["F6"].Formula = "=[@[START DATE]]+36";
            worksheet.Range["F7"].Formula = "=[@[START DATE]]+14";
            worksheet.Range["H3:H7"].Formula = "=--([@[% COMPLETE]]&gt;=1)";

            //Add a expression rule.
            IFormatCondition expression = worksheet.Range["B3:I7"].FormatConditions.Add(FormatConditionType.Expression, FormatConditionOperator.Between, "=AND($G3=0,$G3&lt;&gt;\"\")", null) as IFormatCondition;
            expression.Interior.ThemeColor = ThemeColor.Light1;
            expression.Interior.TintAndShade = -0.0499893185216834;

            //Add a data bar rule.
            IDataBar dataBar = worksheet.Range["G3:G7"].FormatConditions.AddDatabar();
            dataBar.BarFillType = DataBarFillType.Solid;
            dataBar.BarColor.ThemeColor = ThemeColor.Accent1;
            dataBar.BarColor.TintAndShade = 0.39997558519241921;

            //Add an icon set rule.
            IIconSetCondition iconSet = worksheet.Range["H3:H7"].FormatConditions.AddIconSetCondition();
            iconSet.IconSet = workbook.IconSets[IconSetType.Icon3Symbols];
            iconSet.IconCriteria[2].Operator = FormatConditionOperator.GreaterEqual;
            iconSet.IconCriteria[2].Value = 1;
            iconSet.IconCriteria[2].Type = ConditionValueTypes.Number;
            iconSet.IconCriteria[1].Operator = FormatConditionOperator.GreaterEqual;
            iconSet.IconCriteria[1].Value = 0;
            iconSet.IconCriteria[1].Type = ConditionValueTypes.Number;

            //Add a cell value rule.
            IFormatCondition cellValue = worksheet.Range["H3:H7"].FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.NotEqual, 1) as IFormatCondition;
            cellValue.StopIfTrue = true;

            //Create list validations.
            worksheet.Range["C3:C7"].Validation.Add(ValidationType.List, ValidationAlertStyle.Warning, ValidationOperator.Between, "Low, Normal, High", null);
            IValidation validation = worksheet.Range["C3:C7"].Validation;
            validation.ErrorMessage = "Select entry from the list. Select CANCEL, then press ALT+DOWN ARROW to navigate the list. Select ENTER to make selection";

            worksheet.Range["D3:D7"].Validation.Add(ValidationType.List, ValidationAlertStyle.Warning, ValidationOperator.Between, "Not Started,In Progress, Deferred, Complete", null);
            validation = worksheet.Range["D3:D7"].Validation;
            validation.ErrorMessage = "Select entry from the list. Select CANCEL, then press ALT+DOWN ARROW to navigate the list. Select ENTER to make selection";

            worksheet.Range["G3:G7"].Validation.Add(ValidationType.List, ValidationAlertStyle.Warning, ValidationOperator.Between, "0%,25%,50%,75%,100%", null);
            validation = worksheet.Range["G3:G7"].Validation;
            validation.ErrorMessage = "Select entry from the list. Select CANCEL, then press ALT+DOWN ARROW to navigate the list. Select ENTER to make selection";

            //Create custom validation.
            worksheet.Range["F3:F7"].Validation.Add(ValidationType.Custom, ValidationAlertStyle.Warning, ValidationOperator.Between, "=F3&gt;=E3", null);
            validation = worksheet.Range["F3:F7"].Validation;
            validation.ErrorMessage = "The Due Date must be greater than or equal to the Start Date. Select YES to keep the value, NO to retry or CANCEL to clear the entry";

            //Create none validations, set inputmessage.
            worksheet.Range["B2"].Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null);
            validation = worksheet.Range["B2"].Validation;
            validation.InputMessage = "Enter Task in this column under this heading. Use heading filters to find specific entries";

            worksheet.Range["C2"].Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null);
            validation = worksheet.Range["C2"].Validation;
            validation.InputMessage = "Select Priority in this column under this heading. Press ALT+DOWN ARROW to open the drop-down list, then ENTER to make selection";

            worksheet.Range["D2"].Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null);
            validation = worksheet.Range["D2"].Validation;
            validation.InputMessage = "Select Status in this column under this heading.  Press ALT+DOWN ARROW to open the drop-down list, then ENTER to make selection";

            worksheet.Range["E2"].Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null);
            validation = worksheet.Range["E2"].Validation;
            validation.InputMessage = "Enter Start Date in this column under this heading";

            worksheet.Range["F2"].Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null);
            validation = worksheet.Range["F2"].Validation;
            validation.InputMessage = "Enter Due Date in this column under this heading";

            worksheet.Range["G2"].Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null);
            validation = worksheet.Range["G2"].Validation;
            validation.InputMessage = "Select % Complete in this column. Press ALT+DOWN ARROW to open the drop-down list, then ENTER to make selection. A status bar indicates progress toward completion";

            worksheet.Range["H2"].Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null);
            validation = worksheet.Range["H2"].Validation;
            validation.InputMessage = "Icon indicator for task completion in this column under this heading is automatically updated as tasks complete";

            worksheet.Range["I2"].Validation.Add(ValidationType.None, ValidationAlertStyle.Stop, ValidationOperator.Between, null, null);
            validation = worksheet.Range["I2"].Validation;
            validation.InputMessage = "Enter Notes in this column under this heading";

            //Create customize theme.
            Themes themes = new Themes();
            ITheme theme = themes.Add("test");
            theme.ThemeColorScheme[ThemeColor.Dark1].RGB = Color.FromArgb(0, 0, 0);
            theme.ThemeColorScheme[ThemeColor.Light1].RGB = Color.FromArgb(255, 255, 255);
            theme.ThemeColorScheme[ThemeColor.Dark2].RGB = Color.FromArgb(37, 28, 34);
            theme.ThemeColorScheme[ThemeColor.Light2].RGB = Color.FromArgb(240, 248, 246);
            theme.ThemeColorScheme[ThemeColor.Accent1].RGB = Color.FromArgb(148, 112, 135);
            theme.ThemeColorScheme[ThemeColor.Accent2].RGB = Color.FromArgb(71, 166, 181);
            theme.ThemeColorScheme[ThemeColor.Accent3].RGB = Color.FromArgb(234, 194, 53);
            theme.ThemeColorScheme[ThemeColor.Accent4].RGB = Color.FromArgb(107, 192, 129);
            theme.ThemeColorScheme[ThemeColor.Accent5].RGB = Color.FromArgb(233, 115, 61);
            theme.ThemeColorScheme[ThemeColor.Accent6].RGB = Color.FromArgb(251, 147, 59);
            theme.ThemeColorScheme[ThemeColor.Hyperlink].RGB = Color.FromArgb(71, 166, 181);
            theme.ThemeColorScheme[ThemeColor.FollowedHyperlink].RGB = Color.FromArgb(148, 112, 135);
            theme.ThemeFontScheme.Major[FontLanguageIndex.Latin].Name = "Helvetica Neue";
            theme.ThemeFontScheme.Minor[FontLanguageIndex.Latin].Name = "Bookman Old Style";

            //Apply the above custom theme.
            workbook.Theme = theme;

            //Set active cell.
            worksheet.Range["G4"].Activate();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelTemplates.BloodSugarTracker" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file Monthly business budget.xlsx from resource
            var fileStream = this.GetResourceStream("xlsx\\Blood sugar tracker.xlsx");

            workbook.Open(fileStream);

            var worksheet = workbook.ActiveSheet;

            //insert 19 rows  
            worksheet.Range["1:19"].Insert();

            //Change the rows(2~5) RowHeight
            worksheet.Rows[1].RowHeight = 34.5;
            worksheet.Rows[2].RowHeight = 15.75;
            worksheet.Rows[3].RowHeight = 19.5;
            worksheet.Rows[4].RowHeight = 15.75;

            //Set values
            worksheet.Range["B2"].Value = "BLOOD SUGAR TRACKING";
            worksheet.Range["B4"].Value = "CHARTED PROGRESS";

            //Set Styles
            worksheet.Range["B2"].Font.ThemeFont = ThemeFont.Major;
            worksheet.Range["B2"].Font.Size = 26;
            worksheet.Range["B2"].Font.ThemeColor = ThemeColor.Dark1;
            worksheet.Range["B2"].Font.TintAndShade = 0.34998626667073579;
            worksheet.Range["B2:D2"].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            worksheet.Range["B2:D2"].Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Accent1;

            worksheet.Range["B4"].Font.ThemeFont = ThemeFont.Major;
            worksheet.Range["B4"].Font.Bold = true;
            worksheet.Range["B4"].Font.Size = 14;
            worksheet.Range["B4"].Font.ThemeColor = ThemeColor.Dark1;
            worksheet.Range["B4"].Font.TintAndShade = 0.34998626667073579;
            worksheet.Range["B4:D4"].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            worksheet.Range["B4:D4"].Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Accent2;

            //Add chart
            IShape shape = worksheet.Shapes.AddChart(ChartType.Line, 9.75, 100.5, 365, 203.25);
            shape.Name = "BloodSugarProgress";

            //Add Series.
            ISeries series1 = shape.Chart.SeriesCollection.NewSeries();
            series1.Formula = "=SERIES('BLOOD SUGAR DATA'!$C$23,'BLOOD SUGAR DATA'!$B$24:$B$45,'BLOOD SUGAR DATA'!$C$24:$C$45,1)";
            series1.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent1;
            series1.Format.Line.Weight = 2.5;

            ISeries series2 = shape.Chart.SeriesCollection.NewSeries();
            series2.Formula = "=SERIES('BLOOD SUGAR DATA'!$D$23,'BLOOD SUGAR DATA'!$B$24:$B$45,'BLOOD SUGAR DATA'!$D$24:$D$45,2)";
            series2.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent2;
            series2.Format.Line.Weight = 2.5;

            //Hidden the chart title
            shape.Chart.HasTitle = false;

            //Hidden the category axis
            IAxis category_axis = shape.Chart.Axes.Item(AxisType.Category);
            category_axis.Visible = false;

            //Set value axis units
            IAxis value_axis = shape.Chart.Axes.Item(AxisType.Value);
            value_axis.MaximumScale = 140;
            value_axis.MinimumScale = 50;
            value_axis.MajorUnit = 10;
            value_axis.MinorUnit = 2;

            //Add a rectange shape
            IShape shape1 = worksheet.Shapes.AddShape(AutoShapeType.Rectangle, 385, 84.75, 102, 218.25);
            shape1.Fill.Solid();
            shape1.Fill.Color.ObjectThemeColor = ThemeColor.Accent1;
            shape1.Fill.Color.Brightness = 0.6;

            //set shape's border to no line
            shape1.Line.Color.ColorType = SolidColorType.None;

            //set shape rich text
            ITextRange shape1_p1 = shape1.TextFrame.TextRange.Paragraphs[0];
            shape1_p1.Text = "INFO:";
            shape1_p1.Runs.Add(" Blood sugar levels will vary from person-to-person.  There are many factors to keeping it within your normal range and isn't based on sugar alone.  Consult a physician for additional information or follow-up.");

            ITextRange shape1_p2 = shape1.TextFrame.TextRange.Paragraphs.Add("");
            ITextRange shape1_p3 = shape1.TextFrame.TextRange.Paragraphs.Add("More info can be found here:");
            ITextRange shape1_p4 = shape1.TextFrame.TextRange.Paragraphs.Add("http://diabetes.webmd.com/blood-glucose");

            shape1.TextFrame.TextRange.Font.Size = 10;
            shape1.TextFrame.TextRange.Font.ThemeFont = ThemeFont.Minor;
            shape1.TextFrame.TextRange.Font.Color.ObjectThemeColor = ThemeColor.Dark1;
            shape1.TextFrame.TextRange.Font.Color.Brightness = 0.25;
            shape1_p1.Runs[0].Font.Bold = true;
            shape1_p3.Runs[0].Font.Bold = true;

            //Do table filter
            var table = worksheet.Tables[0];
            table.Range.AutoFilter(1, "&gt;=102");
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelTemplates.EventBudget" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file Event budget.xlsx from resource
            var fileStream = this.GetResourceStream("xlsx\\Event budget.xlsx");

            workbook.Open(fileStream);

            var worksheet = workbook.ActiveSheet;

            //change range B2's font size.
            worksheet.Range["B2"].Font.Size = 22;

            //change range E4's font style to bold.
            worksheet.Range["E4"].Font.Bold = true;

            //change table style.
            worksheet.Tables["tblAdmissions"].TableStyle = workbook.TableStyles["TableStyleLight10"];
            worksheet.Tables["tblAds"].TableStyle = workbook.TableStyles["TableStyleLight10"];
            worksheet.Tables["tblVendors"].TableStyle = workbook.TableStyles["TableStyleLight10"];
            worksheet.Tables["tblItems"].TableStyle = workbook.TableStyles["TableStyleLight10"];

            //modify range F4:G5's cell style.
            worksheet.Range["F4:G5"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["F4:G5"].Interior.TintAndShade = -0.15;
            worksheet.Range["F4:G5"].Font.ThemeFont = ThemeFont.Major;
            worksheet.Range["F4:G5"].Font.Size = 12;
            worksheet.Range["F4:G5"].Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.None;
            worksheet.Range["F5:G5"].NumberFormat = "$#,##0.00";

            //modify table columns' style.
            worksheet.Range["F8:G11, F15:G18, F22:G25, F29:G33"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["F8:G11, F15:G18, F22:G25, F29:G33"].Interior.TintAndShade = -0.15;
            worksheet.Range["E8:G11, E15:G18, E22:G25, E29:G33"].NumberFormat = "$#,##0.00";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelTemplates.FinancialKPIs" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file Financial KPIs.xlsx from resource
            var fileStream = this.GetResourceStream("xlsx\\Financial KPIs.xlsx");

            workbook.Open(fileStream);

            var worksheet = workbook.ActiveSheet;

            //set values
            object[,] ProData = new object[,]
            {
                {1483550,121386 },
                {0.4336,0.32 },
                {0.1236,-0.0438 },
                {12.36,-0.0438 }
            };

            object[] ProData1 = new object[]
            {
                0.14,0.0029,0.0361,0.0361
            };

            worksheet.Range["E7:F10"].Value = ProData;
            worksheet.Range["I7:I10"].Value = ProData1;

            object[,] ActiveData = new object[,]
            {
                {"4.32 item","2.00 item" },
                {"72 days","45 days" },
                {"53 days","55 days" }
            };

            object[] ActiveData1 = new object[]
            {
                "0.45 items","-5 days","-6 days"
            };

            worksheet.Range["E12:F14"].Value = ActiveData;
            worksheet.Range["I12:I14"].Value = ActiveData1;

            object[,] EffData = new object[,]
            {
                {0.3446,0.25 },
                {0.5335,0.11 }
            };

            object[] EffData1 = new object[]
            {
                0.1245,0.1946
            };

            worksheet.Range["E16:F17"].Value = EffData;
            worksheet.Range["I16:I17"].Value = EffData1;

            object[,] LinData = new object[,]
            {
                {"0.91:1","'2:1" },
                {"0.58:1","'1:1" }
            };

            object[] LinData1 = new object[]
            {
                "'0.02:1","'0.03:1"
            };

            worksheet.Range["E19:F20"].Value = LinData;
            worksheet.Range["I19:I20"].Value = LinData1;

            object[,] GeaData = new object[,]
            {
                {-9.60,0.85 },
                {0.68,0.5 }
            };

            object[] GeaData1 = new object[]
            {
                6.65,0.0282
            };

            worksheet.Range["E22:F23"].Value = GeaData;
            worksheet.Range["I22:I23"].Value = GeaData1;

            object[,] CasData = new object[,]
            {
                {0.0735,1.2 },
                {0.1442,0.1442 }
            };

            object[] CasData1 = new object[]
            {
                -0.0046,0.023
            };

            worksheet.Range["E25:F26"].Value = CasData;
            worksheet.Range["I25:I26"].Value = CasData1;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelTemplates.IncomeStatement" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file Income statement.xlsx from resource
            var fileStream = this.GetResourceStream("xlsx\\Income statement.xlsx");

            workbook.Open(fileStream);

            var worksheet = workbook.ActiveSheet;

            //set values
            object[,] RevData = new object[,]
            {
                { 454597, 687802, 469902, 335846, 776667, 806250, 552036, 346734, 787205, 720496, 686963, 835688 },
                { 821687, 679306, 568503, 715827, 627459, 822625, 271114, 797991, 823966, 304521, 758665, 322694 },
                { 426510, 767295, 799314, 408533, 353862, 261403, 344075, 277433, 289814, 386539, 625447, 489178 },
            };

            object[,] CostData = new object[,]
            {
                { 113053, 134668, 192784, 199522, 163169, 109389, 187568, 170346, 130920, 180119, 184725, 162780 },
                { 42667, 14921, 42007, 10264, 48864, 10360, 42378, 31445, 15208, 34418, 37529, 22077 },
            };

            object[,] OpeData = new object[,]
            {
                { 264290, 282301, 266021, 272333, 285359, 256072, 289430, 280307, 278656, 272674, 299784, 284062 },
                { 29536, 28709, 27579, 27862, 26750, 26970, 27847, 27680, 28375, 25474, 27514, 26753 },
                { 23473, 22902, 21680, 19232, 23077, 20839, 19461, 15504, 21117, 20102, 16322, 21160 },
                { 11340, 11514, 11207, 9186, 9243, 10003, 11092, 10761, 9032, 10366, 9571, 11774 },
                { 9562, 10787, 11809, 9949, 9559, 9753, 11761, 10702, 10545, 10347, 10593, 10719 },
                { 9410, 9646, 9969, 10758, 9183, 10777, 11249, 9763, 9445, 11218, 10579, 10203 },
            };

            object[,] EarnData = new object[,]
            {
                { 1038, 1430, 627, 1352, 765, 1190, 1082, 1261, 1240, 645, 552, 669 },
                { 1227, 1372, 544, 1172, 1479, 821, 891, 1361, 1187, 760, 1126, 873 },
                { 661, 1342, 1119, 1085, 887, 1274, 883, 582, 601, 845, 948, 817 },
            };

            worksheet.Range["E10:P12"].Value = RevData;
            worksheet.Range["E15:P16"].Value = CostData;
            worksheet.Range["E21:P26"].Value = OpeData;
            worksheet.Range["E31:P33"].Value = EarnData;

            //set formulars
            worksheet.Range["E13:P13"].Formula = "=SUM(E10:E12)";
            worksheet.Range["E17:P17"].Formula = "=SUM(E15:E16)";
            worksheet.Range["E19:P19"].Formula = "=E13-E17";
            worksheet.Range["E27:P27"].Formula = "=SUM(E21:E26)";
            worksheet.Range["E29:P29"].Formula = "=E19-E27";
            worksheet.Range["E34:P34"].Formula = "=E29-E31+E32-E33";
            worksheet.Range["E36:P36"].Formula = "=E34*0.17";
            worksheet.Range["E38:P38"].Formula = "=E34-E36";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelTemplates.MonthlyBusinessBudget" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file Monthly business budget.xlsx from resource
            var fileStream = this.GetResourceStream("xlsx\\Monthly business budget.xlsx");
            workbook.Open(fileStream);

            var worksheet = workbook.ActiveSheet;

            // change table style to TableStyleMedium14
            var totalsTable = worksheet.Tables["TotalsTable"];
            totalsTable.TableStyle = workbook.TableStyles["TableStyleMedium14"];

            // change chart type to column stacked
            var chart = worksheet.Shapes[0].Chart;
            chart.ChartType = ChartType.ColumnStacked;
            chart.ColumnGroups[0].Overlap = 100;

            // set a bigger font size for chart title
            chart.ChartTitle.Font.Size = 24;
            chart.ChartTitle.Font.Bold = true;

            // give a one color gradient to chart area
            chart.ChartArea.Format.Fill.OneColorGradient(GradientStyle.Horizontal, 1, 0);
            chart.ChartArea.Format.Fill.GradientStops[0].Color.ObjectThemeColor = ThemeColor.Accent6;
            chart.ChartArea.Format.Fill.GradientStops[0].Color.Brightness = 0.8;

            // make fill of plot area transparant
            chart.PlotArea.Format.Fill.Transparency = 1;

            // config series1 of chart
            ISeries series1 = chart.SeriesCollection[0];
            series1.HasDataLabels = true;
            series1.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent1;

            // give some formatting for the first point of series1
            IPoint point1 = series1.Points[0];
            point1.Format.Line.Color.RGB = Color.Black;
            point1.Format.Line.Weight = 2;
            point1.Format.Line.DashStyle = LineDashStyle.Dash;

            // config series2 of chart
            ISeries series2 = chart.SeriesCollection[1];
            series2.HasDataLabels = true;
            series2.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent6;
            series2.DataLabels.Font.Color.RGB = Color.Red;

            // get the value axis
            IAxis value_axis = chart.Axes.Item(AxisType.Value, AxisGroup.Primary);

            // show the display unit as thousands for value axis
            value_axis.HasDisplayUnitLabel = true;
            value_axis.DisplayUnit = DisplayUnit.Thousands;
            
            // give a color for the major grid line of value axis
            value_axis.MajorGridlines.Format.Line.Color.ObjectThemeColor = ThemeColor.Accent6;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.ExcelTemplates.SimpleInvoice" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file Simple invoice.xlsx from resource
            var fileStream = this.GetResourceStream("xlsx\\Simple invoice.xlsx");

            workbook.Open(fileStream);

            var worksheet = workbook.ActiveSheet;

            // fill some new items
            worksheet.Range["E09:H09"].Value = new object[] { "DD1-001", "Item 3", 5.60, 12 };
            worksheet.Range["E10:H10"].Value = new object[] { "DD2-001", "Item 3", 8.5, 14 };
            worksheet.Range["E11:H11"].Value = new object[] { "DD3-001", "Item 3", 9.6, 16 };
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.CellRichText.AddTextRun" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            IRange b2 = worksheet.Range["B2"]; 

            // customize the 'GrapeCity' run
            ITextRun run1 = b2.RichText.Add("GrapeCity");
            run1.Font.Name = "Agency FB";
            run1.Font.Size = 26;
            run1.Font.ThemeColor = ThemeColor.Accent1;
            run1.Font.Bold = true;

            // customize the 'Documents' run
            ITextRun run2 = b2.RichText.Add(" Documents");
            run2.Font.ThemeColor = ThemeColor.Accent2;
            run2.Font.Name = "Arial Black";
            run2.Font.Size = 20;

            // customize the 'for' run
            ITextRun run3 = b2.RichText.Add(" for ");
            run3.Font.Italic = true;

            // customize the 'Excel' run
            ITextRun run4 = b2.RichText.Add("Excel");
            run4.Font.Color = System.Drawing.Color.Blue;
            run4.Font.Bold = true;
            run4.Font.Size = 26;
            run4.Font.Underline = UnderlineType.Double;

            b2.EntireRow.RowHeight = 42;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.CellRichText.CharacterCellText" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            IRange b2 = worksheet.Range["B2"];
            b2.Value = "GrapeCity Documents for Excel";
            b2.Font.Size = 26;
            b2.EntireRow.RowHeight = 42;

            // customize the 'GrapeCity' run
            ITextRun run1 = b2.Characters(0, 9);
            run1.Font.Name = "Agency FB";
            run1.Font.ThemeColor = ThemeColor.Accent1;
            run1.Font.Bold = true;

            // customize the 'Documents' run
            ITextRun run2 = b2.Characters(10, 9);
            run2.Font.ThemeColor = ThemeColor.Accent2;
            run2.Font.Name = "Arial Black";
            run2.Font.Underline = UnderlineType.Single;

            // customize the 'for' run
            ITextRun run3 = b2.Characters(20, 3);
            run3.Font.Italic = true;

            // customize the 'Excel' run
            ITextRun run4 = b2.Characters(24, 5);
            run4.Font.Color = System.Drawing.Color.Blue;
            run4.Font.Bold = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.CellRichText.ConfigRunFont" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            IRange a2 = worksheet.Range["A2"];
            a2.Font.Size = 18;
            a2.Font.Bold = true;
            a2.VerticalAlignment = VerticalAlignment.Center;

            a2.EntireRow.RowHeight = 42;
            a2.EntireColumn.ColumnWidth = 40;
            a2.Value = "Perfect square trinomial";

            ITextRun run1 = a2.Characters(8, 7);
            run1.Font.Italic = true;
            run1.Font.ThemeColor = ThemeColor.Accent1;

            IRange b2 = worksheet.Range["B2"];
            b2.Font.Size = 26;
            b2.EntireColumn.ColumnWidth = 60;

            b2.Value = "(a+b)2 = a2+2ab+b2";
            
            ITextRun superRun1 = b2.Characters(5, 1);
            superRun1.Font.Superscript = true;
            superRun1.Font.Color = System.Drawing.Color.Red;

            ITextRun superRun2 = b2.Characters(10, 1);
            superRun2.Font.Superscript = true;
            superRun2.Font.Color = System.Drawing.Color.Green;

            ITextRun superRun3 = b2.Characters(17, 1);
            superRun3.Font.Superscript = true;
            superRun3.Font.Color = System.Drawing.Color.Blue;
           
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartCopy" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //Create chart, chart's range is Range["G1:M21"]
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 300, 10, 300, 300);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
               {null, "S1", "S2", "S3"},
               {"Item1", 10, 25, 25},
               {"Item2", -51, -36, 27},
               {"Item3", 52, -85, -30},
               {"Item4", 22, 65, 65},
               {"Item5", 23, 69, 69}
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //Range["G1:M21"] must contain chart's range, copy a new shape to Range["N1:T21"]
            worksheet.Range["G1:M21"].Copy(worksheet.Range["N1"]);
            //worksheet.Range["G1:M21"].Copy(worksheet.Range["N1:T21"]);

            //Cross sheet copy, copy a new chart to worksheet2's Range["N1:T21"]
            //IWorksheet worksheet2 = workbook.Worksheets.Add()
            //worksheet.Range["G1:M21"].Copy(worksheet2.Range["E1"]);
            //worksheet.Range["G1:M21"].Copy(worksheet2.Range["N1:T21"]);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartCut" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //Create chart, chart's range is Range["G1:M21"]
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 300, 10, 300, 300);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
               {null, "S1", "S2", "S3"},
               {"Item1", 10, 25, 25},
               {"Item2", -51, -36, 27},
               {"Item3", 52, -85, -30},
               {"Item4", 22, 65, 65},
               {"Item5", 23, 69, 69}
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //Range["G1:M21"] must contain chart's range, cut a new shape to Range["N1:T21"]
            worksheet.Range["G1:M21"].Cut(worksheet.Range["N1"]);
            //worksheet.Range["G1:M21"].Cut(worksheet.Range["N1:T21"]);

            //Cross sheet cut, cut a new chart to worksheet2's Range["N1:T21"]
            //IWorksheet worksheet2 = workbook.Worksheets.Add()
            //worksheet.Range["G1:M21"].Cut(worksheet2.Range["E1"]);
            //worksheet.Range["G1:M21"].Cut(worksheet2.Range["N1:T21"]);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartDuplicate" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //create chart, chart's range is Range["G1:M21"]
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 300, 10, 300, 300);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
               {null, "S1", "S2", "S3"},
               {"Item1", 10, 25, 25},
               {"Item2", -51, -36, 27},
               {"Item3", 52, -85, -30},
               {"Item4", 22, 65, 65},
               {"Item5", 23, 69, 69}
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //Duplicate chart
            GrapeCity.Documents.Excel.Drawing.IShape newShape = shape.Duplicate();

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.CreateChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 300, 10, 300, 300);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };

            //create chart.
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.DeleteChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 300, 10, 300, 300);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //delete chart.
            shape.Chart.Delete();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.ConfigAxisTitle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", 51, 36, 27},
                {"Item3", 52, 85, 30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.IAxis category_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);

            //config axis title
            category_axis.HasTitle = true;
            category_axis.AxisTitle.Text = "CategoryAxisTitle";
            category_axis.AxisTitle.Font.Size = 18;
            category_axis.AxisTitle.Font.Color.RGB = Color.Orange;
           
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.ConfigCategoryAxesFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Line, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.IAxis category_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);
            
            //set category axis's format.
            category_axis.Format.Fill.Color.ObjectThemeColor = ThemeColor.Accent1;
            category_axis.Format.Line.Color.RGB = Color.LightSkyBlue;
            category_axis.Format.Line.Weight = 3;
            category_axis.Format.Line.Style = GrapeCity.Documents.Excel.Drawing.LineStyle.Single;
          
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.ConfigCategoryAxisUnits" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A2:A6"].NumberFormat = "m/d/yyyy";
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {new DateTime(2015, 10, 7), 10, 25, 25},
                {new DateTime(2015, 10, 24), 51, 36, 27},
                {new DateTime(2015, 11, 8), 52, 85, 30},
                {new DateTime(2015, 11, 25), 22, 65, 65},
                {new DateTime(2015, 12, 10), 23, 69, 69}
            };

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            GrapeCity.Documents.Excel.Drawing.IAxis category_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);
            category_axis.MaximumScale = new DateTime(2015, 12, 20).ToOADate();
            category_axis.MinimumScale = new DateTime(2015, 10, 1).ToOADate();
            category_axis.BaseUnit = GrapeCity.Documents.Excel.Drawing.TimeUnit.Months;
            category_axis.MajorUnitScale = GrapeCity.Documents.Excel.Drawing.TimeUnit.Months;
            category_axis.MajorUnit = 1;
            category_axis.MinorUnitScale = GrapeCity.Documents.Excel.Drawing.TimeUnit.Days;
            category_axis.MinorUnit = 15;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.ConfigDisplayUnitLabel" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            GrapeCity.Documents.Excel.Drawing.IAxis value_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);
            value_axis.DisplayUnit = GrapeCity.Documents.Excel.Drawing.DisplayUnit.Custom;
            value_axis.DisplayUnitCustom = 100;
            value_axis.HasDisplayUnitLabel = true;
            value_axis.DisplayUnitLabel.Font.Color.RGB = Color.CornflowerBlue;
            value_axis.DisplayUnitLabel.Format.Fill.Color.RGB = Color.Orange;
            value_axis.DisplayUnitLabel.Format.Line.Color.RGB = Color.CornflowerBlue;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.ConfigGridlines" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            GrapeCity.Documents.Excel.Drawing.IAxis value_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);
            value_axis.HasMajorGridlines = true;
            value_axis.HasMinorGridlines = true;
            value_axis.MajorGridlines.Format.Line.Color.RGB = Color.Gray;
            value_axis.MajorGridlines.Format.Line.Weight = 1;
            value_axis.MinorGridlines.Format.Line.Color.RGB = Color.LightGray;
            value_axis.MinorGridlines.Format.Line.Weight = 0.75;
            value_axis.MajorUnit = 40;
            value_axis.MinorUnit = 8;
            value_axis.MinorGridlines.Format.Line.Style = GrapeCity.Documents.Excel.Drawing.LineStyle.ThickThin;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.ConfigTickMarkLabel" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {1, -25, 25, 25},
                {2, 51, 36, 27},
                {3, 52, 80, 30},
                {4, 22, -20, 65},
                {5, 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.IAxis category_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);
            GrapeCity.Documents.Excel.Drawing.IAxis value_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);

            //config tick label's format
            category_axis.TickLabelPosition = GrapeCity.Documents.Excel.Drawing.TickLabelPosition.NextToAxis;
            category_axis.TickLabelSpacing = 2;
            category_axis.TickLabels.Font.Color.RGB = Color.DarkOrange;           
            category_axis.TickLabels.Font.Size = 12;
            category_axis.TickLabels.NumberFormat = "#,##0.00";
            value_axis.TickLabels.NumberFormat = "#,##0;[Red]#,##0";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.ConfigValueAxesFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Line, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.IAxis value_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);

            //set value axis's format.
            value_axis.Format.Line.Color.RGB = Color.FromArgb(91, 155, 213);
            value_axis.Format.Line.Weight = 2;
            value_axis.Format.Line.Style = GrapeCity.Documents.Excel.Drawing.LineStyle.Single;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.ConfigValueAxisUnits" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 90, -30},
                {"Item4", 22, 65, 50},
                {"Item5", 23, 55, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            GrapeCity.Documents.Excel.Drawing.IAxis category_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);
            GrapeCity.Documents.Excel.Drawing.IAxis value_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);

            value_axis.MaximumScale = 100;
            value_axis.MinimumScale = -100;
            value_axis.MajorUnit = 30;
            value_axis.MinorUnit = 6;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.SetAxisScaleType" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D5"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 4, 25, 7},
                {"Item2", 15, -10, 18},
                {"Item3", 45, 90, 20},
                {"Item4", 8, 20, 11},
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D5"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            GrapeCity.Documents.Excel.Drawing.IAxis value_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);
            value_axis.ScaleType = GrapeCity.Documents.Excel.Drawing.ScaleType.Logarithmic;
            value_axis.LogBase = 5;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Axes.SetAxisTickMark" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Line, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            GrapeCity.Documents.Excel.Drawing.IAxis category_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);
            category_axis.Format.Line.Color.RGB = Color.Green;
            category_axis.Format.Line.Weight = 1.5;
            category_axis.MajorTickMark = GrapeCity.Documents.Excel.Drawing.TickMark.Inside;
            category_axis.MinorTickMark = GrapeCity.Documents.Excel.Drawing.TickMark.Cross;
            category_axis.TickMarkSpacing = 2;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Chart3DFormat.ConfigChart3DFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Column3D, 250, 20, 350, 250);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.IChartArea chartarea = shape.Chart.ChartArea;
            //config 3D chart format
            chartarea.Format.ThreeD.RotationX = 60;
            chartarea.Format.ThreeD.RotationY = 60;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Chart3DFormat.ConfigChartBackWall" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Column3D, 250, 20, 350, 250);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //config back wall individually.
            shape.Chart.BackWall.Thickness = 5;
            shape.Chart.BackWall.Format.Fill.Color.RGB = Color.LightGreen;
            shape.Chart.BackWall.Format.Line.Color.RGB = Color.LightBlue;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Chart3DFormat.ConfigChartFloorStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Column3D, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            
            //config chart floor
            shape.Chart.Floor.Thickness = 5;
            shape.Chart.Floor.Format.Fill.Color.RGB = Color.Yellow;
            shape.Chart.Floor.Format.Line.Color.RGB = Color.Red;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Chart3DFormat.ConfigChartSideWall" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Column3D, 250, 20, 350, 250);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //config side wall individually.
            shape.Chart.SideWall.Thickness = 5;
            shape.Chart.SideWall.Format.Fill.Color.RGB = Color.LightGreen;
            shape.Chart.SideWall.Format.Line.Color.RGB = Color.LightBlue;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Chart3DFormat.ConfigChartWallStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Column3D, 250, 20, 350, 250);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //config back wall and side wall together.
            shape.Chart.Walls.Thickness = 5;
            shape.Chart.Walls.Format.Fill.Color.RGB = Color.LightPink;
            shape.Chart.Walls.Format.Line.Color.RGB = Color.LightBlue;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartArea.ConfigChartAreaFont" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 60, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.IChartArea chartarea = shape.Chart.ChartArea;

            //Font
            chartarea.Font.Color.RGB = Color.MediumSeaGreen;
            chartarea.Font.Name = "Times New Roman";
            chartarea.Font.Size = 12;
            //rounded corners.
            chartarea.RoundedCorners = true;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartArea.ConfigChartAreaFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 60, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.IChartArea chartarea = shape.Chart.ChartArea;

            //Format
            chartarea.Format.Fill.Color.RGB = Color.LightGray;
            chartarea.Format.Line.Color.RGB = Color.MediumSeaGreen;
            chartarea.Format.Line.Weight = 1.5;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.AreaChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Area, 250, 20, 360, 230);
            worksheet.Range["A1:C13"].Value = new object[,] {
                { null, "Blue Series", "Orange Series" },
                { "Jan", 0, 59.1883603948205 },
                { "Feb", 44.6420211591501, 52.2280901938606 },
                { "Mar", 45.2174930051225, 49.8093056416248 },
                { "Apr", 62, 37.3065749226828 },
                { "May", 53, 34.4312192530766 },
                { "Jun", 31.8933622049831, 69.7834561753736 },
                { "Jul", 41.7930895085093, 63.9418103906982 },
                { "Aug", 73, 57.4049534494926 },
                { "Sep", 49.8773891668518, 33 },
                { "Oct", 50, 74 },
                { "Nov", 54.7658428630216, 22.9587876597096 },
                { "Dec", 32, 54 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C13"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Area Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.AreaStacked100" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.AreaStacked100, 250, 20, 360, 230);
            worksheet.Range["A1:C13"].Value = new object[,] {
                { 0, 59.18, 27.14 },
                { 44.64, 52.22, 25.08 },
                { 45.21, 49.80, 57.99 },
                { 24.32, 37.30, 42.73 },
                { 58.34, 34.43, 28.34 },
                { 31.89, 69.78, 46.88 },
                { 41.79, 63.94, 56.24 },
                { 67.94, 57.40, 27.78 },
                { 49.87, 48.26, 52.06 },
                { 62.39, 67.43, 33.33 },
                { 54.76, 22.95, 50.36 },
                { 28.33, 36.60, 36.61 },
                { 22.77, 55.65, 65.64 },
                { 20.34, 49.35, 45.60 },
                { 32.10, 47.60, 20.62 },
                { 26.37, 63.00, 53.97 },
                { 35, 75, 60 },
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C13"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Area Stacked100 Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.AreaStackedChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.AreaStacked, 250, 20, 360, 230);
            worksheet.Range["A1:C13"].Value = new object[,] {
                { 0, 59.18, 27.14 },
                { 44.64, 52.22, 25.08 },
                { 45.21, 49.80, 57.99 },
                { 24.32, 37.30, 42.73 },
                { 58.34, 34.43, 28.34 },
                { 31.89, 69.78, 46.88 },
                { 41.79, 63.94, 56.24 },
                { 67.94, 57.40, 27.78 },
                { 49.87, 48.26, 52.06 },
                { 62.39, 67.43, 33.33 },
                { 54.76, 22.95, 50.36 },
                { 28.33, 36.60, 36.61 },
                { 22.77, 55.65, 65.64 },
                { 20.34, 49.35, 45.60 },
                { 32.10, 47.60, 20.62 },
                { 26.37, 63.00, 53.97 },
                { 35, 75, 60 },
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C13"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Area Stacked Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.BarClusteredChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.BarClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D2"].Value = new object[,] {
                { 100,200,300,400 },
                { 100,200,300,400 },            
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D2"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Bar Clustered Chart";
            shape.Chart.Legend.Position = GrapeCity.Documents.Excel.Drawing.LegendPosition.Left;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.BarStacked100Chart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.BarStacked100, 250, 20, 360, 230);
            worksheet.Range["A1:B5"].Value = new object[,] {
                { 1, 5 },
                { 2, 4 },
                { 3, 3 },
                { 4, 2 },
                { 4, 1 }
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B5"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Bar Stacked 100 Chart";
            shape.Chart.Legend.Position = GrapeCity.Documents.Excel.Drawing.LegendPosition.Left;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.BarStackedChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.BarStacked, 250, 20, 360, 230);
            worksheet.Range["A1:C4"].Value = new object[,] {
                { 103, 121, 109 },
                { 56, 94, 115 },
                { 116, 89, 99 },
                { 55, 93, 70 }             
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C4"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Bar Stacked Chart";
            shape.Chart.Legend.Position = GrapeCity.Documents.Excel.Drawing.LegendPosition.Left;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.BubbleChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Bubble, 250, 20, 360, 230);
            worksheet.Range["A1:C10"].Value = new object[,] {
                {"Blue", null, null },
                {125, 750, 3 },
                {25, 625, 7 },
                {75, 875, 5 },
                {175, 625, 6},
                {"Red",null,null },
                {125 ,500 , 10 },
                {25, 250, 1 },
                {75, 125, 5 },
                {175, 250, 8 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C5"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.SeriesCollection.Add(worksheet.Range["A6:C10"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Bubble Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.ColumnClusteredChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D2"].Value = new object[,]
            {
                {100, 200, 300, 400},
                {100, 200, 300, 400}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D2"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Column Clustered Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.ColumnStacked100Chart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnStacked100, 250, 20, 360, 230);
            worksheet.Range["A1:B6"].Value = new object[,] {
                { 1, 5 },
                { 2, 4 },
                { 3, 3 },
                { 4, 2 },
                { 5, 1 },
                { 5, 3 },
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Column Stacked 100 Chart";
            
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.ColumnStackedChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnStacked, 250, 20, 360, 230);
            worksheet.Range["A1:C6"].Value = new object[,] {
                { 103, 121, 109 },
                { 56, 94, 115 },
                { 116, 89, 99 },
                { 55, 93, 70 },
                { 114, 114, 83 },
                { 125, 138, 136 },
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Column Stacked Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.CombinationChart1" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:B13"].Value = new object[,] {
                { "Blue Column", "Red Line" },
                { 75, 20 },
                { 149, 50 },
                { 105, 30 },
                { 55, 80 },
                { 121, 40 },
                { 76, 110 },
                { 128, 50 },
                { 114, 140 },
                { 75, 60 },
                { 105, 170 },
                { 145, 70 },
                { 110, 100 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B13"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Combination Chart";
            //change series type
            GrapeCity.Documents.Excel.Drawing.ISeries series2 = shape.Chart.SeriesCollection[1];
            series2.ChartType = GrapeCity.Documents.Excel.Drawing.ChartType.LineMarkers;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.CombinationChart2" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:C17"].Value = new object[,] {
                { "Area 1", "Column 1", "Column 2" },
                { 1350, 120, 75 },
                { 1500, 90, 35 },
                { 1200, 80, 50 },
                { 1300, 80, 80 },
                { 1750, 90, 100 },
                { 1640, 120, 130 },
                { 1700, 120, 95 },
                { 1100, 90, 80 },
                { 1350, 120, 75 },
                { 1500, 90, 35 },
                { 1200, 80, 50 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C17"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Combination Chart";
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            GrapeCity.Documents.Excel.Drawing.ISeries series2 = shape.Chart.SeriesCollection[1];
            GrapeCity.Documents.Excel.Drawing.ISeries series3 = shape.Chart.SeriesCollection[2];
            //change series type
            series1.ChartType = GrapeCity.Documents.Excel.Drawing.ChartType.Area;
            series2.ChartType = GrapeCity.Documents.Excel.Drawing.ChartType.ColumnStacked;
            series3.ChartType = GrapeCity.Documents.Excel.Drawing.ChartType.ColumnStacked;
            //set axis group
            series2.AxisGroup = GrapeCity.Documents.Excel.Drawing.AxisGroup.Secondary;
            series3.AxisGroup = GrapeCity.Documents.Excel.Drawing.AxisGroup.Secondary;
            //config axis sacle and unit
            GrapeCity.Documents.Excel.Drawing.IAxis value_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);
            GrapeCity.Documents.Excel.Drawing.IAxis value_second_axis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value, GrapeCity.Documents.Excel.Drawing.AxisGroup.Secondary);
            value_axis.MaximumScale = 1800;
            value_axis.MajorUnit = 450;
            value_second_axis.MaximumScale = 300;
            value_second_axis.MajorUnit = 75;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.LineChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Line, 250, 20, 360, 230);
            worksheet.Range["A1:C7"].Value = new object[,] {
                { 0, 59.18, 27.14 },
                { 44.64, 52.22, 25.08 },
                { 45.21, 49.80, 57.99 },
                { 24.32, 37.30, 42.73 },
                { 58.34, 34.43, 28.34 },
                { 31.89, 69.78, 46.88 },
                { 41.79, 63.94, 56.24 },   
            };           
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C7"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            //set series lines style
            shape.Chart.SeriesCollection[0].Format.Line.Weight = 2.25;
            shape.Chart.SeriesCollection[1].Format.Line.Weight = 2.25;
            shape.Chart.SeriesCollection[2].Format.Line.Weight = 2.25;
            shape.Chart.ChartTitle.Text = "Line Chart";           
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.LineMarkersChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.LineMarkers, 250, 20, 360, 230);
            worksheet.Range["A1:B8"].Value = new object[,] {
                { 6, 55 },
                { 45, 25 },
                { 35, 45 },
                { 25, 65 },
                { 65, 15 },
                { 45, 75 },
                { 75, 55 },
                { 65, 35 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B8"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Line with Markers";
            shape.Chart.SeriesCollection[0].MarkerStyle = GrapeCity.Documents.Excel.Drawing.MarkerStyle.Square;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.LineMarkerStacked100Chart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.LineMarkersStacked100, 250, 20, 360, 230);
            worksheet.Range["A1:C5"].Value = new object[,]
            {
                {12, 22, 27},
                {45, 52, 25},
                {58, 35, 58},
                {21, 37, 43},
                {44, 45, 28}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C5"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Line Marker Stacked 100 Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.LineMarkerStackedChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.LineMarkersStacked, 250, 20, 360, 230);
            worksheet.Range["A1:C7"].Value = new object[,] {
                { 0, 59.18, 27.14 },
                { 44.64, 52.22, 25.08 },
                { 45.21, 49.80, 57.99 },
                { 24.32, 37.30, 42.73 },
                { 58.34, 34.43, 28.34 },
                { 31.89, 69.78, 46.88 },
                { 41.79, 63.94, 56.24 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C7"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.SeriesCollection[0].Format.Line.Weight = 2.25;
            shape.Chart.SeriesCollection[1].Format.Line.Weight = 2.25;
            shape.Chart.SeriesCollection[2].Format.Line.Weight = 2.25;
            shape.Chart.ChartTitle.Text = "Line Marker Stacked Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.LineStacked100Chart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.LineStacked100, 250, 20, 360, 230);
            worksheet.Range["A1:C5"].Value = new object[,]
            { 
                {12, 22, 27},
                {45, 52, 25},
                {58, 35, 58},
                {21, 37, 43},
                {44, 45, 28}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C5"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Line Stacked 100 Chart";
            shape.Chart.SeriesCollection[0].Format.Line.Weight = 2.25;
            shape.Chart.SeriesCollection[1].Format.Line.Weight = 2.25;
            shape.Chart.SeriesCollection[2].Format.Line.Weight = 2.25;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.LineStackedChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.LineStacked, 250, 20, 360, 230);
            worksheet.Range["A1:C7"].Value = new object[,] {
                { 0, 59.18, 27.14 },
                { 44.64, 52.22, 25.08 },
                { 45.21, 49.80, 57.99 },
                { 24.32, 37.30, 42.73 },
                { 58.34, 34.43, 28.34 },
                { 31.89, 69.78, 46.88 },
                { 41.79, 63.94, 56.24 },
            };           
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:C7"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.SeriesCollection[0].Format.Line.Weight = 2.25;
            shape.Chart.SeriesCollection[1].Format.Line.Weight = 2.25;
            shape.Chart.SeriesCollection[2].Format.Line.Weight = 2.25;
            shape.Chart.ChartTitle.Text = "Line Stack Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.PieChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Pie, 250, 20, 360, 230);
            worksheet.Range["A1:B4"].Value = new object[,] {
                { "Blue", 1 },
                { "Red", 2 },
                { "Green", 3 },
                { "Purple", 4 },             
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B4"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Pie Chart";
            shape.Chart.Legend.Position = GrapeCity.Documents.Excel.Drawing.LegendPosition.Right;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.Pie_DoughnutChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Doughnut, 250, 20, 360, 230);
            worksheet.Range["A1:B6"].Value = new object[,] {
                {"S1" , "S2"},
                {10 , 25 },
                {51 , 36 },
                {52 , 85 },
                {22 , 65 },
                {23 , 69 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Area Chart";
            shape.Chart.ChartGroups[0].DoughnutHoleSize = 50;
            shape.Chart.SeriesCollection[0].HasDataLabels = true;
            shape.Chart.SeriesCollection[1].HasDataLabels = true;
            shape.Chart.SeriesCollection[1].Explosion = 2;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.Stock_HighLowCloseStockChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.StockHLC, 350, 20, 360, 230);
            worksheet.Range["A1:D17"].Value = new object[,] {
                { null, "High", "Low", "Close" },
                { new DateTime(2019, 9, 1), 105.76, 92.38, 100.94 },
                { new DateTime(2019, 9, 2), 102.45, 90.14, 93.45 },
                { new DateTime(2019, 9, 3),102.11, 85.01, 99.89 },
                { new DateTime(2019, 9, 4), 106.01, 94.04, 99.45 },
                { new DateTime(2019, 9, 5),108.23, 98.16, 104.33 },
                { new DateTime(2019, 9, 8),107.7, 91.02, 102.17 },
                { new DateTime(2019, 9, 9),110.36, 101.62, 110.07 },
                { new DateTime(2019, 9, 10),115.97, 106.89, 112.39 },
                { new DateTime(2019, 9, 11),120.32, 112.15, 117.52 },
                { new DateTime(2019, 9, 12),122.03, 114.67, 114.75 },
                { new DateTime(2019, 9, 15),120.46, 106.21, 116.85 },
                { new DateTime(2019, 9, 16),118.08, 113.55, 116.69 },
                { new DateTime(2019, 9, 17),128.23, 110.91, 117.25 },
                { new DateTime(2019, 9, 18),120.55, 108.09, 112.52 },
                { new DateTime(2019, 9, 19),112.58, 105.42, 109.12 },
                { new DateTime(2019, 9, 22),115.23, 97.25, 101.56 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D17"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "High-Low-Close Stock Chart";
            GrapeCity.Documents.Excel.Drawing.IAxis valueAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);
            GrapeCity.Documents.Excel.Drawing.IAxis categoryAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);
            GrapeCity.Documents.Excel.Drawing.ISeries series_close = shape.Chart.SeriesCollection[2];
            //config value axis
            valueAxis.MinimumScale = 80;
            valueAxis.MaximumScale = 140;
            valueAxis.MajorUnit = 15;
            //config category axis
            categoryAxis.CategoryType = Drawing.CategoryType.CategoryScale;
            categoryAxis.MajorTickMark = Drawing.TickMark.Outside;
            categoryAxis.TickLabelSpacingIsAuto = false;
            categoryAxis.TickLabelSpacing = 5;
            series_close.MarkerStyle = Drawing.MarkerStyle.Square;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.Stock_OpenHighLowCloseStock" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.StockOHLC, 350, 20, 360, 220);
            worksheet.Range["A1:E17"].Value = new object[,] {
                    { null, "Open", "High", "Low", "Close" },
                    { new DateTime(2019, 9, 1), 103.46, 105.76, 92.38, 100.94 },
                    { new DateTime(2019, 9, 2), 100.26, 102.45, 90.14, 93.45 },
                    { new DateTime(2019, 9, 3), 98.05, 102.11, 85.01, 99.89 },
                    { new DateTime(2019, 9, 4), 100.32, 106.01, 94.04, 99.45 },
                    { new DateTime(2019, 9, 5), 99.74, 108.23, 98.16, 104.33 },
                    { new DateTime(2019, 9, 8), 92.11, 107.7, 91.02, 102.17 },
                    { new DateTime(2019, 9, 9), 107.8, 110.36, 101.62, 110.07 },
                    { new DateTime(2019, 9, 10), 107.56, 115.97, 106.89, 112.39 },
                    { new DateTime(2019, 9, 11), 112.86, 120.32, 112.15, 117.52 },
                    { new DateTime(2019, 9, 12), 115.02, 122.03, 114.67, 114.75 },
                    { new DateTime(2019, 9, 15), 108.53, 120.46, 106.21, 116.85 },
                    { new DateTime(2019, 9, 16), 114.97, 118.08, 113.55, 116.69 },
                    { new DateTime(2019, 9, 17), 127.14, 128.23, 110.91, 117.25 },
                    { new DateTime(2019, 9, 18), 118.89, 120.55, 108.09, 112.52 },
                    { new DateTime(2019, 9, 19), 105.57, 112.58, 105.42, 109.12 },
                    { new DateTime(2019, 9, 22), 110.23, 115.23, 97.25, 101.56 },
                };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:E17"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            //set chart title
            shape.Chart.ChartTitle.Text = "Open-High-Low-Close Stock Chart";
          
            GrapeCity.Documents.Excel.Drawing.IAxis valueAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);
            GrapeCity.Documents.Excel.Drawing.IAxis categoryAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);           
            //config value axis 
            valueAxis.MinimumScale = 80;
            valueAxis.MaximumScale = 140;
            valueAxis.MajorUnit = 15;
            //config category axis
            categoryAxis.CategoryType = Drawing.CategoryType.CategoryScale;
            categoryAxis.MajorTickMark = Drawing.TickMark.Outside;
            categoryAxis.TickMarkSpacing = 5;
            categoryAxis.TickLabelSpacing = 5;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.Stock_VolumeHighLowCloseStock" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.StockVHLC, 350, 20, 360, 230);
            worksheet.Range["A1:E17"].Value = new object[,] {
                { null, "Volume", "High", "Low", "Close" },
                { new DateTime(2019, 9, 1), 26085,  105.76, 92.38, 100.94 },
                { new DateTime(2019, 9, 2), 52314,  102.45, 90.14, 93.45 },
                { new DateTime(2019, 9, 3), 70308, 102.11, 85.01, 99.89 },
                { new DateTime(2019, 9, 4), 33401,  106.01, 94.04, 99.45 },
                { new DateTime(2019, 9, 5), 87500,  108.23, 98.16, 104.33 },
                { new DateTime(2019, 9, 8), 33756,  107.7, 91.02, 102.17 },
                { new DateTime(2019, 9, 9), 65737,  110.36, 101.62, 110.07 },
                { new DateTime(2019, 9, 10), 45668, 115.97, 106.89, 112.39 },
                { new DateTime(2019, 9, 11), 47815, 120.32, 112.15, 117.52 },
                { new DateTime(2019, 9, 12), 76759, 122.03, 114.67, 114.75 },
                { new DateTime(2019, 9, 15), 23492, 120.46, 106.21, 116.85 },
                { new DateTime(2019, 9, 16), 56127, 118.08, 113.55, 116.69 },
                { new DateTime(2019, 9, 17), 81142, 128.23, 110.91, 117.25 },
                { new DateTime(2019, 9, 18), 46384, 120.55, 108.09, 112.52 },
                { new DateTime(2019, 9, 19), 51005, 112.58, 105.42, 109.12 },
                { new DateTime(2019, 9, 22), 35223, 115.23, 97.25, 101.56 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:E17"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Volume-High-Low-Close Stock Chart";
            shape.Chart.LineGroups[0].HiLoLines.Format.Line.Color.RGB = Color.Black;
            GrapeCity.Documents.Excel.Drawing.IAxis valueAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);
            GrapeCity.Documents.Excel.Drawing.IAxis categoryAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);
            GrapeCity.Documents.Excel.Drawing.IAxis valueSecondaryAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value, GrapeCity.Documents.Excel.Drawing.AxisGroup.Secondary);
            GrapeCity.Documents.Excel.Drawing.ISeries series_close = shape.Chart.SeriesCollection[3];
            //config value axis
            valueAxis.MinimumScale = 0;
            valueAxis.MaximumScale = 150000;
            valueAxis.MajorUnit = 30000;
            //config category axis
            categoryAxis.CategoryType = GrapeCity.Documents.Excel.Drawing.CategoryType.CategoryScale;
            categoryAxis.MajorTickMark = GrapeCity.Documents.Excel.Drawing.TickMark.Outside;
            categoryAxis.TickLabelSpacing = 4;
            //config secondary value axis
            valueSecondaryAxis.MinimumScale = 0;
            valueSecondaryAxis.MaximumScale = 150;
            valueSecondaryAxis.MajorUnit = 30;
            //config marker style
            series_close.MarkerFormat.Fill.Color.RGB = Color.Orange;
            series_close.MarkerStyle = GrapeCity.Documents.Excel.Drawing.MarkerStyle.Square;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.Stock_VolumeOpenHighLowClose" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.StockVOHLC, 300, 20, 360, 230);
            worksheet.Range["A1:F23"].Value = new object[,] {
                { null, "Volume", "Open", "High", "Low", "Close" },
                { new DateTime(2019, 9, 1), 26085, 103.46, 105.76, 92.38, 100.94 },
                { new DateTime(2019, 9, 2), 52314, 100.26, 102.45, 90.14, 93.45 },
                { new DateTime(2019, 9, 3), 70308, 98.05, 102.11, 85.01, 99.89 },
                { new DateTime(2019, 9, 4), 33401, 100.32, 106.01, 94.04, 99.45 },
                { new DateTime(2019, 9, 5), 87500, 99.74, 108.23, 98.16, 104.33 },
                { new DateTime(2019, 9, 8), 33756, 92.11, 107.7, 91.02, 102.17 },
                { new DateTime(2019, 9, 9), 65737, 107.8, 110.36, 101.62, 110.07 },
                { new DateTime(2019, 9, 10), 45668, 107.56, 115.97, 106.89, 112.39 },
                { new DateTime(2019, 9, 11), 47815, 112.86, 120.32, 112.15, 117.52 },
                { new DateTime(2019, 9, 12), 76759, 115.02, 122.03, 114.67, 114.75 },
                { new DateTime(2019, 9, 15), 23492, 108.53, 120.46, 106.21, 116.85 },
                { new DateTime(2019, 9, 16), 56127, 114.97, 118.08, 113.55, 116.69 },
                { new DateTime(2019, 9, 17), 81142, 127.14, 128.23, 110.91, 117.25 },
                { new DateTime(2019, 9, 18), 46384, 118.89, 120.55, 108.09, 112.52 },
                { new DateTime(2019, 9, 19), 51005, 105.57, 112.58, 105.42, 109.12 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:F23"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Stock Volume-Open-High-Low-Close Chart";
            GrapeCity.Documents.Excel.Drawing.IAxis valueAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value);
            GrapeCity.Documents.Excel.Drawing.IAxis categoryAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Category);
            GrapeCity.Documents.Excel.Drawing.IAxis valueSecondaryAxis = shape.Chart.Axes.Item(GrapeCity.Documents.Excel.Drawing.AxisType.Value, GrapeCity.Documents.Excel.Drawing.AxisGroup.Secondary);
            valueAxis.MinimumScale = 0;
            valueAxis.MaximumScale = 150000;
            valueAxis.MajorUnit = 30000;
            categoryAxis.CategoryType = GrapeCity.Documents.Excel.Drawing.CategoryType.CategoryScale;
            categoryAxis.TickLabelSpacing = 5;
            valueSecondaryAxis.MajorUnit = 40;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.XYScatterChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.XYScatter, 250, 20, 360, 230);
            worksheet.Range["A1:D7"].Value = new object[,] {
                { "Blue", null, "Red", null },
                { 55, 964, 67, 475 },
                { 20, 825, 10, 163 },
                { 77, 840, 87, 224 },
                { 182, 596, 46, 196 },
                { 190, 384, 100, 377 },
                { 140, 503, 92, 47 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B7"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.SeriesCollection.Add(worksheet.Range["C1:D7"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Scatter Chart";
            //config markers style
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            GrapeCity.Documents.Excel.Drawing.ISeries series2 = shape.Chart.SeriesCollection[1];
            series1.MarkerStyle = Drawing.MarkerStyle.Square;
            series1.MarkerSize = 10;
            series2.MarkerSize = 10;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.XYScatterLinesChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.XYScatterLines, 250, 20, 360, 230);
            worksheet.Range["A1:B8"].Value = new object[,] {
                { 75, 250 },
                { 50, 125 },
                { 25, 375 },
                { 75, 250 },
                { 50, 875 },
                { 25, 625 },
                { 75, 750 },
                { 125, 500 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B8"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Scatter with Straight Lines and Markers Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.XYScatterSmooth" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.XYScatterSmoothNoMarkers, 250, 20, 360, 230);
            worksheet.Range["A1:B5"].Value = new object[,] {
                { 4, 2 },
                { 6, 1 },
                { 1, 2 },
                { 7, 4 },
                { 4, 4 },
            };
            worksheet.Range["A7:B11"].Value=new object[,] {
                { 9, 5 },
                { 7, 8 },
                { 9, 8 },
                { 5, 9 },
                { 2, 4 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B5"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.SeriesCollection.Add(worksheet.Range["A7:B11"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Scatter with Smooth Lines Chart";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartGallery.XYScatterSmoothWithMarkers" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.XYScatterSmooth, 250, 20, 360, 230);
            worksheet.Range["A1:B5"].Value = new object[,] {
                { 4, 2 },
                { 6, 1 },
                { 1, 2 },
                { 7, 4 },
                { 4, 4 },
            };
            worksheet.Range["A7:B11"].Value = new object[,] {
                { 9, 5 },
                { 7, 8 },
                { 9, 8 },
                { 5, 9 },
                { 2, 4 },
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B5"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.SeriesCollection.Add(worksheet.Range["A7:B11"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns);
            shape.Chart.ChartTitle.Text = "Scatter with Smooth Lines and Markers";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartLines.CreateConnectorLine" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.PieOfPie, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //connector line for pie of pie chart.
            shape.Chart.PieGroups[0].HasSeriesLines = true;
            shape.Chart.PieGroups[0].SeriesLines.Format.Line.Color.RGB = Color.Orange;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartLines.CreateDropLine" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Line, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            shape.Chart.LineGroups[0].HasDropLines = true;
            shape.Chart.LineGroups[0].DropLines.Format.Line.Color.RGB = Color.LightPink;
            shape.Chart.LineGroups[0].DropLines.Format.Line.Weight = 3;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartLines.CreateHiLoLine" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Line, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            shape.Chart.LineGroups[0].HasHiLoLines = true;
            shape.Chart.LineGroups[0].HiLoLines.Format.Line.Color.RGB = Color.LightPink;
            shape.Chart.LineGroups[0].HiLoLines.Format.Line.Weight = 3;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartLines.CreateSeriesLine" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnStacked, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            shape.Chart.ColumnGroups[0].HasSeriesLines = true;
            shape.Chart.ColumnGroups[0].SeriesLines.Format.Line.Color.RGB = Color.LightPink;
            shape.Chart.ColumnGroups[0].SeriesLines.Format.Line.Weight = 3;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartLines.CreateTrendline" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];

            series1.Trendlines.Add();
            series1.Trendlines[0].Type = GrapeCity.Documents.Excel.Drawing.TrendlineType.Linear;
            series1.Trendlines[0].Forward = 1;
            series1.Trendlines[0].Backward = 0.5;
            series1.Trendlines[0].Intercept = 2.5;
            series1.Trendlines[0].DisplayEquation = true;
            series1.Trendlines[0].DisplayRSquared = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartLines.CreateUpDownBars" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Line, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //config up down bars for line chart.
            shape.Chart.LineGroups[0].HasUpDownBars = true;
            shape.Chart.LineGroups[0].UpBars.Format.Fill.Color.RGB = Color.FromArgb(199, 235, 217);
            shape.Chart.LineGroups[0].DownBars.Format.Fill.Color.RGB = Color.LightPink;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartTitle.ConfigChartTitleRichText" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -20, 36, 27},
                {"Item3", 62, 70, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 50, 50}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //config chart title style with rich text
            shape.Chart.HasTitle = true;
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs.Add("ChartSubtitle");
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs.Add("ChartTitle", 0);
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs[0].Font.Color.RGB = Color.CornflowerBlue;
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs[0].Font.Size = 15;
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs[1].Font.Color.RGB = Color.Orange;
            shape.Chart.ChartTitle.TextFrame.TextRange.Paragraphs[1].Font.Size = 10;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.ChartTitle.ConfigChartTitleStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -20, 36, 27},
                {"Item3", 62, 70, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 50, 50}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //config chart title style
            shape.Chart.HasTitle = true;
            shape.Chart.ChartTitle.Text = "MyChartTitle";
            shape.Chart.ChartTitle.Font.Size = 15;
            shape.Chart.ChartTitle.Font.Name = "Bradley Hand ITC";
            shape.Chart.ChartTitle.Format.Fill.Color.RGB = Color.DarkOrange;
            shape.Chart.ChartTitle.Format.Line.Color.RGB = Color.CornflowerBlue;
            shape.Chart.ChartTitle.Format.Line.Weight = 1.5;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.DataLabel.ConfigDataLabelFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:B5"].Value = new object[,]
            {
                {null, "S1"},
                {"Item1", -20},
                {"Item2", 30},
                {"Item3", 50 },
                {"Item3", 40 }
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B5"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            series1.HasDataLabels = true;
            series1.DataLabels.ShowSeriesName = true;

            //set series1's all data label's format.
            series1.DataLabels.Format.Fill.Color.RGB = Color.Pink;
            series1.DataLabels.Format.Line.Color.RGB = Color.Green;
            series1.DataLabels.Format.Line.Weight = 1;

            //set series1's specific data label's format.
            series1.DataLabels[2].Format.Fill.Color.RGB = Color.LightGreen;
            series1.Points[2].DataLabel.Format.Line.Color.RGB = Color.Gray;
            series1.Points[2].DataLabel.Format.Line.Weight = 2;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.DataLabel.ConfigDataLabelText" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:B5"].Value = new object[,]
            {
                {null, "S1","S2"},
                {"Item1", -20,10},
                {"Item2", 30,60},
                {"Item3", 50 ,80},
                {"Item3", 40,70 }
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B5"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            series1.HasDataLabels = true;
            
            //customize data lables' text.
            series1.DataLabels.ShowCategoryName = true;
            series1.DataLabels.ShowSeriesName = true;
            series1.DataLabels.ShowLegendKey = true;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.DataPoint.ConfigDataPointFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
           
            //set data point format.
            series1.Points[2].Format.Fill.Color.RGB = Color.FromArgb(0,176,240);
            series1.Points[2].Format.Line.Color.RGB = Color.Blue;
            series1.Points[2].Format.Line.Weight = 1.5;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.DataPoint.ConfigNegativePoint" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];

            //if it is a negative point, it's color is red.
            series1.InvertIfNegative = true;
            series1.InvertColor.ObjectThemeColor = ThemeColor.Accent4;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.DataPoint.ConfigSecondarySection" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.PieOfPie, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            series1.HasDataLabels = true;

            //config secondary section for pie of pie chart
            shape.Chart.ChartGroups[0].SplitType = GrapeCity.Documents.Excel.Drawing.ChartSplitType.SplitByCustomSplit;
            series1.Points[0].SecondaryPlot = true;
            series1.Points[1].SecondaryPlot = false;
            series1.Points[2].SecondaryPlot = true;
            series1.Points[3].SecondaryPlot = false;
            series1.Points[4].SecondaryPlot = true;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Legend.ConfigLegendEntryFontStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 70, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            shape.Chart.HasLegend = true;
            GrapeCity.Documents.Excel.Drawing.ILegend legend = shape.Chart.Legend;
            //config legedn entry font style
            GrapeCity.Documents.Excel.Drawing.ILegendEntry legendentry = legend.LegendEntries[0];
            legendentry.Font.Color.RGB = Color.Red;
            legendentry.Font.Size = 15;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Legend.ConfigLegendFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 70, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            shape.Chart.HasLegend = true;
            //config legend font style
            GrapeCity.Documents.Excel.Drawing.ILegend legend = shape.Chart.Legend;
            legend.Font.Size = 12;
            legend.Font.Name = "Cooper Black";
            //config legend format
            legend.Format.Fill.Color.RGB = Color.LightGray;
            legend.Format.Line.Color.RGB = Color.Gray;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Legend.ConfigLegendPositionAndLayout" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -20, 36, 27},
                {"Item3", 52, 70, 30},
                {"Item4", 22, 33, -20},
                {"Item5", 23, 30, 30}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            shape.Chart.HasLegend = true;
            GrapeCity.Documents.Excel.Drawing.ILegend legend = shape.Chart.Legend;
            //position.
            legend.Position = GrapeCity.Documents.Excel.Drawing.LegendPosition.Left;
            //font.
            legend.Font.Color.RGB = Color.Red;
            legend.Font.Italic = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Markers.ConfigMarkersFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.LineMarkers, 250, 20, 360, 230);
            worksheet.Range["A1:B6"].Value = new object[,]
            {
                {null, "S1"},
                {"Item1", 10},
                {"Item2", -51},
                {"Item3", 52},
                {"Item4", 22},
                {"Item5", 40}
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            //config line markers style
            series1.MarkerFormat.Fill.Color.RGB = Color.CornflowerBlue;
            series1.MarkerFormat.Line.Style = GrapeCity.Documents.Excel.Drawing.LineStyle.ThickThin;
            series1.MarkerFormat.Line.Color.RGB = Color.LightGreen;
            series1.MarkerFormat.Line.Weight = 3;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Markers.ConfigMarkerStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.LineMarkers, 250, 20, 360, 230);
            worksheet.Range["A1:B6"].Value = new object[,]
            {
                {null, "S1"},
                {"Item1", 10},
                {"Item2", -51},
                {"Item3", 52},
                {"Item4", 22},
                {"Item5", 40}
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            //config line markers style
            series1.MarkerStyle = GrapeCity.Documents.Excel.Drawing.MarkerStyle.Square;
            series1.MarkerSize = 10;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.PlotArea.ChartJustPlotVisibleCell" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //Hidden row 3.
            worksheet.Range["3:3"].Hidden = true;
            //plot visible cells only, does not plot row 3.
            shape.Chart.PlotVisibleOnly = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.PlotArea.ConfigPlotAreaFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, 36, 27},
                {"Item3", 52, 50, -30},
                {"Item4", 22, 65, 30},
                {"Item5", 23, 40, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            GrapeCity.Documents.Excel.Drawing.IPlotArea plotarea = shape.Chart.PlotArea;
            plotarea.Format.Fill.Color.RGB = Color.LightGray;
            plotarea.Format.Line.Color.RGB = Color.Gray;
            plotarea.Format.Line.Weight = 1;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Series.AddSeries" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };

            //Add series
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
         
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Series.ChangeSeriesType" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };

            //Add series
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            GrapeCity.Documents.Excel.Drawing.ISeries series2 = shape.Chart.SeriesCollection[1];
            //change series2's chart type.
            series2.ChartType = GrapeCity.Documents.Excel.Drawing.ChartType.Line;
            series2.Format.Line.Weight = 2;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Series.ConfigBubbleChartLayout" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.Bubble, 250, 20, 350, 220);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            series1.HasDataLabels = true;

            shape.Chart.XYGroups[0].BubbleScale = 150;
            shape.Chart.XYGroups[0].SizeRepresents = GrapeCity.Documents.Excel.Drawing.SizeRepresents.SizeIsArea;
            shape.Chart.XYGroups[0].ShowNegativeBubbles = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Series.ConfigSeriesFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series1 = shape.Chart.SeriesCollection[0];
            //set series format.
            series1.Format.Fill.Color.RGB = Color.MediumSeaGreen;
            series1.Format.Line.Color.RGB = Color.Green;
            series1.Format.Line.Weight = 1.5;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Series.CreateSecondaryAxis" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:C6"].Value = new object[,]
            {
                { null, "S1", "S2"},
                { "Item1", 10, 25},
                { "Item2", -51, -36},
                { "Item3", 32, 64},
                { "Item4", 44, 80},
                { "Item5", 60,100}
            };

            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            GrapeCity.Documents.Excel.Drawing.ISeries series2 = shape.Chart.SeriesCollection[1];
            //add a secondary axis
            series2.AxisGroup = GrapeCity.Documents.Excel.Drawing.AxisGroup.Secondary;
            series2.ChartType = GrapeCity.Documents.Excel.Drawing.ChartType.Line;
          
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Series.DeleteSeries" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D6"].Value = new object[,]
                {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 25},
                {"Item2", -51, -36, 27},
                {"Item3", 52, -85, -30},
                {"Item4", 22, 65, 65},
                {"Item5", 23, 69, 69}
                };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            //delete chart series, make series count to 1.
            shape.Chart.SeriesCollection[2].Delete();
            shape.Chart.SeriesCollection[1].Delete();
            //Chart's series count is 1.
            var count = shape.Chart.SeriesCollection.Count;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Series.ExtendSeries" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:D4"].Value = new object[,]
            {
                {null, "S1", "S2", "S3"},
                {"Item1", 10, 25, 50},
                {"Item2", 15, -36, 40},
                {"Item3", 52, 40, -30}, 
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:D4"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);

            worksheet.Range["A12:D13"].Value = new object[,]
            {
                {"Item5", 10, 20, -30},
                {"Item6", 20, 40, 80},
            };

            //add new data point to existing series.
            shape.Chart.SeriesCollection.Extend(worksheet.Range["A12:D13"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Charts.Series.SetVaryColorForColumnChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddChart(GrapeCity.Documents.Excel.Drawing.ChartType.ColumnClustered, 250, 20, 360, 230);
            worksheet.Range["A1:B6"].Value = new object[,]
            {
                {null, "S1"},
                {"Item1", 10},
                {"Item2", -51},
                {"Item3", 52},
                {"Item4", 22},
                {"Item5", 23}
            };
            shape.Chart.SeriesCollection.Add(worksheet.Range["A1:B6"], GrapeCity.Documents.Excel.Drawing.RowCol.Columns, true, true);
            //set vary colors for column chart which only has one series.
            shape.Chart.ColumnGroups[0].VaryByCategories = true;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Comments.AddComment" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //create comment for range C3.
            IComment comment = worksheet.Range["C3"].AddComment("Range C3's comment.");

            //change comment's text.
            comment.Text = "Range C3's new comment.";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Comments.ClearComment" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["C3"].AddComment("Range C3's comment.");
            worksheet.Range["D4"].AddComment("Range D4's comment.");
            worksheet.Range["D5"].AddComment("Range D5's comment.");

            //delete a single cell comment.
            worksheet.Range["D5"].Comment.Delete();

            //clear a range of cells comment.
            worksheet.Range["C3:D4"].ClearComments();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Comments.ConfigCommentLayout" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            IComment commentC3 = worksheet.Range["C3"].AddComment("Range C3's comment.");
            commentC3.Shape.Line.Color.RGB = Color.LightGreen;
            commentC3.Shape.Line.Weight = 3;
            commentC3.Shape.Line.Style = GrapeCity.Documents.Excel.Drawing.LineStyle.ThickThin;
            commentC3.Shape.Line.DashStyle = GrapeCity.Documents.Excel.Drawing.LineDashStyle.Solid;
            commentC3.Shape.Fill.Color.RGB = Color.Pink;
            commentC3.Shape.Width = 100;
            commentC3.Shape.Height = 200;
            commentC3.Shape.TextFrame.TextRange.Font.Bold = true;
            commentC3.Visible = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Comments.SetRichTextForComment" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            IComment commentC3 = worksheet.Range["C3"].AddComment("This is a rich text comment:\r\n");

            //config the paragraph's style.
            commentC3.Shape.TextFrame.TextRange.Paragraphs[0].Font.Bold = true;

            //add runs for the paragraph.
            commentC3.Shape.TextFrame.TextRange.Paragraphs[0].Runs.Add("Run1 font size is 15.", 1);
            commentC3.Shape.TextFrame.TextRange.Paragraphs[0].Runs.Add("Run2 font strikethrough.", 2);
            commentC3.Shape.TextFrame.TextRange.Paragraphs[0].Runs.Add("Run3 font italic, green color.");

            //config the first run of the paragraph's style.
            commentC3.Shape.TextFrame.TextRange.Paragraphs[0].Runs[1].Font.Size = 15;
            //config the second run of the paragraph's style. 
            commentC3.Shape.TextFrame.TextRange.Paragraphs[0].Runs[2].Font.Strikethrough = true;

            //config the third run of the paragraph's style. 
            commentC3.Shape.TextFrame.TextRange.Paragraphs[0].Runs[3].Font.Italic = true;
            commentC3.Shape.TextFrame.TextRange.Paragraphs[0].Runs[3].Font.Color.RGB = Color.Green;

            //show comment.
            commentC3.Visible = true;

            commentC3.Shape.WidthInPixel = 300;
            commentC3.Shape.HeightInPixel = 100;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateAverageRule" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B:C"].ColumnWidth = 17;

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //weight above 1 std dev average, set its interior color to green.
            IAboveAverage averageCondition = worksheet.Range["E2:E7"].FormatConditions.AddAboveAverage();
            averageCondition.AboveBelow = AboveBelow.BelowAverage;
            averageCondition.NumStdDev = 1;
            averageCondition.Interior.Color = Color.Pink;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateCellValueRule" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B:C"].ColumnWidth = 17;

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //weight between 71 and 79, set its interior color to yellow.
            IFormatCondition condition = worksheet.Range["E2:E7"].FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Between, 66, 70) as IFormatCondition;
            condition.Interior.Color = Color.LightGreen;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateDatabBarRule" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //data bar rule.
            IDataBar dataBar = worksheet.Range["E2:E7"].FormatConditions.AddDatabar();

            dataBar.MinPoint.Type = ConditionValueTypes.LowestValue;
            dataBar.MinPoint.Value = null;
            dataBar.MaxPoint.Type = ConditionValueTypes.HighestValue;
            dataBar.MaxPoint.Value = null;

            dataBar.BarFillType = DataBarFillType.Gradient;
            dataBar.BarColor.Color = Color.Green;
            dataBar.Direction = DataBarDirection.Context;
            dataBar.AxisColor.Color = Color.Red;
            dataBar.AxisPosition = DataBarAxisPosition.Automatic;
            dataBar.NegativeBarFormat.BorderColorType = DataBarNegativeColorType.Color;
            dataBar.NegativeBarFormat.BorderColor.Color = Color.Blue;
            dataBar.NegativeBarFormat.ColorType = DataBarNegativeColorType.Color;
            dataBar.NegativeBarFormat.Color.Color = Color.Pink;
            dataBar.ShowValue = false;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateExpressionRule" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //expression rule, format weight greater than 80.
            IFormatCondition condition = worksheet.Range["E2:E7"].FormatConditions.Add(FormatConditionType.Expression, 0, "=E2&gt;68") as IFormatCondition;
            condition.Interior.Color = Color.LightPink;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateIconSetRule" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //icon set rule.
            IIconSetCondition condition = worksheet.Range["E2:E7"].FormatConditions.AddIconSetCondition();
            condition.IconSet = workbook.IconSets[IconSetType.Icon3Symbols];
            condition.IconCriteria[1].Operator = FormatConditionOperator.GreaterEqual;
            condition.IconCriteria[1].Value = 30;
            condition.IconCriteria[1].Type = ConditionValueTypes.Percent;
            condition.IconCriteria[2].Operator = FormatConditionOperator.GreaterEqual;
            condition.IconCriteria[2].Value = 70;
            condition.IconCriteria[2].Type = ConditionValueTypes.Percent;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateMultiRuleForRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //iconset rule
            IIconSetCondition iconset = worksheet.Range["E2:E7"].FormatConditions.AddIconSetCondition();
            iconset.IconSet = workbook.IconSets[IconSetType.Icon3TrafficLights1];

            //cell value rule added later, it has the highest priority, set StopIfTrue to true, if cell match condition, it will not apply icon set rule.
            IFormatCondition cellvalueRule = worksheet.Range["E2:E7"].FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Between, "66", "70") as IFormatCondition;
            cellvalueRule.Font.ThemeColor = ThemeColor.Accent1;
            cellvalueRule.StopIfTrue = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateThreeColorScaleRule" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //three color scale.
            IColorScale threeColorScaleRule = worksheet.Range["E2:E7"].FormatConditions.AddColorScale(ColorScaleType.ThreeColorScale);
            threeColorScaleRule.ColorScaleCriteria[0].Type = ConditionValueTypes.LowestValue;
            threeColorScaleRule.ColorScaleCriteria[0].FormatColor.Color = Color.Red;

            threeColorScaleRule.ColorScaleCriteria[1].Type = ConditionValueTypes.Percent;
            threeColorScaleRule.ColorScaleCriteria[1].Value = 30;
            threeColorScaleRule.ColorScaleCriteria[1].FormatColor.Color = Color.Yellow;

            threeColorScaleRule.ColorScaleCriteria[2].Type = ConditionValueTypes.HighestValue;
            threeColorScaleRule.ColorScaleCriteria[2].FormatColor.Color = Color.Green;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateTopBottomRule" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //top bottom rule.
            ITop10 condition = worksheet.Range["E2:E7"].FormatConditions.AddTop10();
            condition.TopBottom = TopBottom.Top;
            condition.Rank = 50;
            condition.Percent = true;
            condition.Interior.Color = Color.Red;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateTwoColorScaleRule" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //two color scale.
            IColorScale twoColorScaleRule = worksheet.Range["E2:E7"].FormatConditions.AddColorScale(ColorScaleType.TwoColorScale);
            twoColorScaleRule.ColorScaleCriteria[0].Type = ConditionValueTypes.Number;
            twoColorScaleRule.ColorScaleCriteria[0].Value = 62;
            twoColorScaleRule.ColorScaleCriteria[0].FormatColor.Color = Color.Red;

            twoColorScaleRule.ColorScaleCriteria[1].Type = ConditionValueTypes.Number;
            twoColorScaleRule.ColorScaleCriteria[1].Value = 76;
            twoColorScaleRule.ColorScaleCriteria[1].FormatColor.Color = Color.Green;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.CreateUniqueRule" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 80, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 72, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 71, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 80, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 58, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 71, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //Unique rule.
            IUniqueValues condition = worksheet.Range["E2:E7"].FormatConditions.AddUniqueValues();
            condition.DupeUnique = DupeUnique.Unique;
            condition.Font.Name = "Arial";
            condition.Interior.Color = Color.Pink;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.ConditionalFormatting.DeleteConditionalFormatRules" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };
            worksheet.Range["A1:F7"].Value = data;

            //iconset rule
            IIconSetCondition iconset = worksheet.Range["E2:E7"].FormatConditions.AddIconSetCondition();
            iconset.IconSet = workbook.IconSets[IconSetType.Icon3TrafficLights1];

            //cell value rule added later, it has the highest priority, set StopIfTrue to true, if cell match condition, it will not apply icon set rule.
            IFormatCondition cellvalueRule = worksheet.Range["E2:E7"].FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Between, "66", "70") as IFormatCondition;
            cellvalueRule.StopIfTrue = true;

            //delete icon set rule.
            (worksheet.Range["E2:E7"].FormatConditions[1] as IIconSetCondition).Delete();

            //delete all the rules
            worksheet.Range["E2:E7"].FormatConditions.Delete();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.CustomFunctions.MyAddFunction" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            GrapeCity.Documents.Excel.Workbook.AddCustomFunction(new MyAddFunctionX());

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1"].Value = 1;
            worksheet.Range["B1"].Value = 2;
            worksheet.Range["C1"].Formula = "=MyAdd(A1, B1)";
            //Range["C1"]'s value is 3.
            var result = worksheet.Range["C1"].Value;

            worksheet.Range["E1:F2"].Value = new object[,] { { 1, 3},
                                                             { 2, 4}};

            //Custom function use in array formula.
            worksheet.Range["G1:G2"].FormulaArray = "=MyAdd(E1:E2, F1:F2)";

            //Range["G1"]'s value is 4, Range["G2"]'s value is 6.
            var resultG1 = worksheet.Range["G1"].Value;
            var resultG2 = worksheet.Range["G2"].Value;

            /* Implementation of MyAddFunctionX

            public class MyAddFunctionX : CustomFunction
            {
                public MyAddFunctionX()
                    : base("MyAdd", FunctionValueType.Number, new Parameter[] { new Parameter(FunctionValueType.Number), new Parameter(FunctionValueType.Number) })
                {

                }

                public override object Evaluate(object[] arguments, ICalcContext context)
                {
                    return (double)arguments[0] + (double)arguments[1];
                }
            }

            */
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.CustomFunctions.MyConcatenateFunction" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            GrapeCity.Documents.Excel.Workbook.AddCustomFunction(new MyConcatenateFunctionX());

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1"].Formula = "=MyConcatenate(\"I\", \" \", \"live\", \" \", \"in\", \" \", \"Xi'an\", \".\")";
            worksheet.Range["A2"].Formula = "=MyConcatenate(A1, \"haha.\")";

            worksheet.Range["B1"].Value = 12;
            worksheet.Range["B2"].Value = 34;
            worksheet.Range["B3"].Formula = "=MyConcatenate(B1, B2)";

            worksheet.Range["M5:N5"].FormulaArray = "=CONCATENATE({\"aa\",\"bb\"}, 12, 34)";

            //"I live in Xi'an."
            var resultA1 = worksheet.Range["A1"].Value;
            //"I live in Xi'an.haha."
            var resultA2 = worksheet.Range["A2"].Value;
            //"1234"
            var resultB3 = worksheet.Range["B3"].Value;
            //"aa1234"
            var resultM5 = worksheet.Range["M5"].Value;
            //"bb1234"
            var resultN5 = worksheet.Range["N5"].Value;

            /* Implementation of MyAddFunctionX

            public class MyConcatenateFunctionX : CustomFunction
            {
                public MyConcatenateFunctionX()
                    : base("MyConcatenate", FunctionValueType.Text, CreateParameters())
                {

                }

                private static Parameter[] CreateParameters()
                {
                    Parameter[] parameters = new Parameter[254];
                    for (int i = 0; i &lt; 254; i++)
                    {
                        parameters[i] = new Parameter(FunctionValueType.Variant);
                    }

                    return parameters;
                }

                public override object Evaluate(object[] arguments, ICalcContext context)
                {
                    StringBuilder sb = new StringBuilder();

                    string result = string.Empty;
                    foreach (var argument in arguments)
                    {
                        if (argument is CalcError)
                        {
                            return argument;
                        }
                        if (argument is string || argument is double)
                        {
                            sb.Append(argument);
                        }
                    }

                    return sb.ToString();
                }

            }

            */
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.CustomFunctions.MyConditionalSumFunction" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            GrapeCity.Documents.Excel.Workbook.AddCustomFunction(new MyConditionalSumFunctionX());

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:A10"].Value = new object[,] {
                                                                {1 },
                                                                {2 },
                                                                {3 },
                                                                {4 },
                                                                {5 },
                                                                {6 },
                                                                {7 },
                                                                {8 },
                                                                {9 },
                                                                {10 }};
            IFormatCondition cellValueRule = worksheet.Range["A1:A10"].FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Greater, 5) as IFormatCondition;
            cellValueRule.Interior.Color = System.Drawing.Color.Red;

            //Sum cells value which display format interior color are red.
            worksheet.Range["C1"].Formula = "=MyConditionalSum(A1:A10)";

            //Range["C1"]'s value is 40.
            var result = worksheet.Range["C1"].Value;


            /* Implementation of MyConditionalSumFunctionX
            
            public class MyConditionalSumFunctionX : CustomFunction
            {
                public MyConditionalSumFunctionX() : base("MyConditionalSum", FunctionValueType.Number, CreateParameters())
                {

                }

                private static Parameter[] CreateParameters()
                {
                    Parameter[] parameters = new Parameter[254];
                    for (int i = 0; i &lt; 254; i++)
                    {
                        parameters[i] = new Parameter(FunctionValueType.Object, true);
                    }

                    return parameters;
                }

                public override object Evaluate(object[] arguments, ICalcContext context)
                {
                    double sum = 0d;
                    foreach (var argument in arguments)
                    {
                        foreach (var item in Enumerate(argument))
                        {
                            if (item is CalcError)
                            {
                                return item;
                            }
                            if (item is double)
                            {
                                sum += (double)item;
                            }
                        }
                    }

                    return sum;
                }

                private static IEnumerable&lt;object&gt; Enumerate(object obj)
                {
                    if (obj is IEnumerable&lt;object&gt;)
                    {
                        foreach (var item in obj as IEnumerable&lt;object&gt;)
                        {
                            foreach (var item2 in Enumerate(item))
                            {
                                yield return item2;
                            }
                        }
                    }
                    else if (obj is object[,])
                    {
                        var array = obj as object[,];
                        int rowCount = array.GetLength(0);
                        int colCount = array.GetLength(1);
                        for (int i = 0; i &lt; rowCount; i++)
                        {
                            for (int j = 0; j &lt; colCount; j++)
                            {
                                yield return array[i, j];
                            }
                        }
                    }
                    else if (obj is CalcReference)
                    {
                        foreach (var item in Enumerate(obj as CalcReference))
                        {
                            yield return item;
                        }
                    }

                    yield return obj;
                }

                private static IEnumerable&lt;object&gt; Enumerate(CalcReference reference)
                {
                    foreach (var range in reference.GetRanges())
                    {
                        int rowCount = range.Rows.Count;
                        int colCount = range.Columns.Count;
                        for (int i = 0; i &lt; rowCount; i++)
                        {
                            for (int j = 0; j &lt; colCount; j++)
                            {
                                if (range.Cells[i, j].DisplayFormat.Interior.Color == System.Drawing.Color.Red)
                                {
                                    yield return range.Cells[i, j].Value;
                                }
                            }
                        }
                    }
                }
            }

            */
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.CustomFunctions.MyIsErrorFunction" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            GrapeCity.Documents.Excel.Workbook.AddCustomFunction(new MyIsErrorFunctionX());

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["A1"].Value = CalcError.Num;
            worksheet.Range["A2"].Value = 100;

            worksheet.Range["B1"].Formula = "=MyIsError(A1)";
            worksheet.Range["B2"].Formula = "=MyIsError(A2)";

            //Range["B1"]'s value is true.
            var resultB1 = worksheet.Range["B1"].Value;

            //Range["B2"]'s value is false.
            var resultB2 = worksheet.Range["B2"].Value;


            /* Implementation of MyIsErrorFunctionX
  
            public class MyIsErrorFunctionX : CustomFunction
            {
                public MyIsErrorFunctionX()
                    : base("MyIsError", FunctionValueType.Boolean, new Parameter[] { new Parameter(FunctionValueType.Variant) })
                {

                }

                public override object Evaluate(object[] arguments, ICalcContext context)
                {
                    if (arguments[0] is CalcError)
                    {
                        if ((CalcError)arguments[0] != CalcError.None &amp;&amp; (CalcError)arguments[0] != CalcError.GettingData)
                        {
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }

                    return false;
                }
            }

            */
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.CustomFunctions.MyIsMergedRangeFunction" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            GrapeCity.Documents.Excel.Workbook.AddCustomFunction(new MyIsMergedRangeFunctionX());

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["A1:B2"].Merge();

            worksheet.Range["C1"].Formula = "=MyIsMergedRange(A1)";
            worksheet.Range["C2"].Formula = "=MyIsMergedRange(H2)";

            //A1 is a merged cell, Range["C1"]'s value is true.
            var resultC1 = worksheet.Range["C1"].Value;

            //H2 is not a merged cell, Range["C2"]'s value is false.
            var resultC2 = worksheet.Range["C2"].Value;


            /* Implementation of MyIsErrorFunctionX
            
            public class MyIsMergedRangeFunctionX : CustomFunction
            {
                public MyIsMergedRangeFunctionX()
                    : base("MyIsMergedRange", FunctionValueType.Boolean, new Parameter[] { new Parameter(FunctionValueType.Object, true) })
                {

                }

                public override object Evaluate(object[] arguments, ICalcContext context)
                {
                    if (arguments[0] is CalcReference)
                    {
                        IEnumerable&lt;IRange&gt; ranges = (arguments[0] as CalcReference).GetRanges();

                        foreach (var range in ranges)
                        {
                            return range.MergeCells;
                        }
                    }

                    return false;
                }
            }              

            */
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.CustomFunctions.MySumFunction" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            GrapeCity.Documents.Excel.Workbook.AddCustomFunction(new MySumFunctionX());

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1"].Value = 1;
            worksheet.Range["B1"].Value = 2;
            worksheet.Range["C1"].Formula = "=MySum(A1:B1, 2, {3,4})";
            
            //Range["C1"]'s value is 12.
            var result = worksheet.Range["C1"].Value;



            /* Implementation of MySumFunctionX
            
            public class MySumFunctionX : CustomFunction
            {
                public MySumFunctionX() : base("MYSUM", FunctionValueType.Number, CreateParameters())
                {

                }

                private static Parameter[] CreateParameters()
                {
                    Parameter[] parameters = new Parameter[254];
                    for (int i = 0; i &lt; 254; i++)
                    {
                        parameters[i] = new Parameter(FunctionValueType.Object);
                    }

                    return parameters;
                }

                public override object Evaluate(object[] arguments, ICalcContext context)
                {
                    double sum = 0d;
                    foreach (var argument in arguments)
                    {
                        foreach (var item in Enumerate(argument))
                        {
                            if (item is CalcError)
                            {
                                return item;
                            }
                            if (item is double)
                            {
                                sum += (double)item;
                            }
                        }
                    }

                    return sum;
                }

                private static IEnumerable&lt;object&gt; Enumerate(object obj)
                {
                    if (obj is IEnumerable&lt;object&gt;)
                    {
                        foreach (var item in obj as IEnumerable&lt;object&gt;)
                        {
                            foreach (var item2 in Enumerate(item))
                            {
                                yield return item2;
                            }
                        }
                    }
                    else if (obj is object[,])
                    {
                        var array = obj as object[,];
                        int rowCount = array.GetLength(0);
                        int colCount = array.GetLength(1);
                        for (int i = 0; i &lt; rowCount; i++)
                        {
                            for (int j = 0; j &lt; colCount; j++)
                            {
                                yield return array[i, j];
                            }
                        }
                    }

                    if (obj != null)
                    {
                        yield return obj;
                    }
                }
            }

            */
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.DataValidation.CreateCustomValidation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["A2"].Value = 1;
            worksheet.Range["A3"].Value = 2;

            worksheet.Range["C2"].Value = 0;

            //create custom validation, if the expression "=$C$2" result is true, the cell's validation will be true, otherwise, it is false.
            //when use custom validation, validationOperator and formula2 parameters will be ignored even if you have given.
            worksheet.Range["A2:A3"].Validation.Add(ValidationType.Custom, ValidationAlertStyle.Information, formula1:"=$C$2");

            //judge if Range["A2:A3"] has validation.
            for (int i = 1; i &lt;= 2; i++)
            {
                if (worksheet.Range[i, 0].HasValidation)
                {
                    //set the range[i, 0]'s interior color.
                    worksheet.Range[i, 0].Interior.Color = Color.LightBlue;
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.DataValidation.CreateDateValidation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["C2:E4"].Value = new object[,]
            {
                {new DateTime(2020, 12, 1), new DateTime(2020, 12, 14), new DateTime(2020, 12, 15) },
                {new DateTime(2020, 12, 18), new DateTime(2020, 12, 19), new DateTime(2020, 12, 30) },
                {new DateTime(2020, 12, 31), new DateTime(2019, 12, 13), new DateTime(2019, 12, 15) }
            };

            //create date validation.
            worksheet.Range["C2:E4"].Validation.Add(ValidationType.Date, ValidationAlertStyle.Stop, ValidationOperator.Between, new DateTime(2020, 12, 13), new DateTime(2020, 12, 18));

            //set column width just for export shown.
            worksheet.Range["C:E"].EntireColumn.ColumnWidthInPixel = 120;

            //judge if Range["C2:E4"] has validation.
            for (int i = 1; i &lt;= 3; i++)
            {
                for (int j = 2; j &lt;= 4; j++)
                {
                    if (worksheet.Range[i, j].HasValidation)
                    {
                        //set the range[i, j]'s interior color.
                        worksheet.Range[i, j].Interior.Color = Color.LightBlue;
                    }
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.DataValidation.CreateDecimalValidation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["C2:E4"].Value = new object[,]
            {
                {1, 3.0, 3.4},
                {7, 9, 102.7},
                {102.8, 110, 120}
            };

            //add decimal validation.
            worksheet.Range["C2:E4"].Validation.Add(ValidationType.Decimal, ValidationAlertStyle.Stop, ValidationOperator.Between, 3.4, 102.8);
            IValidation validation = worksheet.Range["C2:E4"].Validation;
            validation.IgnoreBlank = true;
            validation.InputTitle = "Tips";
            validation.InputMessage = "Input a decimal value between 3.4 and 102.8, please.";
            validation.ErrorTitle = "Error";
            validation.ErrorMessage = "input value does not between 3.4 and 102.8.";
            validation.ShowInputMessage = true;
            validation.ShowError = true;

            //judge if Range["C2:E4"] has validation.
            for (int i = 1; i &lt;= 3; i++)
            {
                for (int j = 2; j &lt;= 4; j++)
                {
                    if (worksheet.Range[i, j].HasValidation)
                    {
                        //set the range[i, j]'s interior color.
                        worksheet.Range[i, j].Interior.Color = Color.LightBlue;
                    }
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.DataValidation.CreateListValidation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["A1"].Value = "aaa";
            worksheet.Range["A2"].Value = "bbb";
            worksheet.Range["A3"].Value = "ccc";

            worksheet.Range["C2:E4"].Value = new object[,]
            {
                {"aaa", "bbb", "ccc"},
                {"aaa1", "bbb1", "ccc1"},
                {"aaa2", "bbb2", "ccc2"}
            };

            //create list validation.
            worksheet.Range["C2:E4"].Validation.Add(ValidationType.List, ValidationAlertStyle.Stop, ValidationOperator.Between, "=$a$1:$a$3");
            IValidation validation = worksheet.Range["C2:E4"].Validation;
            validation.InCellDropdown = true;

            //judge if Range["C2:E4"] has validation.
            for (int i = 1; i &lt;= 3; i++)
            {
                for (int j = 2; j &lt;= 4; j++)
                {
                    if (worksheet.Range[i, j].HasValidation)
                    {
                        //set the range[i, j]'s interior color.
                        worksheet.Range[i, j].Interior.Color = Color.LightBlue;
                    }
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.DataValidation.CreateTextLength" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["C2:E4"].Value = new object[,]
            {
                {"aa", "bb", "aa1"},
                {"ccc", "dddd", "dddd1"},
                {"ff", "ffff", "ffff1"}
            };

            //create text length validation, text length between 2 and 3.
            worksheet.Range["C2:E4"].Validation.Add(ValidationType.TextLength, ValidationAlertStyle.Stop, ValidationOperator.Between, 2, 3);

            //judge if Range["C2:E4"] has validation.
            for (int i = 1; i &lt;= 3; i++)
            {
                for (int j = 2; j &lt;= 4; j++)
                {
                    if (worksheet.Range[i, j].HasValidation)
                    {
                        //set the range[i, j]'s interior color.
                        worksheet.Range[i, j].Interior.Color = Color.LightBlue;
                    }
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.DataValidation.CreateTimeValidation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["C2:E4"].Value = new object[,]
            {
                {new TimeSpan(13, 0, 0), new TimeSpan(13, 29, 59), new TimeSpan(13, 30, 0)},
                {new TimeSpan(14, 0, 0), new TimeSpan(15, 0, 0), new TimeSpan(16, 30, 0)},
                {new TimeSpan(19, 0, 0), new TimeSpan(18, 29, 59), new TimeSpan(18, 30, 0)}
            };

            //create time validation.
            worksheet.Range["C2:E4"].Validation.Add(ValidationType.Time, ValidationAlertStyle.Stop, ValidationOperator.Between, new TimeSpan(13, 30, 0), new TimeSpan(18, 30, 0));

            //judge if Range["C2:E4"] has validation.
            for (int i = 1; i &lt;= 3; i++)
            {
                for (int j = 2; j &lt;= 4; j++)
                {
                    if (worksheet.Range[i, j].HasValidation)
                    {
                        //set the range[i, j]'s interior color.
                        worksheet.Range[i, j].Interior.Color = Color.LightBlue;
                    }
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.DataValidation.CreateWholeNumberValidation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["C2:E4"].Value = new object[,]
            {
                {1, 3, 5},
                {7, 9, 11},
                {13, 15, 17}
            };

            //add whole number validation.
            worksheet.Range["C2:E4"].Validation.Add(ValidationType.Whole, ValidationAlertStyle.Stop, ValidationOperator.Between, 1, 8);
            IValidation validation = worksheet.Range["C2:E4"].Validation;
            validation.IgnoreBlank = true;
            validation.InputTitle = "Tips";
            validation.InputMessage = "Input a value between 1 and 8, please";
            validation.ErrorTitle = "Error";
            validation.ErrorMessage = "input value does not between 1 and 8";
            validation.ShowInputMessage = true;
            validation.ShowError = true;

            //judge if Range["C2:E4"] has validation.
            for (int i = 1; i &lt;= 3; i++)
            {
                for (int j = 2; j &lt;= 4; j++)
                {
                    if (worksheet.Range[i, j].HasValidation)
                    {
                        //set the range[i, j]'s interior color.
                        worksheet.Range[i, j].Interior.Color = Color.LightBlue;
                    }
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.DataValidation.DeleteValidation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["C2:E4"].Value = new object[,]
            {
                {new TimeSpan(13, 0, 0), new TimeSpan(13, 29, 59), new TimeSpan(13, 30, 0)},
                {new TimeSpan(14, 0, 0), new TimeSpan(15, 0, 0), new TimeSpan(16, 30, 0)},
                {new TimeSpan(19, 0, 0), new TimeSpan(18, 29, 59), new TimeSpan(18, 30, 0)}
            };

            //create time validation.
            worksheet.Range["C2:E4"].Validation.Add(ValidationType.Time, ValidationAlertStyle.Stop, ValidationOperator.Between, new TimeSpan(13, 30, 0), new TimeSpan(18, 30, 0));

            //delete validation.
            worksheet.Range["C2:E4"].Validation.Delete();

            //judge if Range["C2:E4"] has validation.
            for (int i = 1; i &lt;= 3; i++)
            {
                for (int j = 2; j &lt;= 4; j++)
                {
                    if (worksheet.Range[i, j].HasValidation)
                    {
                        //set the range[i, j]'s interior color.
                        worksheet.Range[i, j].Interior.Color = Color.LightBlue;
                    }
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.DataValidation.ModifyValidation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["C2:E4"].Value = new object[,]
            {
                {new TimeSpan(13, 0, 0), new TimeSpan(13, 29, 59), new TimeSpan(13, 30, 0)},
                {new TimeSpan(14, 0, 0), new TimeSpan(15, 0, 0), new TimeSpan(16, 30, 0)},
                {new TimeSpan(19, 0, 0), new TimeSpan(18, 29, 59), new TimeSpan(18, 30, 0)}
            };

            //create time validation.
            worksheet.Range["C2:E4"].Validation.Add(ValidationType.Time, ValidationAlertStyle.Stop, ValidationOperator.Between, new TimeSpan(13, 30, 0), new TimeSpan(18, 30, 0));

            //Modify validation.
            worksheet.Range["C2:E4"].Validation.Formula1 = new TimeSpan(14, 30, 0);
            worksheet.Range["C2:E4"].Validation.Formula2 = new TimeSpan(19, 0, 0);

            //judge if Range["C2:E4"] has validation.
            for (int i = 1; i &lt;= 3; i++)
            {
                for (int j = 2; j &lt;= 4; j++)
                {
                    if (worksheet.Range[i, j].HasValidation)
                    {
                        //set the range[i, j]'s interior color.
                        worksheet.Range[i, j].Interior.Color = Color.LightBlue;
                    }
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.ChangeWorksheetFilterRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["D3"].Value = "Numbers";
            worksheet.Range["D4"].Value = 1;
            worksheet.Range["D5"].Value = 2;
            worksheet.Range["D6"].Value = 3;

            //first time invoke. worksheet's filter range will be D3:D6.
            worksheet.Range["D3:D6"].AutoFilter(0, "&lt;&gt;2");

            //set AutoFilterMode to false. must set this property before, otherwise, subsequent code can not take effort.
            worksheet.AutoFilterMode = false;

            worksheet.Range["A5"].Value = "Numbers";
            worksheet.Range["A6"].Value = 1;
            worksheet.Range["A7"].Value = 2;
            worksheet.Range["A8"].Value = 3;

            //second time invoke. worksheet's filter range will change to A5:A8.
            worksheet.Range["A5:A8"].AutoFilter(0, "&lt;&gt;2");
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.ClearFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;
            worksheet.Range["A1:F7"].AutoFilter(4, "&lt;80");
            worksheet.Range["A1:F7"].AutoFilter(0, "*e*");
            worksheet.Range["A1:F7"].AutoFilter(1, "=Washington");

            //clear second column filter only.
            worksheet.Range["A1:F7"].AutoFilter(1);

            //clear all filters
            worksheet.AutoFilter.ShowAllData();

            //another way to clear all filters, same as AutoFilter.ShowAllData()
            worksheet.ShowAllData();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.MultiSelectFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;
            worksheet.Range["E2:E7"].NumberFormat = "0.00";
            //multi select, selcet the weight equals to 80.00 and 58.00.
            worksheet.Range["A1:F7"].AutoFilter(4, new object[] { "62.00", "76.00" }, AutoFilterOperator.Values);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.ReApplyFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;
            //Weight less than 80.
            worksheet.Range["A1:F7"].AutoFilter(4, "&lt;72");
            
            //change filter range data.
            worksheet.Range["E4"].Value = 71;
            //re-apply filter condition, row 4 will be shown. 
            worksheet.AutoFilter.ApplyFilter();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.DateFiltering.DateDynamicFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //filter all dates in February.
            worksheet.Range["A1:F7"].AutoFilter(2, DynamicFilterType.M2, AutoFilterOperator.Dynamic);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.DateFiltering.DateFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            var criteria1 = new DateTime(1972, 7, 3).ToString();
            var criteria2 = new DateTime(1993, 2, 15).ToString();
            //filter date between 1972.7.3 and 1993.2.15
            worksheet.Range["A1:F7"].AutoFilter(2, "&gt;=" + criteria1, AutoFilterOperator.And, "&lt;=" + criteria2);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.FilteringByColor.FilterByAutomaticFontColor" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;
            worksheet.Range["E2"].Font.Color = Color.Green;
            worksheet.Range["E5"].Font.Color = Color.Green;
            worksheet.Range["E6"].Font.Color = Color.Red;

            //filter in the rows which font color is automatic color.
            worksheet.Range["A1:F7"].AutoFilter(4, null, AutoFilterOperator.AutomaticFontColor);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.FilteringByColor.FilterByCellColor" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;
            worksheet.Range["E2"].Interior.Color = Color.Green;
            worksheet.Range["E5"].Interior.Color = Color.Green;
            worksheet.Range["E6"].Interior.Color = Color.Red;

            //filter in the rows which cell color is green.
            worksheet.Range["A1:F7"].AutoFilter(4, worksheet.Range["E2"].Interior.Color, AutoFilterOperator.CellColor);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.FilteringByColor.FilterByFontColor" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;
            worksheet.Range["E2"].Font.Color = Color.Green;
            worksheet.Range["E5"].Font.Color = Color.Green;
            worksheet.Range["E6"].Font.Color = Color.Red;

            //filter in the rows which font color is green.
            worksheet.Range["A1:F7"].AutoFilter(4, worksheet.Range["E2"].Font.Color, AutoFilterOperator.FontColor);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.FilteringByColor.FilterByNoFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;
            worksheet.Range["E2"].Interior.Color = Color.Green;
            worksheet.Range["E5"].Interior.Color = Color.Green;
            worksheet.Range["E6"].Interior.Color = Color.Red;

            //filter in the rows which cell color is no fill.
            worksheet.Range["A1:F7"].AutoFilter(4, null, AutoFilterOperator.NoFill);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.FilteringByIcon.FilterByIcon" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            IIconSetCondition iconset = worksheet.Range["E2:E7"].FormatConditions.AddIconSetCondition();
            iconset.IconSet = workbook.IconSets[IconSetType.Icon3TrafficLights1];

            //filter in the rows which icon is green light.
            worksheet.Range["A1:F7"].AutoFilter(4, workbook.IconSets[IconSetType.Icon3TrafficLights1][2], AutoFilterOperator.Icon);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.FilteringByIcon.FilterByNoIcon" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            IIconSetCondition iconset = worksheet.Range["E2:E7"].FormatConditions.AddIconSetCondition();
            iconset.IconSet = workbook.IconSets[IconSetType.Icon3TrafficLights1];

            IFormatCondition condition = worksheet.Range["E2:E7"].FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Between, "71", "79") as IFormatCondition;
            condition.StopIfTrue = true;

            //filter in the rows which has no icon.
            worksheet.Range["A1:F7"].AutoFilter(4, null, AutoFilterOperator.NoIcon);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.NumberFiltering.NumberFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //Weight less than 80.
            worksheet.Range["A1:F7"].AutoFilter(4, "&lt;72");
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Filtering.TextFiltering.TextFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //Name contains "e".
            worksheet.Range["A1:F7"].AutoFilter(0, "*e*");
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.ApplyStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //Change to build in name style.
            worksheet.Range["A1"].Value = "Bad";
            worksheet.Range["A1"].Style = workbook.Styles["Bad"];

            //Change to custom name style.
            //Add custom name style.
            IStyle style = workbook.Styles.Add("testStyle");

            //Config custom name style settings begin.
            //Border
            style.Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.Thin;
            style.Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thick;
            style.Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Double;
            style.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Double;
            style.Borders.Color = Color.FromArgb(0, 255, 0);

            //Font
            style.Font.ThemeColor = ThemeColor.Accent1;
            style.Font.TintAndShade = 0.8;
            style.Font.Italic = true;
            style.Font.Bold = true;
            style.Font.Name = "LiSu";
            style.Font.Size = 28;
            style.Font.Strikethrough = true;
            style.Font.Subscript = true;
            style.Font.Superscript = false;
            style.Font.Underline = UnderlineType.Double;

            //Protection
            style.FormulaHidden = true;
            style.Locked = false;

            //Number
            style.NumberFormat = "#,##0_);[Red](#,##0)";

            //Alignment
            style.HorizontalAlignment = HorizontalAlignment.Right;
            style.VerticalAlignment = VerticalAlignment.Bottom;
            style.WrapText = true;
            style.IndentLevel = 5;
            style.Orientation = 45;

            //Fill
            style.Interior.ColorIndex = 5;
            style.Interior.Pattern = GrapeCity.Documents.Excel.Pattern.Down;
            style.Interior.PatternColor = Color.FromArgb(0, 0, 255);


            style.IncludeAlignment = false;
            style.IncludeBorder = true;
            style.IncludeFont = false;
            style.IncludeNumber = true;
            style.IncludePatterns = false;
            style.IncludeProtection = true;
            //Config custom name style settings end.

            //Set range's style to custom name style.
            worksheet.Range["A2"].Value = "my test style";
            worksheet.Range["A2"].Style = worksheet.Workbook.Styles["testStyle"];

            worksheet.Range["A2"].RowHeightInPixel = 60;
            worksheet.Range["A2"].ColumnWidthInPixel = 150;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.CreateCustomStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            //Add custom name style.
            IStyle style = workbook.Styles.Add("testStyle");

            //Config custom name style settings begin.
            //Border
            style.Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.Thin;
            style.Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thick;
            style.Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Double;
            style.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Double;
            style.Borders.Color = Color.FromArgb(0, 255, 0);

            //Font
            style.Font.ThemeColor = ThemeColor.Accent1;
            style.Font.TintAndShade = 0.8;
            style.Font.Italic = true;
            style.Font.Bold = true;
            style.Font.Name = "LiSu";
            style.Font.Size = 28;
            style.Font.Strikethrough = true;
            style.Font.Subscript = true;
            style.Font.Superscript = false;
            style.Font.Underline = UnderlineType.Double;

            //Protection
            style.FormulaHidden = true;
            style.Locked = false;

            //Number
            style.NumberFormat = "#,##0_);[Red](#,##0)";

            //Alignment
            style.HorizontalAlignment = HorizontalAlignment.Right;
            style.VerticalAlignment = VerticalAlignment.Bottom;
            style.WrapText = true;
            style.IndentLevel = 5;
            style.Orientation = 45;

            //Fill
            style.Interior.ColorIndex = 5;
            style.Interior.Pattern = GrapeCity.Documents.Excel.Pattern.Down;
            style.Interior.PatternColor = Color.FromArgb(0, 0, 255);


            style.IncludeAlignment = false;
            style.IncludeBorder = true;
            style.IncludeFont = false;
            style.IncludeNumber = true;
            style.IncludePatterns = false;
            style.IncludeProtection = true;
            //Config custom name style settings end.

            //Set range's style to custom name style.
            worksheet.Range["A1"].Value = "My test style";
            worksheet.Range["A1"].Style = worksheet.Workbook.Styles["testStyle"];

            worksheet.Range["A2"].RowHeightInPixel = 60;
            worksheet.Range["A2"].ColumnWidthInPixel = 150;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.CreateStyleBasedOn" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1"].Style = workbook.Styles["Good"];
            worksheet.Range["A1"].Value = "Good";

            // Create and modify a style based on current existing style
            IStyle myGood = workbook.Styles.Add("MyGood", workbook.Styles["Good"]);
            myGood.Font.Bold = true;
            myGood.Font.Italic = true;

            worksheet.Range["B1"].Style = workbook.Styles["MyGood"];
            worksheet.Range["B1"].Value = "MyGood";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.GetDisplayFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //Range A1's displaying color is table style
            worksheet.Tables.Add(worksheet.Range["A1:E5"], true);
            var color_A1 = worksheet.Range["A1"].DisplayFormat.Interior.Color;

            //Range A1's displaying color will be cell style, yellow.
            worksheet.Range["A1"].Interior.Color = Color.Yellow;
            var color_A1_1 = worksheet.Range["A1"].DisplayFormat.Interior.Color;

            //Range A1's displaying color will be conditional format style, green.
            IFormatCondition condition = worksheet.Range["A1"].FormatConditions.Add(FormatConditionType.NoBlanksCondition) as IFormatCondition;
            condition.Interior.Color = Color.Green;
            var color_A1_2 = worksheet.Range["A1"].DisplayFormat.Interior.Color;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Alignment.HAlignVAlign" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Columns[0].ColumnWidth = 17;

            IRange rangeA1 = worksheet.Range["A1"];
            rangeA1.Value = "Right and top";
            rangeA1.HorizontalAlignment = HorizontalAlignment.Right;
            rangeA1.VerticalAlignment = VerticalAlignment.Top;

            IRange rangeA2 = worksheet.Range["A2"];
            rangeA2.Value = "Center";
            rangeA2.HorizontalAlignment = HorizontalAlignment.Center;
            rangeA2.VerticalAlignment = VerticalAlignment.Center;

            IRange rangeA3 = worksheet.Range["A3"];
            rangeA3.Value = "Left and bottom, indent";
            rangeA3.IndentLevel = 1;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Alignment.RotateCellContents" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            IRange rangeB2 = worksheet.Range["B2"];
            rangeB2.Value = "Rotated Cell Contents";
            rangeB2.HorizontalAlignment = HorizontalAlignment.Center;
            rangeB2.VerticalAlignment = VerticalAlignment.Center;
            //Rotate cell contents.
            rangeB2.Orientation = 15;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Alignment.ShrinkToFit" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            IRange rangeB1 = worksheet.Range["B1"];
            rangeB1.Value = "The ShrinkToFit property is applied";
            rangeB1.ShrinkToFit = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Alignment.TextOrientation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            IRange rangeC1 = worksheet.Range["C1"];
            rangeC1.Value = "The ReadingOrder property is applied to set text direction.";
            rangeC1.ReadingOrder = ReadingOrder.RightToLeft;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Alignment.WrapText" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            IRange rangeB3 = worksheet.Range["B3"];
            rangeB3.Value = "The WrapText property is applied to wrap the text within a cell";
            rangeB3.WrapText = true;

            worksheet.Rows[2].RowHeight = 150;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Borders.AddBordersToCell" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            IRange rangeB2 = worksheet.Range["B2"];

            //set left, top, right, bottom borders together.
            rangeB2.Borders.LineStyle = BorderLineStyle.DashDot;
            rangeB2.Borders.Color = Color.Green;

            //set top border individually.
            rangeB2.Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Medium;
            rangeB2.Borders[BordersIndex.EdgeTop].Color = Color.Red;

            //set diagonal down border individually.
            rangeB2.Borders[BordersIndex.DiagonalDown].LineStyle = BorderLineStyle.Hair;
            rangeB2.Borders[BordersIndex.DiagonalDown].Color = Color.Blue;

            //set diagonal up border individually.
            rangeB2.Borders[BordersIndex.DiagonalUp].LineStyle = BorderLineStyle.Dotted;
            rangeB2.Borders[BordersIndex.DiagonalUp].Color = Color.Blue;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Borders.AddingBordersToRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            IRange rangeB2_E6 = worksheet.Range["B2:E6"];

            //set left, top, right, bottom borders together.
            rangeB2_E6.Borders.LineStyle = BorderLineStyle.DashDot;
            rangeB2_E6.Borders.Color = Color.Green;

            //set inside horizontal border.
            rangeB2_E6.Borders[BordersIndex.InsideHorizontal].LineStyle = BorderLineStyle.Dashed;
            rangeB2_E6.Borders[BordersIndex.InsideHorizontal].Color = Color.Tomato;

            //set inside vertical border.
            rangeB2_E6.Borders[BordersIndex.InsideVertical].LineStyle = BorderLineStyle.Double;
            rangeB2_E6.Borders[BordersIndex.InsideVertical].Color = Color.Blue;

            //set top border individually.
            rangeB2_E6.Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Medium;
            rangeB2_E6.Borders[BordersIndex.EdgeTop].Color = Color.Red;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fill.LinearGradientFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1"].Interior.Pattern = GrapeCity.Documents.Excel.Pattern.LinearGradient;
            (worksheet.Range["A1"].Interior.Gradient as ILinearGradient).ColorStops[0].Color = Color.Red;
            (worksheet.Range["A1"].Interior.Gradient as ILinearGradient).ColorStops[1].Color = Color.Yellow;

            (worksheet.Range["A1"].Interior.Gradient as ILinearGradient).Degree = 90;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fill.PatternFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1"].Interior.Pattern = GrapeCity.Documents.Excel.Pattern.LightDown;
            worksheet.Range["A1"].Interior.Color = Color.Pink;
            worksheet.Range["A1"].Interior.PatternColorIndex = 5;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fill.RectangularGradientFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1"].Interior.Pattern = GrapeCity.Documents.Excel.Pattern.RectangularGradient;
            (worksheet.Range["A1"].Interior.Gradient as IRectangularGradient).ColorStops[0].Color = Color.Red;
            (worksheet.Range["A1"].Interior.Gradient as IRectangularGradient).ColorStops[1].Color = Color.Green;

            (worksheet.Range["A1"].Interior.Gradient as IRectangularGradient).Bottom = 0.2;
            (worksheet.Range["A1"].Interior.Gradient as IRectangularGradient).Right = 0.3;
            (worksheet.Range["A1"].Interior.Gradient as IRectangularGradient).Top = 0.4;
            (worksheet.Range["A1"].Interior.Gradient as IRectangularGradient).Left = 0.5;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fill.SolidFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A2"].Interior.Color = Color.Green;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fonts.FontColor" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1"].Value = "font";
            worksheet.Range["A1"].Font.Color = Color.Green;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fonts.FontEffect" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["A1"].Value = "Strikethrough";
            worksheet.Range["A1"].Font.Strikethrough = true;

            worksheet.Range["A2"].Value = "Superscript";
            worksheet.Range["A2"].Font.Superscript = true;

            worksheet.Range["A3"].Value = "Subscript";
            worksheet.Range["A3"].Font.Subscript = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fonts.FontName" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //use Name property to set font name.
            worksheet.Range["A1"].Value = "Calibri";
            worksheet.Range["A1"].Font.Name = "Calibri";

            //use ThemeFont property to set font name.
            worksheet.Range["A2"].Value = "Major theme font";
            worksheet.Range["A2"].Font.ThemeFont = ThemeFont.Major;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fonts.FontSize" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["A1"].Value = "Font size is 15";
            worksheet.Range["A1"].Font.Size = 15;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fonts.FontStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["A1"].Value = "Bold";
            worksheet.Range["A1"].Font.Bold = true;

            worksheet.Range["A2"].Value = "Italic";
            worksheet.Range["A2"].Font.Italic = true;

            worksheet.Range["A3"].Value = "Bold Italic";
            worksheet.Range["A3"].Font.Bold = true;
            worksheet.Range["A3"].Font.Italic = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Fonts.FontUnderline" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["A1"].Value = "Single Underline";
            worksheet.Range["A1"].Font.Underline = UnderlineType.Single;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.NumberFormat.CustomNumberFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            //Set range values.
            worksheet.Range["A2:B2"].Value = -15.50;
            worksheet.Range["A3:B3"].Value = 555;
            worksheet.Range["A4:B4"].Value = 0;
            worksheet.Range["A5:B5"].Value = "Name";

            //Apply custom number format.
            worksheet.Range["B2:B5"].NumberFormat = "[Green]#.00;[Red]#.00;[Blue]0.00;[Cyan]\"product: \"@";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.NumberFormat.DateAndTimeFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:F"].ColumnWidth = 17;
            worksheet.Range["A1:F1"].Formula = "= Now()";

            //Apply different date formats.
            worksheet.Range["A1"].NumberFormat = "m/d/yy";
            worksheet.Range["B1"].NumberFormat = "d-mmm-yy";
            worksheet.Range["C1"].NumberFormat = "dddd";

            //Apply different time formats.
            worksheet.Range["D1"].NumberFormat = "m/d/yy h:mm";
            worksheet.Range["E1"].NumberFormat = "h:mm AM/PM";
            worksheet.Range["F1"].NumberFormat = "h:mm:ss";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.NumberFormat.NumberFormats" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:H"].ColumnWidth = 17;

            // Display 111 as 111.
            worksheet.Range["A1"].Value = 111;
            worksheet.Range["A1"].NumberFormat = "#####";

            // Display 222 as 00222.
            worksheet.Range["B1"].Value = 222;
            worksheet.Range["B1"].NumberFormat = "00000";

            // Display 12345678 as 12,345,678.
            worksheet.Range["C1"].Value = 12345678;
            worksheet.Range["C1"].NumberFormat = "#,#";

            // Display .126 as 0.13.
            worksheet.Range["D1"].Value = .126;
            worksheet.Range["D1"].NumberFormat = "0.##";

            // Display 74.4 as 74.400.
            worksheet.Range["E1"].Value = 74.4;
            worksheet.Range["E1"].NumberFormat = "##.000";

            // Display 1.6 as 160.0%.
            worksheet.Range["F1"].Value = 1.6;
            worksheet.Range["F1"].NumberFormat = "0.0%";

            // Display 4321 as $4,321.00.
            worksheet.Range["G1"].Value = 4321;
            worksheet.Range["G1"].NumberFormat = "$#,##0.00";

            // Display 8.75 as 8 3/4.
            worksheet.Range["H1"].Value = 8.75;
            worksheet.Range["H1"].NumberFormat = "# ?/?";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Protection.SetRangeFormulaHidden" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B1"].Formula = "=A1";

            //config range B1's FormulaHidden property.
            worksheet.Range["B1"].FormulaHidden = true;
            //protect worksheet, range B1's formula will not show in exported xlsx file.
            worksheet.Protection = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formatting.Protection.SetRangeLocked" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //config range B1's Locked property.
            worksheet.Range["B1"].Locked = false;
            //protect worksheet, range B1 can be modified in exported xlsx file.
            worksheet.Protection = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formulas.AddCustomName" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet1 = workbook.Worksheets[0];
            IWorksheet worksheet2 = workbook.Worksheets.Add();

            worksheet1.Range["C8"].NumberFormat = "0.0000";

            worksheet1.Names.Add("test1", "=Sheet1!$A$1");
            worksheet1.Names.Add("test2", "=Sheet1!test1*2");
            workbook.Names.Add("test3", "=Sheet1!$A$1");

            worksheet1.Range["A1"].Value = 1;

            //C6's value is 1.
            worksheet1.Range["C6"].Formula = "=test1";
            //C7's value is 3.
            worksheet1.Range["C7"].Formula = "=test1 + test2";
            //C8's value is 6.283185307
            worksheet1.Range["C8"].Formula = "=test2*PI()";

            //judge if Range C6:C8 have formula.
            for (int i = 5; i &lt;= 7; i++)
            {
                if (worksheet1.Range[i, 2].HasFormula)
                {
                    worksheet1.Range[i, 2].Interior.Color = Color.LightBlue;
                }
            }

            //worksheet1 range A2's value is 1.
            worksheet2.Range["A2"].Formula = "=test3";
            //judge if Range A2 has formula.
            if (worksheet2.Range["A2"].HasFormula)
            {
                worksheet2.Range["A2"].Interior.Color = Color.LightBlue;
            }

            //set r1c1 formula.
            worksheet2.Range["A3"].FormulaR1C1 = "=R[-1]C";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formulas.ConfigWorkbookReferenceStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //set workbook's reference style to R1C1. exported xlsx file will be R1C1 style.
            workbook.ReferenceStyle = ReferenceStyle.R1C1;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formulas.DirtyAndCalculation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1"].Value = 1;
            worksheet.Range["A2"].Formula = "=A1";
            worksheet.Range["A3"].Formula = "=SUM(A1, A2)";

            //when get value, calc engine will first calculate and cache the result, then returns the cached result.
            var value_A2 = worksheet.Range["A2"].Value;
            var value_A3 = worksheet.Range["A3"].Value;

            //disable calc engine.
            workbook.EnableCalculation = false;

            //Dirty() method will clear the cached value of the workbook.
            workbook.Dirty();
            //Calculate() will not work, because of workbook.EnablCalculation is false.
            workbook.Calculate();
            //it returns 0 because of no cache value exist.
            var value_A2_1 = worksheet.Range["A2"].Value;
            var value_A3_1 = worksheet.Range["A3"].Value;

            worksheet.Range["A1"].Value = 2;
            //enable calc engine.
            workbook.EnableCalculation = true;
            //Dirty() method will clear the cached value of Range A2:A3.
            worksheet.Range["A2:A3"].Dirty();
            //Calculate() method will calculate and cache the result, it will return the cache value directly when get value later.
            worksheet.Range["A2:A3"].Calculate();

            //it returns cache value directly, does not calculate again.
            var value_A2_2 = worksheet.Range["A2"].Value;
            var value_A3_2 = worksheet.Range["A3"].Value;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formulas.UseArrayFormula" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["E4:J5"].Value = new object[,]
             {
                {1, 2, 3},
                {4, 5, 6}
             };

            worksheet.Range["I6:J8"].Value = new object[,]
            {
                {2, 2},
                {3, 3},
                {4, 4}
            };

            //O     P      Q
            //2     4      #N/A
            //12    15     #N/A
            //#N/A  #N/A   #N/A
            worksheet.Range["O9:Q11"].FormulaArray = "=E4:G5*I6:J8";

            //judge if Range O9 has array formula.
            if (worksheet.Range["O9"].HasArray)
            {
                //set O9's entire array's interior color.
                var currentarray = worksheet.Range["O9"].CurrentArray;
                currentarray.Interior.Color = Color.Green;
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Formulas.UseTableFormula" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:E"].ColumnWidth = 15;
            worksheet.Range["A1:E3"].Value = new object[,]
            {
                {"SalesPerson", "Region",  "SalesAmount", "ComPct", "ComAmt"},
                {"Joe", "North", 260, 0.10, null},
                {"Nia", "South", 660, 0.15, null},
            };

            worksheet.Tables.Add(worksheet.Range["A1:E3"], true);
            worksheet.Tables[0].Name = "DeptSales";
            worksheet.Tables[0].Columns["ComPct"].DataBodyRange.NumberFormat = "0%";

            //Use table formula in table range.
            worksheet.Tables[0].Columns["ComAmt"].DataBodyRange.Formula = "=[@ComPct]*[@SalesAmount]";

            //Use table formula out of table range.
            worksheet.Range["F2"].Formula = "=SUM(DeptSales[@SalesAmount])";
            worksheet.Range["G2"].Formula = "=SUM(DeptSales[[#Data],[SalesAmount]])";
            worksheet.Range["H2"].Formula = "=SUM(DeptSales[SalesAmount])";
            worksheet.Range["I2"].Formula = "=SUM(DeptSales[@ComPct], DeptSales[@ComAmt])";

            //judge if Range F2:I2 have formula.
            for (int i = 5; i &lt;= 8; i++)
            {
                if (worksheet.Range[1, i].HasFormula)
                {
                    worksheet.Range[1, i].Interior.Color = Color.LightBlue;
                }
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Grouping.ClearOutline" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            //1:20 rows' outline level will be 2.
            worksheet.Range["1:20"].Group();
            //1:10 rows' outline level will be 3.
            worksheet.Range["1:10"].Group();

            //1:20 rows' outline level will be 1.
            worksheet.Range["1:20"].ClearOutline();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Grouping.CollapseGroup" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            //1:20 rows' outline level will be 2.
            worksheet.Range["1:20"].Group();
            //1:10 rows' outline level will be 3.
            worksheet.Range["1:10"].Group();

            //1:10 rows will be collapsed.
            worksheet.Range["11:11"].ShowDetail = false;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Grouping.CreateRangeGroup" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            //1:20 rows' outline level will be 2.
            worksheet.Range["1:20"].Group();
            //1:10 rows' outline level will be 3.
            worksheet.Range["1:10"].Group();

            //A:N columns' outline level will be 2.
            worksheet.Range["A:N"].Group();
            //A:E columns' outline level will be 3.
            worksheet.Range["A:E"].Group();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Grouping.ShowSpecificLevel" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:N"].Group();
            worksheet.Range["A:F"].Group();
            worksheet.Range["A:C"].Group();

            worksheet.Range["Q:Z"].Group();
            worksheet.Range["Q:T"].Group();

            //level 3 and level 4 will be collapsed. level 2 and level 1 expand.
            worksheet.Outline.ShowLevels(columnLevels: 2);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Grouping.UngroupRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            //1:20 rows' outline level will be 2.
            worksheet.Range["1:20"].Group();
            //1:10 rows' outline level will be 3.
            worksheet.Range["1:10"].Group();

            //1:10 rows' outline level will be 2.
            worksheet.Range["1:10"].Ungroup();
            //1:20 rows' outline level will be 1.
            worksheet.Range["1:20"].Ungroup();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Hyperlinks.CreateHyperlinks" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:A"].ColumnWidth = 30;

            //add a hyperlink link to web page.
            worksheet.Range["A1:B2"].Hyperlinks.Add(worksheet.Range["A1"],
                                                "http://www.google.com/",
                                                null,
                                                "open google web site.",
                                                "Google");

            //add a hyperlink link to a range in this document.
            worksheet.Range["A3:B4"].Hyperlinks.Add(worksheet.Range["A3"],
                                            null,
                                            "Sheet1!$C$3:$E$4",
                                            "Go to sheet1 C3:E4");

            //add a hyperlink link to email address.
            worksheet.Range["A5:B6"].Hyperlinks.Add(worksheet.Range["A5"],
                                            "mailto:us.sales@grapecity.com",
                                            null,
                                            "Send an email to sales",
                                            "Send an email to sales");

            //add a hyperlink link to external file.
            //change the path to real picture file path.
            string path = "external.xlsx";
            worksheet.Range["A7:B8"].Hyperlinks.Add(worksheet.Range["A7"],
                                                path,
                                                null,
                                                "link to external.xlsx file.",
                                                "External.xlsx");
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Hyperlinks.DeleteHyperlinks" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:A"].ColumnWidth = 30;

            //add a hyperlink link to web page.
            worksheet.Range["A1:B2"].Hyperlinks.Add(worksheet.Range["A1"],
                                                "http://www.google.com/",
                                                null,
                                                "open google web site.",
                                                "Google");

            //add a hyperlink link to a range in this document.
            worksheet.Range["A3:B4"].Hyperlinks.Add(worksheet.Range["A3"],
                                            null,
                                            "Sheet1!$C$3:$E$4",
                                            "Go to sheet1 C3:E4");

            //add a hyperlink link to email address.
            worksheet.Range["A5:B6"].Hyperlinks.Add(worksheet.Range["A5"],
                                            "mailto:us.sales@grapecity.com",
                                            null,
                                            "Send an email to sales",
                                            "Send an email to sales");

            //add a hyperlink link to external file.
            //change the path to real picture file path.
            string path = "external.xlsx";
            worksheet.Range["A7:B8"].Hyperlinks.Add(worksheet.Range["A7"],
                                                path,
                                                null,
                                                "link to external.xlsx file.",
                                                "External.xlsx");

            //delete hyperlinks in range A1:A2.
            worksheet.Range["A1:A2"].Hyperlinks.Delete();

            //delete all hyperlinks in this worksheet.
            worksheet.Hyperlinks.Delete();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigEvenPageHeaderFooter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set even page headerfooter
            worksheet.PageSetup.OddAndEvenPagesHeaderFooter = true;

            worksheet.PageSetup.EvenPage.CenterHeader.Text = "&amp;T";
            worksheet.PageSetup.EvenPage.RightFooter.Text = "&amp;D";

            //Set even page headerfooter's graphic
            worksheet.PageSetup.EvenPage.LeftFooter.Text = "&amp;G";
            System.IO.Stream stream = this.GetResourceStream("logo.png");
            worksheet.PageSetup.EvenPage.LeftFooter.Picture.SetGraphicStream(stream, ImageType.PNG);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigFirstPageHeaderFooter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set first page headerfooter
            worksheet.PageSetup.DifferentFirstPageHeaderFooter = true;

            worksheet.PageSetup.FirstPage.CenterHeader.Text = "&amp;T";
            worksheet.PageSetup.FirstPage.RightFooter.Text = "&amp;D";

            //Set first page headerfooter's graphic
            worksheet.PageSetup.FirstPage.LeftFooter.Text = "&amp;G";
            System.IO.Stream stream = this.GetResourceStream("logo.png");
            worksheet.PageSetup.FirstPage.LeftFooter.Picture.SetGraphicStream(stream, ImageType.PNG);
            worksheet.PageSetup.FirstPage.LeftFooter.Picture.Width = 100;
            worksheet.PageSetup.FirstPage.LeftFooter.Picture.Height = 13;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigFirstPageNumber" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.PageSetup.CenterFooter = "&amp;P";

            //Set first page number, default is p1.
            worksheet.PageSetup.FirstPageNumber = 3;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigHeaderFooter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set page headerfooter
            worksheet.PageSetup.LeftHeader = "&amp;\"Arial,Italic\"LeftHeader";
            worksheet.PageSetup.CenterHeader = "&amp;P";

            //Set page headerfooter's graphic
            worksheet.PageSetup.CenterFooter = "&amp;G";
            System.IO.Stream stream = this.GetResourceStream("logo.png");
            worksheet.PageSetup.CenterFooterPicture.SetGraphicStream(stream, Drawing.ImageType.PNG);

            //If you have picture resources locally, you can also set graphic in this way.
            //worksheet.PageSetup.CenterFooter = "&amp;G";
            //worksheet.PageSetup.CenterFooterPicture.Filename = @"C:\picture.png";

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigPageCenter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set center, default is false.
            worksheet.PageSetup.CenterHorizontally = true;
            worksheet.PageSetup.CenterVertically = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigPageMargins" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set margins, in points.
            worksheet.PageSetup.TopMargin = 36;
            worksheet.PageSetup.BottomMargin = 36;
            worksheet.PageSetup.RightMargin = 72;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigPageOrder" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set page order, default is DownThenOver.
            worksheet.PageSetup.Order = Order.OverThenDown;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigPageOrientation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set page orientation, default is portrait.
            worksheet.PageSetup.Orientation = PageOrientation.Landscape;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigPaperScaling" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set paper scaling
            //Method 1: Set percent scale 
            worksheet.PageSetup.IsPercentScale = true;
            worksheet.PageSetup.Zoom = 150;

            //Or Method 2: Fit to page's wide &amp; tall
            //worksheet.PageSetup.IsPercentScale = false;
            //worksheet.PageSetup.FitToPagesWide = 3;
            //worksheet.PageSetup.FitToPagesTall = 4;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigPaperSize" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set A4 paper size
            worksheet.PageSetup.PaperSize = PaperSize.A4;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigPrintArea" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Print Area.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set print area &amp; print titles
            worksheet.PageSetup.PrintArea = "$D$5:$G$10";
            worksheet.PageSetup.PrintTitleRows = "$5:$10";
            worksheet.PageSetup.PrintTitleColumns = "$D:$G";

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigPrintTitleColumns" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Print Title Columns.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set columns to repeat at left
            worksheet.PageSetup.PrintTitleColumns = "$D:$G";

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigPrintTitleRows" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Print Title Rows.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set rows to repeat at top
            worksheet.PageSetup.PrintTitleRows = "$5:$10";

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PageSetup.ConfigSheetPrintSettings" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            var fileStream = this.GetResourceStream("xlsx\\PageSetup Demo.xlsx");
            workbook.Open(fileStream);
            IWorksheet worksheet = workbook.Worksheets[0];

            //Set sheet
            worksheet.PageSetup.PrintGridlines = true;
            worksheet.PageSetup.PrintHeadings = true;
            worksheet.PageSetup.BlackAndWhite = true;
            worksheet.PageSetup.PrintComments = PrintLocation.InPlace;
            worksheet.PageSetup.PrintErrors = PrintErrors.Dash;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.ConvertExcelToPDF" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Open an excel file
            var fileStream = this.GetResourceStream("xlsx\\Employee absence schedule.xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.SaveBorder" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //Single cell border
            sheet.Range["B2"].Borders.ThemeColor = ThemeColor.Accent1;
            sheet.Range["B2"].Borders.LineStyle = BorderLineStyle.SlantDashDot;
            sheet.Range["B2"].Borders[BordersIndex.DiagonalUp].ThemeColor = ThemeColor.Accent1;
            sheet.Range["B2"].Borders[BordersIndex.DiagonalUp].LineStyle = BorderLineStyle.SlantDashDot;
            sheet.Range["B2"].Borders[BordersIndex.DiagonalDown].ThemeColor = ThemeColor.Accent1;
            sheet.Range["B2"].Borders[BordersIndex.DiagonalDown].LineStyle = BorderLineStyle.SlantDashDot;

            //Range border
            sheet.Range["D2:E3"].Borders.ThemeColor = ThemeColor.Accent1;
            sheet.Range["D2:E3"].Borders.LineStyle = BorderLineStyle.DashDot;
            sheet.Range["D2:E3"].Borders[BordersIndex.DiagonalDown].ThemeColor = ThemeColor.Accent1;
            sheet.Range["D2:E3"].Borders[BordersIndex.DiagonalDown].LineStyle = BorderLineStyle.DashDot;

            //Merge cell border
            sheet.Range["B6:C7"].Merge();
            sheet.Range["B6:C7"].Borders.ThemeColor = ThemeColor.Accent1;
            sheet.Range["B6:C7"].Borders.LineStyle = BorderLineStyle.Double;
            sheet.Range["B6:C7"].Borders[BordersIndex.DiagonalUp].ThemeColor = ThemeColor.Accent1;
            sheet.Range["B6:C7"].Borders[BordersIndex.DiagonalUp].LineStyle = BorderLineStyle.Double;

            //Border style on table
            ITable table = sheet.Tables.Add(sheet.Range["B12:G22"], true);

            //Create custom table style
            ITableStyle customTableStyle = workbook.TableStyles["TableStyleMedium10"].Duplicate();

            //Set outline border for "whole table" style
            var wholeTableStyle = customTableStyle.TableStyleElements[TableStyleElementType.WholeTable];
            wholeTableStyle.Borders[BordersIndex.EdgeTop].ThemeColor = ThemeColor.Accent1;
            wholeTableStyle.Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thick;
            wholeTableStyle.Borders[BordersIndex.EdgeRight].ThemeColor = ThemeColor.Accent1;
            wholeTableStyle.Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Thick;
            wholeTableStyle.Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Accent1;
            wholeTableStyle.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            wholeTableStyle.Borders[BordersIndex.EdgeLeft].ThemeColor = ThemeColor.Accent1;
            wholeTableStyle.Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.Thick;

            //Set vertical border for "first row strip" style
            var firstRowStripStyle = customTableStyle.TableStyleElements[TableStyleElementType.FirstRowStripe];
            firstRowStripStyle.Borders[BordersIndex.InsideVertical].ThemeColor = ThemeColor.Accent6;
            firstRowStripStyle.Borders[BordersIndex.InsideVertical].LineStyle = BorderLineStyle.Dashed;

            //Apply custom style to table
            table.TableStyle = customTableStyle;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.SaveConditionalFormatting" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //Conditional formatting on merge cell
            sheet.Range["B2:C4"].Merge();
            sheet.Range["B2:C4"].Value = 123;
            var cf = (IFormatCondition)sheet.Range["B2:C4"].FormatConditions.Add(FormatConditionType.CellValue, FormatConditionOperator.Greater, 0);
            cf.Borders.ThemeColor = ThemeColor.Accent1;
            cf.Borders.LineStyle = BorderLineStyle.Thin;

            //Set cell values
            int[] data = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
            sheet.Range["B10:B19"].Value = data;
            sheet.Range["C10:C19"].Value = data;
            sheet.Range["D10:D19"].Value = data;

            //Set conditional formattings
            //Color scale
            IColorScale cf1 = sheet.Range["B10:B19"].FormatConditions.AddColorScale(ColorScaleType.ThreeColorScale);
            cf1.ColorScaleCriteria[0].Type = ConditionValueTypes.LowestValue;
            cf1.ColorScaleCriteria[0].FormatColor.Color = Color.FromArgb(248, 105, 107);
            cf1.ColorScaleCriteria[1].Type = ConditionValueTypes.Percentile;
            cf1.ColorScaleCriteria[1].Value = 50;
            cf1.ColorScaleCriteria[1].FormatColor.Color = Color.FromArgb(255, 235, 132);
            cf1.ColorScaleCriteria[2].Type = ConditionValueTypes.HighestValue;
            cf1.ColorScaleCriteria[2].FormatColor.Color = Color.FromArgb(99, 190, 123);

            //Data bar
            sheet.Range["C14"].Value = -5;
            sheet.Range["C17"].Value = -8;
            IDataBar cf2 = sheet.Range["C10:C19"].FormatConditions.AddDatabar();
            cf2.MinPoint.Type = ConditionValueTypes.AutomaticMin;
            cf2.MaxPoint.Type = ConditionValueTypes.AutomaticMax;
            cf2.BarFillType = DataBarFillType.Gradient;
            cf2.BarColor.Color = Color.FromArgb(0, 138, 239);
            cf2.BarBorder.Color.Color = Color.FromArgb(0, 138, 239);
            cf2.NegativeBarFormat.Color.Color = Color.FromArgb(255, 0, 0);
            cf2.NegativeBarFormat.BorderColorType = DataBarNegativeColorType.Color;
            cf2.NegativeBarFormat.BorderColor.Color = Color.FromArgb(255, 0, 0);
            cf2.AxisColor.Color = Color.Black;
            cf2.AxisPosition = DataBarAxisPosition.Automatic;

            //Icon set
            IIconSetCondition cf3 = sheet.Range["D10:D19"].FormatConditions.AddIconSetCondition();
            cf3.IconSet = workbook.IconSets[IconSetType.Icon3Symbols];
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.SavePictureToPDF" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.PageSetup.Orientation = PageOrientation.Landscape;
            System.IO.Stream stream = this.GetResourceStream("logo.png");
            GrapeCity.Documents.Excel.Drawing.IShape picture = worksheet.Shapes.AddPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.PNG, 20, 20, 690, 100);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.SaveRangeFillToPDF" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            IRange rangeA1B2 = worksheet.Range["A1:B2"];
            rangeA1B2.Merge();
            rangeA1B2.Interior.Pattern = GrapeCity.Documents.Excel.Pattern.LinearGradient;
            (rangeA1B2.Interior.Gradient as ILinearGradient).ColorStops[0].Color = Color.Red;
            (rangeA1B2.Interior.Gradient as ILinearGradient).ColorStops[1].Color = Color.Yellow;
            (rangeA1B2.Interior.Gradient as ILinearGradient).Degree = 90;

            IRange rangeE1E2 = worksheet.Range["D1:E2"];
            rangeE1E2.Merge();
            rangeE1E2.Interior.Pattern = GrapeCity.Documents.Excel.Pattern.LightDown;
            rangeE1E2.Interior.Color = Color.Pink;
            rangeE1E2.Interior.PatternColorIndex = 5;

            IRange rangeG1H2 = worksheet.Range["G1:H2"];
            rangeG1H2.Merge();
            rangeG1H2.Interior.Pattern = GrapeCity.Documents.Excel.Pattern.RectangularGradient;
            (rangeG1H2.Interior.Gradient as IRectangularGradient).ColorStops[0].Color = Color.Red;
            (rangeG1H2.Interior.Gradient as IRectangularGradient).ColorStops[1].Color = Color.Green;

            (rangeG1H2.Interior.Gradient as IRectangularGradient).Bottom = 0.2;
            (rangeG1H2.Interior.Gradient as IRectangularGradient).Right = 0.3;
            (rangeG1H2.Interior.Gradient as IRectangularGradient).Top = 0.4;
            (rangeG1H2.Interior.Gradient as IRectangularGradient).Left = 0.5;

            worksheet.Range["J1:K2"].Merge();
            worksheet.Range["J1:K2"].Interior.Color = Color.Green;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.SaveSparklinesToPDF" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]
             {
                { "Customer", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days"},
                { "Customer A",1200.15, 1916.18, 1105.23, 1806.53},
                { "Customer B",896.23, 1005.53, 1800.56, 1150.49,},
                { "Customer C", 827.63, 1009.23, 1869.23, 1002.56,}
             };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B2:E5"].Value = data;
            worksheet.Range["B:F"].ColumnWidth = 15;
            worksheet.Range["B:E"].HorizontalAlignment = HorizontalAlignment.Center;
            ITable table = worksheet.Tables.Add(worksheet.Range["B2:F5"], true);
            table.TableStyle = workbook.TableStyles["TableStyleMedium3"];
            table.Columns[4].Name = "Sparklines";

            //create a new group of sparklines.
            worksheet.Range["F3"].SparklineGroups.Add(SparkType.Line, "C3:E3");
            worksheet.Range["F4"].SparklineGroups.Add(SparkType.Column, "C4:E4");
            worksheet.Range["F5"].SparklineGroups.Add(SparkType.ColumnStacked100, "C5:E5");
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.SaveTable" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //Add Table
            ITable table = sheet.Tables.Add(sheet.Range["B5:G16"], true);
            table.ShowTotals = true;

            //Set values
            int[] data = new int[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };
            sheet.Range["C6:C16"].Value = data;
            sheet.Range["D6:D16"].Value = data;

            //Set total functions
            table.Columns[1].TotalsCalculation = TotalsCalculation.Average;
            table.Columns[2].TotalsCalculation = TotalsCalculation.Sum;

            //Create custom table style
            ITableStyle customTableStyle = workbook.TableStyles["TableStyleMedium10"].Duplicate();

            var wholeTableStyle = customTableStyle.TableStyleElements[TableStyleElementType.WholeTable];
            wholeTableStyle.Font.Italic = true;
            wholeTableStyle.Borders[BordersIndex.EdgeTop].ThemeColor = ThemeColor.Accent1;
            wholeTableStyle.Borders[BordersIndex.EdgeTop].LineStyle = BorderLineStyle.Thick;
            wholeTableStyle.Borders[BordersIndex.EdgeRight].ThemeColor = ThemeColor.Accent1;
            wholeTableStyle.Borders[BordersIndex.EdgeRight].LineStyle = BorderLineStyle.Thick;
            wholeTableStyle.Borders[BordersIndex.EdgeBottom].ThemeColor = ThemeColor.Accent1;
            wholeTableStyle.Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Thick;
            wholeTableStyle.Borders[BordersIndex.EdgeLeft].ThemeColor = ThemeColor.Accent1;
            wholeTableStyle.Borders[BordersIndex.EdgeLeft].LineStyle = BorderLineStyle.Thick;

            var firstRowStripStyle = customTableStyle.TableStyleElements[TableStyleElementType.FirstRowStripe];
            firstRowStripStyle.Font.Bold = true;

            //Apply custom style to table
            table.TableStyle = customTableStyle;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.SaveWorkbookToPDF" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //set style.
            sheet.Range["A1"].Value = "Sheet1";
            sheet.Range["A1"].Font.Name = "Wide Latin";
            sheet.Range["A1"].Font.Color = Color.Red;
            sheet.Range["A1"].Interior.Color = Color.Green;

            //change the path to real export path when save.
            workbook.Save(this.CurrentDirectory + "dest.pdf", SaveFileFormat.Pdf);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.SaveWorksheetToPDF" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //set style.
            sheet.Range["A1"].Value = "Sheet1";
            sheet.Range["A1"].Font.Name = "Wide Latin";
            sheet.Range["A1"].Font.Color = Color.Red;
            sheet.Range["A1"].Interior.Color = Color.Green;

            //change the path to real export path when save.
            sheet.Save(this.CurrentDirectory + "dest.pdf", SaveFileFormat.Pdf);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.SetFontsFolderPath" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //set style.
            sheet.Range["A1"].Value = "Sheet1";
            sheet.Range["A1"].Font.Name = "Wide Latin";
            sheet.Range["A1"].Font.Color = Color.Red;
            sheet.Range["A1"].Interior.Color = Color.Green;

            //specify font path.
            GrapeCity.Documents.Excel.Workbook.FontsFolderPath = @"D:\Fonts";

            //get the used fonts list in workbook, the list are:"Wide Latin", "Calibri"
            var fonts = workbook.GetUsedFonts();

            //change the path to real export path when save.
            sheet.Save(this.CurrentDirectory + "dest.pdf", SaveFileFormat.Pdf);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigureBlackAndWhite" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            System.IO.Stream stream = this.GetResourceStream("logo.png");
            GrapeCity.Documents.Excel.Drawing.IShape picture = sheet.Shapes.AddPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.PNG, 20, 20, 395, 60);

            //Set text font color.
            sheet.Range["A1:D4"].Value = "Font";
            sheet.Range["A1:D4"].Font.Color = Color.Red;

            //Set cell color
            sheet.Range["A7:D10"].Value = "Green";
            sheet.Range["A7:D10"].Interior.Color = Color.Green;

            //Set print black and white.
            sheet.PageSetup.BlackAndWhite = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigureDraft" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //Set text.
            sheet.Range["A1:G10"].Value = "Text";

            //Add picture in sheet.
            System.IO.Stream stream = this.GetResourceStream("logo.png");
            GrapeCity.Documents.Excel.Drawing.IShape picture = sheet.Shapes.AddPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.PNG, 20, 20, 395, 60);

            //Add header graphic.
            System.IO.Stream stream1 = this.GetResourceStream("logo.png");
            sheet.PageSetup.CenterHeader = "&amp;G";
            sheet.PageSetup.CenterHeaderPicture.SetGraphicStream(stream1, Drawing.ImageType.PNG);
            sheet.PageSetup.CenterHeaderPicture.Width = 100;
            sheet.PageSetup.CenterHeaderPicture.Height = 13;

            //Set print without graphics in page content area.
            sheet.PageSetup.Draft = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigureHeaderFooter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //Set data.
            sheet.Range["A1:G10"].Value = "Text";

            //Set page header.
            sheet.PageSetup.LeftHeader = "&amp;\"Arial,Italic\"LeftHeader";
            sheet.PageSetup.RightHeader = "&amp;KFF0000GrapeCity";
            sheet.PageSetup.CenterHeader = "&amp;P";

            //Set page footer picture.
            System.IO.Stream stream = this.GetResourceStream("logo.png");
            sheet.PageSetup.CenterFooter = "&amp;G";
            sheet.PageSetup.CenterFooterPicture.SetGraphicStream(stream, Drawing.ImageType.PNG);
            sheet.PageSetup.CenterFooterPicture.Width = 100;
            sheet.PageSetup.CenterFooterPicture.Height = 13;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigureOritation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            sheet.Range["A1:G10"].Value = "Text";

            //Set page orientation.
            sheet.PageSetup.Orientation = PageOrientation.Landscape;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigurePageBreaks" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            sheet.Range["A1:B5"].Value = new object[,]
            {
                {1, 2},
                {3, 4},
                {5, 6},
                {7, 8},
                {9, 10}
            };

            //Add page break
            sheet.HPageBreaks.Add(sheet.Range["B3"]);
            sheet.VPageBreaks.Add(sheet.Range["B3"]);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigurePageOrder" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];


            //Set pages' data.
            sheet.Range["A1:J46"].Value = "Page1";
            sheet.Range["A1:J46"].Interior.Color = Color.LightGreen;

            sheet.Range["A47:J92"].Value = "Page2";
            sheet.Range["A47:J92"].Interior.Color = Color.LightYellow;

            sheet.Range["K1:T46"].Value = "Page3";
            sheet.Range["K1:T46"].Interior.Color = Color.OrangeRed;

            sheet.Range["K47:T92"].Value = "Page4";
            sheet.Range["K47:T92"].Interior.Color = Color.DarkOrange;

            sheet.PageSetup.PrintHeadings = true;
            
            //Set page order. Now the page order is p1-p3-p2-p4. Origin is p1-p2-p3-p4.
            sheet.PageSetup.Order = Order.OverThenDown;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigurePageSetup" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //Set data.
            sheet.Range["A1:G10"].Value = "Text";

            //Print rowheader and columnheader.
            sheet.PageSetup.PrintHeadings = true;
            
            //Print gridlines.
            sheet.PageSetup.PrintGridlines = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigurePagination" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            int row = 50;
            int column = 14;
            object[,] data = new object[row, column];
            for (int i = 0; i &lt; row; i++)
            {
                for (int j = 0; j &lt; column; j++)
                {
                    data[i, j] = "R" + i + "C" + j;
                }
            }

            //Set data
            sheet.Range["A1:N50"].Value = data;

            //Set paper size
            sheet.PageSetup.PaperSize = PaperSize.A5;

            //With API the margin's unit is pound, with Excel the margins display unit is inch.
            //One inch eaquals to 72 pounds. If the top margin is 0.8 inch, then please set PageSetup.TopMargin = 0.8*72(57.6);
            sheet.PageSetup.TopMargin = 57.6;
            //Top margin in excel is 0.8 inch
            sheet.PageSetup.BottomMargin = 21.6;
            sheet.PageSetup.LeftMargin = 28.8;
            sheet.PageSetup.RightMargin = 0;
            sheet.PageSetup.HeaderMargin = 0;
            sheet.PageSetup.FooterMargin = 93.6;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigurePrintArea" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            int row = 50;
            int column = 14;
            object[,] data = new object[row, column];
            for (int i = 0; i &lt; row; i++)
            {
                for (int j = 0; j &lt; column; j++)
                {
                    data[i, j] = "R" + i + "C" + j;
                }
            }

            //Set data.
            sheet.Range["A1:N50"].Value = data;
            sheet.Range["C10:H20"].Value = "PrintArea";
            sheet.Range["C10:H20"].Interior.Color = Color.Yellow;
            sheet.PageSetup.PrintHeadings = true;

            //Set print area.
            sheet.PageSetup.PrintArea = "$C$10:$H$20";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigurePrintPageRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            //Set pages' data.
            sheet.Range["A1:J46"].Value = "Page1";
            sheet.Range["A1:J46"].Interior.Color = Color.LightGreen;

            sheet.Range["A47:J92"].Value = "Page2";
            sheet.Range["A47:J92"].Interior.Color = Color.LightYellow;

            sheet.Range["K1:T46"].Value = "Page3";
            sheet.Range["K1:T46"].Interior.Color = Color.OrangeRed;

            sheet.Range["K47:T92"].Value = "Page4";
            sheet.Range["K47:T92"].Interior.Color = Color.DarkOrange;

            sheet.Range["U1:AD46"].Value = "Page5";
            sheet.Range["U1:AD46"].Interior.Color = Color.LightBlue;

            sheet.Range["U47:AD92"].Value = "Page6";
            sheet.Range["U47:AD92"].Interior.Color = Color.IndianRed;
            sheet.PageSetup.PrintHeadings = true;

            //Set print page range, print p1, p3 to p5.
            sheet.PageSetup.PrintPageRange = "1,3-5";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigurePrintTitles" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            int row = 50;
            int column = 14;
            object[,] data = new object[row, column];
            for (int i = 0; i &lt; row; i++)
            {
                for (int j = 0; j &lt; column; j++)
                {
                    data[i, j] = "R" + i + "C" + j;
                }
            }

            //Set data.
            sheet.Range["A1:N50"].Value = data;

            sheet.Range["A2:N4"].Value = "TitleRows";
            sheet.Range["A2:N4"].Interior.Color = Color.Green;

            sheet.Range["C1:E50"].Value = "TitleColumns";
            sheet.Range["C1:E50"].Interior.Color = Color.Yellow;

            sheet.PageSetup.PrintHeadings = true;

            //Set print titles.
            sheet.PageSetup.PrintTitleRows = "$2:$4";
            sheet.PageSetup.PrintTitleColumns = "$C:$E";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.PdfPageSetup.ConfigureScaling" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            System.IO.Stream stream = this.GetResourceStream("logo.png");
            GrapeCity.Documents.Excel.Drawing.IShape picture = sheet.Shapes.AddPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.PNG, 20, 20, 395, 60);
            sheet.Range["B2:D4"].Value = "Text";

            sheet.PageSetup.PrintGridlines = true;

            //Set scaling.
            sheet.PageSetup.Zoom = 200;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.Text.ExportCellRichText" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            IRange a1 = worksheet.Range["A1"];
            a1.Value = "Perfect square trinomial";
            a1.Font.Size = 26;
            a1.Font.Bold = true;
            a1.VerticalAlignment = VerticalAlignment.Bottom;

            a1.EntireRow.RowHeight = 42;
            a1.EntireColumn.ColumnWidth = 50;

            ITextRun run1 = a1.Characters(8, 7);
            run1.Font.Italic = true;
            run1.Font.ThemeColor = ThemeColor.Accent1;

            IRange b1 = worksheet.Range["B1"];
            b1.Font.Size = 22;
            b1.EntireColumn.ColumnWidth = 40;

            b1.Value = "(a+b)2 = a2+2ab+b2";
            b1.VerticalAlignment = VerticalAlignment.Center;
            
            ITextRun superRun1 = b1.Characters(5, 1);
            superRun1.Font.Superscript = true;
            superRun1.Font.Color = System.Drawing.Color.Red;

            ITextRun superRun2 = b1.Characters(10, 1);
            superRun2.Font.Superscript = true;
            superRun2.Font.Color = System.Drawing.Color.Green;

            ITextRun superRun3 = b1.Characters(17, 1);
            superRun3.Font.Superscript = true;
            superRun3.Font.Color = System.Drawing.Color.Blue;
           
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.Text.NumberFormating" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            sheet.Range["B3:B7"].Value = 123456.789;
            sheet.Range["B9:B13"].Value = -123456.789;

            sheet.Range["B4, B10"].NumberFormat = "0.00;[Red]0.00";
            sheet.Range["B5, B11"].NumberFormat = "$#,##0.00;[Red]$#,##0.00";
            sheet.Range["B6, B12"].NumberFormat = "0.00E+00";
            sheet.Range["B7, B13"].NumberFormat = "_($* #,##0.00_);_($* (#,##0.00);_($* \" - \"??_);_(@_)";

            //Other settings
            sheet.Columns[1].ColumnWidthInPixel = 100;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.Text.Overflow" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            sheet.Range["F2, F4"].Value = "This is a test string of overflow";

            sheet.Range["F6, F8"].Value = "This is a test string of overflow with right alignment";
            sheet.Range["F6, F8"].HorizontalAlignment = HorizontalAlignment.Right;

            sheet.Range["D8, H4"].Value = 123;

            //Other settings
            sheet.Range["A1:J10"].Borders.LineStyle = BorderLineStyle.Thin;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.Text.TextStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            #region Aligment
            sheet.Range["A1"].Value = "Alignment";

            sheet.Range["B2"].Value = "Left Alignment";
            sheet.Range["B2"].HorizontalAlignment = HorizontalAlignment.Left;

            sheet.Range["C2"].Value = "Center Alignment";
            sheet.Range["C2"].HorizontalAlignment = HorizontalAlignment.Center;

            sheet.Range["D2"].Value = "Right Alignment";
            sheet.Range["D2"].HorizontalAlignment = HorizontalAlignment.Right;

            sheet.Range["B3"].Value = "Top Alignment";
            sheet.Range["B3"].VerticalAlignment = VerticalAlignment.Top;

            sheet.Range["C3"].Value = "Middle Alignment";
            sheet.Range["C3"].VerticalAlignment = VerticalAlignment.Center;

            sheet.Range["D3"].Value = "Bottom Alignment";
            sheet.Range["D3"].VerticalAlignment = VerticalAlignment.Bottom;

            sheet.Range["B4"].Value = "This is  a test string for Justify Alignment. \nThis is a test string for Justify Alignment. ";
            sheet.Range["B4"].HorizontalAlignment = HorizontalAlignment.Justify;
            sheet.Range["B4"].VerticalAlignment = VerticalAlignment.Justify;

            sheet.Range["C4"].Value = "This is  a test string for Distributed Alignment. \nThis is a test string for Distributed Alignment. ";
            sheet.Range["C4"].HorizontalAlignment = HorizontalAlignment.Distributed;
            sheet.Range["C4"].VerticalAlignment = VerticalAlignment.Distributed;
            #endregion

            //Wordwrap
            sheet.Range["A6"].Value = "Wordwrap";
            sheet.Range["B7"].Value = "This is a test string for Wordwrap";
            sheet.Range["C7"].Value = "This is a test string \n for Wordwrap";
            sheet.Range["B7:C7"].WrapText = true;

            //Indent
            sheet.Range["A9"].Value = "Indent";
            sheet.Range["B10"].Value = "Left Indent";
            sheet.Range["B10"].IndentLevel = 3;
            sheet.Range["C10"].Value = "Right Indent";
            sheet.Range["C10"].IndentLevel = 3;
            sheet.Range["C10"].HorizontalAlignment = HorizontalAlignment.Right;

            //Shrink to fit
            sheet.Range["A12"].Value = "Shrink to fit";
            sheet.Range["B13"].Value = "This is a test string for \"Shrink to fit\"";
            sheet.Range["B13"].ShrinkToFit = true;

            //Underline
            sheet.Range["A15"].Value = "Underline";
            sheet.Range["B16"].Value = "Single Underline";
            sheet.Range["B16"].Font.Underline = UnderlineType.Single;

            //Strikthrough
            sheet.Range["A18"].Value = "Strikthrough";
            sheet.Range["B19"].Value = "Strikthrough";
            sheet.Range["B19"].Font.Strikethrough = true;

            //Other settings
            sheet.Columns[0].Font.Bold = true;
            sheet.Columns[0].ColumnWidthInPixel = 100;
            sheet.Columns[1].ColumnWidthInPixel = 200;
            sheet.Columns[2].ColumnWidthInPixel = 245;
            sheet.Columns[3].ColumnWidthInPixel = 234;
            sheet.Rows[2].RowHeightInPixel = 72;
            sheet.Rows[3].RowHeightInPixel = 123;
            sheet.Rows[6].RowHeightInPixel = 48;

            sheet.Range["A1:D19"].Borders.LineStyle = BorderLineStyle.Thin;
            sheet.PageSetup.PaperSize = PaperSize.A3;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PDFExporting.Text.VerticalText" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet sheet = workbook.Worksheets[0];

            sheet.Range["A1"].Font.Name = "@Meiryo";
            sheet.Range["A1"].Value = "日本語（にほんご、にっぽんご）は、主として、日本列島で使用されてきた言語である。GrapeCity";
            sheet.Range["A1"].HorizontalAlignment = HorizontalAlignment.Right;
            sheet.Range["A1"].VerticalAlignment = VerticalAlignment.Top;
            sheet.Range["A1"].Orientation = -90;
            sheet.Range["A1"].WrapText = true;

            sheet.Range["A1"].ColumnWidth = 27;
            sheet.Range["A1"].RowHeight = 190;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Picture.CreatePicture" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            System.IO.Stream stream = this.GetResourceStream("logo.png");
            GrapeCity.Documents.Excel.Drawing.IShape picture = worksheet.Shapes.AddPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.PNG, 20, 20, 790, 120);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Picture.DeletePicture" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            System.IO.Stream stream = this.GetResourceStream("logo.png");
            GrapeCity.Documents.Excel.Drawing.IShape picture = worksheet.Shapes.AddPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.PNG, 20, 20, 100, 100);
            //set picture size.
            picture.WidthInPixel = 700;
            picture.HeightInPixel = 120;
            //config picture layout.
            picture.Fill.Solid();
            picture.Fill.Color.ObjectThemeColor = ThemeColor.Accent1;

            //delete picture.
            picture.Delete();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Picture.PictureCopy" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            System.IO.Stream stream = this.GetResourceStream("logo.png");

            //Create a shape in worksheet, picture's range is Range["A2:I6"]
            GrapeCity.Documents.Excel.Drawing.IShape picture = worksheet.Shapes.AddPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.PNG, 20, 20, 395, 60);

            //Range["A2:I6"] must contain picture's range, copy a new picture to Range["J2:R6"]
            worksheet.Range["A2:I6"].Copy(worksheet.Range["J2"]);
            //worksheet.Range["A2:I6"].Copy(worksheet.Range["J2:R6"]);

            //Cross sheet copy, copy a new shape to worksheet2's Range["J2:R6"]
            //IWorksheet worksheet2 = workbook.Worksheets.Add()
            //worksheet.Range["A2:I6"].Copy(worksheet2.Range["J2"]);
            //worksheet.Range["A2:I6"].Copy(worksheet2.Range["J2:R6"]);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Picture.PictureCut" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            System.IO.Stream stream = this.GetResourceStream("logo.png");

            //Create a shape in worksheet, picture's range is Range["A2:I6"]
            GrapeCity.Documents.Excel.Drawing.IShape picture = worksheet.Shapes.AddPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.PNG, 20, 20, 395, 60);

            //Range["A2:I6"] must contain picture's range, cut a new picture to Range["J2:R6"]
            worksheet.Range["A2:I6"].Cut(worksheet.Range["J2"]);
            //worksheet.Range["A2:I6"].Cut(worksheet.Range["J2:R6"]);

            //Cross sheet cut, cut a new shape to worksheet2's Range["J2:R6"]
            //IWorksheet worksheet2 = workbook.Worksheets.Add()
            //worksheet.Range["A2:I6"].Cut(worksheet2.Range["J2"]);
            //worksheet.Range["A2:I6"].Cut(worksheet2.Range["J2:R6"]);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Picture.PictureDuplicate" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            System.IO.Stream stream = this.GetResourceStream("logo.png");

            //Create a shape in worksheet
            GrapeCity.Documents.Excel.Drawing.IShape picture = worksheet.Shapes.AddPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.PNG, 20, 20, 395, 60);

            //Duplicate picture
            GrapeCity.Documents.Excel.Drawing.IShape newPicture = picture.Duplicate();

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PivotTable.ChangeDataFieldSummarizeFunction" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F16"].Value = sourceData;
            worksheet.Range["A:F"].ColumnWidth = 15;
            var pivotcache = workbook.PivotCaches.Create(worksheet.Range["A1:F16"]);
            var pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range["H7"], "pivottable1");
            worksheet.Range["D2:D16"].NumberFormat = "$#,##0.00";
            worksheet.Range["I9:O11"].NumberFormat = "$#,##0.00";
            worksheet.Range["H:O"].ColumnWidth = 12;

            //config pivot table's fields
            var field_Category = pivottable.PivotFields["Category"];
            field_Category.Orientation = PivotFieldOrientation.RowField;

            var field_Product = pivottable.PivotFields["Product"];
            field_Product.Orientation = PivotFieldOrientation.ColumnField;

            var field_Amount = pivottable.PivotFields["Amount"];
            field_Amount.Orientation = PivotFieldOrientation.DataField;

            var field_Country = pivottable.PivotFields["Country"];
            field_Country.Orientation = PivotFieldOrientation.PageField;

            //Change data field's summarize function.
            field_Amount.Function = ConsolidationFunction.Average;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PivotTable.CreatePivotTable" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F16"].Value = sourceData;
            worksheet.Range["A:F"].ColumnWidth = 15;
            var pivotcache = workbook.PivotCaches.Create(worksheet.Range["A1:F16"]);
            var pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range["H7"], "pivottable1");
            worksheet.Range["D2:D16"].NumberFormat = "$#,##0.00";
            worksheet.Range["I9:O11"].NumberFormat = "$#,##0.00";
            worksheet.Range["H:O"].ColumnWidth = 12;

            //config pivot table's fields
            var field_Category = pivottable.PivotFields["Category"];
            field_Category.Orientation = PivotFieldOrientation.RowField;

            var field_Product = pivottable.PivotFields["Product"];
            field_Product.Orientation = PivotFieldOrientation.ColumnField;

            var field_Amount = pivottable.PivotFields["Amount"];
            field_Amount.Orientation = PivotFieldOrientation.DataField;

            var field_Country = pivottable.PivotFields["Country"];
            field_Country.Orientation = PivotFieldOrientation.PageField;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PivotTable.FilterItemsInPivotTable" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F16"].Value = sourceData;
            var pivotcache = workbook.PivotCaches.Create(worksheet.Range["A1:F16"]);
            var pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range["I7"], "pivottable1");
            worksheet.Range["D2:D16"].NumberFormat = "$#,##0.00";
            worksheet.Range["J8:J11"].NumberFormat = "$#,##0.00";

            var field_product = pivottable.PivotFields[1];
            field_product.Orientation = PivotFieldOrientation.RowField;

            var field_Amount = pivottable.PivotFields[3];
            field_Amount.Orientation = PivotFieldOrientation.DataField;

            var field_Country = pivottable.PivotFields[5];
            field_Country.Orientation = PivotFieldOrientation.PageField;

            //row field filter.
            field_product.PivotItems["Apple"].Visible = false;
            field_product.PivotItems["Beans"].Visible = false;
            field_product.PivotItems["Orange"].Visible = false;

            //page filter.
            field_Country.PivotItems["United States"].Visible = false;
            field_Country.PivotItems["Canada"].Visible = false;

            worksheet.Range["E:E"].ColumnWidth = 12;
            worksheet.Range["I:I"].ColumnWidth = 12;
            worksheet.Range["J:J"].ColumnWidth = 16;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PivotTable.ModifySubtotalsForPivotField" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F16"].Value = sourceData;
            var pivotcache = workbook.PivotCaches.Create(worksheet.Range["A1:F16"]);
            var pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range["I2"], "pivottable1");
            worksheet.Range["D2:D16"].NumberFormat = "$#,##0.00";
            worksheet.Range["J4:J17, J9:J33"].NumberFormat = "$#,##0.00";
            
            var field_Category = pivottable.PivotFields[2];
            field_Category.Orientation = PivotFieldOrientation.RowField;

            var field_Product = pivottable.PivotFields[1];
            field_Product.Orientation = PivotFieldOrientation.RowField;

            var field_Amount = pivottable.PivotFields[3];
            field_Amount.Orientation = PivotFieldOrientation.DataField;

            //modify subtotals for pivot field.
            field_Category.Subtotals = SubtotalType.Sum | SubtotalType.Count | SubtotalType.Average | SubtotalType.Max |
                                        SubtotalType.Min | SubtotalType.CountNums | SubtotalType.StdDev |
                                        SubtotalType.StdDevP | SubtotalType.Var | SubtotalType.VarP;

            worksheet.Range["E:E"].ColumnWidth = 12;
            worksheet.Range["I:J"].ColumnWidth = 20;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.PivotTable.RefreshPivotTable" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F16"].Value = sourceData;
            var pivotcache = workbook.PivotCaches.Create(worksheet.Range["A1:F16"]);
            var pivottable = worksheet.PivotTables.Add(pivotcache, worksheet.Range["I5"], "pivottable1");
            worksheet.Range["D2:D16"].NumberFormat = "$#,##0.00";
            worksheet.Range["J6:J12"].NumberFormat = "$#,##0.00";

            var field_product = pivottable.PivotFields["Product"];
            field_product.Orientation = PivotFieldOrientation.RowField;

            var field_Amount = pivottable.PivotFields[3];
            field_Amount.Orientation = PivotFieldOrientation.DataField;

            //change pivot cache's source data.
            worksheet.Range["D8"].Value = 3000;

            //sync cache's data to pivot table.
            worksheet.PivotTables[0].Refresh();

            worksheet.Range["E:E"].ColumnWidth = 12;
            worksheet.Range["I:I"].ColumnWidth = 12;
            worksheet.Range["J:J"].ColumnWidth = 16;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.AccessCellsRowsColumns" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            var range = worksheet.Range["A5:B7"];

            //set value for cell A7.
            range.Cells[4].Value = "A7";

            //cell is B6
            range.Cells[1, 1].Value = "B6";

            //row count is 3 and range is A6:B6.
            var rowCount = range.Rows.Count;
            var row = range.Rows[1].ToString();

            //set interior color for row range A6:B6.
            range.Rows[1].Interior.Color = Color.LightBlue;

            //column count is 2 and range is B5:B7.
            var columnCount = range.Columns.Count;
            var column = range.Columns[1].ToString();

            //set values for column range B5:B7.
            range.Columns[1].Interior.Color = Color.LightSkyBlue;

            //entire rows are from row 5 to row 7
            var entirerow = range.EntireRow.ToString();

            //entire columns are from column A to column B
            var entireColumn = range.EntireColumn.ToString();

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.AccessEachAreaOfRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            var range = worksheet.Range["A5:B7, C3, H5:N6"];

            //set interior color for area1 A5:B7.
            var area1 = worksheet.Range["A5:B7, C3, H5:N6"].Areas[0];
            area1.Interior.Color = Color.Pink;

            //set interior color for area2 C3.
            var area2 = worksheet.Range["A5:B7, C3, H5:N6"].Areas[1];
            area2.Interior.Color = Color.LightGreen;

            //set interior color for area3 H5:N6.
            var area3 = worksheet.Range["A5:B7, C3, H5:N6"].Areas[2];
            area3.Interior.Color = Color.LightBlue;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.AccessRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //use index to access cell A1.
            worksheet.Range[0, 0].Interior.Color = Color.LightGreen;

            //use index to access range A1:B2
            worksheet.Range[0, 0, 2, 2].Value = 5;

            //use string to access range.
            worksheet.Range["A2"].Interior.Color = Color.LightYellow;
            worksheet.Range["C3:D4"].Interior.Color = Color.Tomato;
            worksheet.Range["A5:B7, C3, H5:N6"].Value = 2;

            //use index to access rows
            worksheet.Rows[2].Interior.Color = Color.LightSalmon;

            //use string to access rows
            worksheet.Range["4:4"].Interior.Color = Color.LightSkyBlue;

            //use index to access columns
            worksheet.Columns[2].Interior.Color = Color.LightSalmon;

            //use string to access columns
            worksheet.Range["D:D"].Interior.Color = Color.LightSkyBlue;

            //use Cells to access range.
            worksheet.Cells[5].Interior.Color = Color.LightBlue;
            worksheet.Cells[5, 5].Interior.Color = Color.LightYellow;

            //access all rows in worksheet
            var allRows = worksheet.Rows.ToString();

            //access all columns in worksheet
            var allColumns = worksheet.Columns.ToString();

            //access the entire sheet range
            var entireSheet = worksheet.Cells.ToString();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.CellInfo" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            // cell's value B2
            string cell = GrapeCity.Documents.Excel.CellInfo.CellIndexToName(1, 1);
            worksheet.Range[cell].Interior.Color = Color.LightBlue;

            int rowIndex, columnIndex;
            // rowIndex is 3 and columnIndex is 2
            GrapeCity.Documents.Excel.CellInfo.CellNameToIndex("C4", out rowIndex, out columnIndex);
            worksheet.Range[rowIndex, columnIndex].Interior.Color = Color.LightCoral;

            // column is D
            string column = GrapeCity.Documents.Excel.CellInfo.ColumnIndexToName(3);
            worksheet.Range[String.Format("{0}:{0}", column)].Interior.Color = Color.LightGreen;

            // columnIndex is 4
            columnIndex = GrapeCity.Documents.Excel.CellInfo.ColumnNameToIndex("E");
            worksheet.Columns[columnIndex].Interior.Color = Color.LightSalmon;

            // row is 3
            string row = GrapeCity.Documents.Excel.CellInfo.RowIndexToName(2);
            worksheet.Range[String.Format("{0}:{0}", row)].Interior.Color = Color.LightSteelBlue;

            // rowIndex is 4
            rowIndex = GrapeCity.Documents.Excel.CellInfo.RowNameToIndex("5");
            worksheet.Rows[rowIndex].Interior.Color = Color.LightSkyBlue;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.CutCopyRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            IWorksheet worksheet2 = workbook.Worksheets.Add();

            worksheet.Range["B3:D12"].Value = 5;
            worksheet.Range["B3:D12"].Interior.Color = Color.LightGreen;

            //Copy
            worksheet.Range["B3:D12"].Copy(worksheet.Range["E5"]);

            //Cut
            worksheet.Range["B3:D12"].Cut(worksheet.Range["I5:K14"]);

            worksheet.Range["I1:K2"].Value = 2;
            worksheet.Range["I1:K2"].Interior.Color = Color.Pink;

            //cross sheet cut copy.
            worksheet.Range["I1:K2"].Cut(worksheet2.Range["H5"]);
            worksheet.Range["G4:H5"].Copy(worksheet2.Range["A1"]);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.GetFeatureRelatedUsedRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["A1:B2"].Value = new object[,]
            {
                {1, 2},
                {"aaa", "bbb"}
            };
            worksheet.Range["A2:C3"].Interior.Color = Color.Green;

            //style used range is A2:C3.
            var UsedRange_style = worksheet.GetUsedRange(UsedRangeType.Style);
            UsedRange_style.Interior.Color = Color.LightBlue;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.GetRangeRowCountColumnCount" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            var range = worksheet.Range["A5:B7"];

            //cell count is 6.
            var cellcount = range.Count;
            //cell count is 6.
            var cellcount1 = range.Cells.Count;
            //row count is 3.
            var rowcount = range.Rows.Count;
            //column count is 2.
            var columncount = range.Columns.Count;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.GetWorksheetUsedRange" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            worksheet.Range["H6:M7"].Value = 1;
            worksheet.Range["J9:J10"].Merge();

            //set interior color for worksheet usedRange "H6:M10".
            var usedrange = worksheet.UsedRange;
            usedrange.Interior.Color = Color.LightBlue;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.HiddenRowColumn" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["E1"].Value = 1;

            //Hidden row 2:6.
            worksheet.Range["2:6"].Hidden = true;

            //Hidden column A:D.
            worksheet.Range["A:D"].Hidden = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.InsertCellsDeleteCells" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet1 = workbook.Worksheets[0];
            IWorksheet worksheet2 = workbook.Worksheets.Add();

            var data = new object[,]
            {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
            };

            worksheet1.Range["A1:C3"].Value = data;
            worksheet2.Range["A1:C3"].Value = data;

            //Insert cells
            worksheet1.Range["A2"].Insert();//Auto
            worksheet1.Range["B2"].Insert(InsertShiftDirection.Down);
            worksheet1.Range["C2"].Insert(InsertShiftDirection.Right);

            //Delete cells
            worksheet2.Range["A2"].Delete();//Auto
            worksheet2.Range["B2"].Delete(DeleteShiftDirection.Left);
            worksheet2.Range["C2"].Delete(DeleteShiftDirection.Up);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.InsertDeleteRowsColumns" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet1 = workbook.Worksheets[0];
            IWorksheet worksheet2 = workbook.Worksheets.Add();

            var data = new object[,]
            {
                {1, 2, 3},
                {4, 5, 6},
                {7, 8, 9}
            };

            worksheet1.Range["A1:C3"].Value = data;
            worksheet2.Range["A1:C3"].Value = data;

            //Insert rows
            worksheet1.Range["A2:B2"].EntireRow.Insert();
            worksheet1.Range["3:5"].Insert();

            //Insert columns
            worksheet1.Range["B3:B5"].EntireColumn.Insert();
            worksheet1.Range["A:A"].Insert();

            //Delete rows
            worksheet2.Range["A3:A5"].EntireRow.Delete();
            worksheet2.Range["2:4"].Delete();

            //Delete columns
            worksheet2.Range["B3:B5"].EntireColumn.Delete();
            worksheet2.Range["A:A"].Delete();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.MergeCells" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //A1:C4 is a single merged cell.
            worksheet.Range["A1:C4"].Merge();
            //H5:J5 is a single merged cell.
            //H6:J6 is a single merged cell.
            worksheet.Range["H5:J6"].Merge(true);

            //select A1:H5's entire merge area A1:J5, entire merge area is a bounding rectangle.
            var entireMergeArea = worksheet.Range["A1:H5"].EntireMergeArea;
            entireMergeArea.Select();

            //judge if H5 is a merged cell.
            if (worksheet.Range["J5"].MergeCells)
            {
                //set value to the top left cell of the merge area.
                worksheet.Range["J5"].EntireMergeArea[0, 0].Value = 1;
            }
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.SetRangeValue" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:F"].ColumnWidth = 15;
            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            //set two-dimension array value to range A1:F7
            worksheet.Range["A1:F7"].Value = data;

            //return a two-dimension array when get range A1:B7's value.
            var result = worksheet.Range["A1:B7"].Value;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.RangeOperations.SetRowHeightColumnWidth" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //set row height for row 1:2.
            worksheet.Range["1:2"].RowHeight = 50;

            //set column width for column C:D.
            worksheet.Range["C:D"].ColumnWidth = 20;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ConfigShape3DFormat" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 50, 30, 200, 100);
            shape.ThreeD.RotationX = 50;
            shape.ThreeD.RotationY = 20;
            shape.ThreeD.RotationZ = 30;
            shape.ThreeD.Depth = 7;
            shape.ThreeD.Z = 20;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ConfigShapeLine" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 1, 1, 200, 100);
            shape.Line.DashStyle = GrapeCity.Documents.Excel.Drawing.LineDashStyle.Dash;
            shape.Line.Style = GrapeCity.Documents.Excel.Drawing.LineStyle.Single;
            shape.Line.Weight = 2;
            shape.Line.Color.ObjectThemeColor = ThemeColor.Accent6;
            shape.Line.Transparency = 0.3;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ConfigShapeWithGradientFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 1, 1, 200, 100);
            shape.Fill.PresetGradient(GrapeCity.Documents.Excel.Drawing.GradientStyle.Vertical, 3, GrapeCity.Documents.Excel.Drawing.PresetGradientType.Silver);
            shape.Fill.RotateWithObject = false;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ConfigShapeWithPatternFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 1, 1, 200, 100);
            shape.Fill.Patterned(GrapeCity.Documents.Excel.Drawing.PatternType.Percent10);
            shape.Fill.Color.ObjectThemeColor = ThemeColor.Accent2;
            shape.Fill.PatternColor.ObjectThemeColor = ThemeColor.Accent6;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ConfigShapeWithPictureFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 20, 20, 200, 100);

            System.IO.Stream stream = this.GetResourceStream("logo.png");

            shape.Fill.UserPicture(stream, GrapeCity.Documents.Excel.Drawing.ImageType.JPG);
            shape.PictureFormat.ColorType = GrapeCity.Documents.Excel.Drawing.PictureColorType.Grayscale;
            shape.PictureFormat.Brightness = 0.6;
            shape.PictureFormat.Contrast = 0.3;
            shape.PictureFormat.Crop.PictureOffsetX = 10;
            shape.PictureFormat.Crop.PictureOffsetY = -5;
            shape.PictureFormat.Crop.PictureWidth = 120;
            shape.PictureFormat.Crop.PictureHeight = 80;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ConfigShapeWithSolidFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 1, 1, 200, 100);
            shape.Fill.Solid();
            shape.Fill.Color.RGB = Color.Red;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ConfigShapeWithTextureFill" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 1, 1, 200, 100);
            shape.Fill.PresetTextured(GrapeCity.Documents.Excel.Drawing.PresetTexture.Canvas);
            shape.Fill.TextureAlignment = GrapeCity.Documents.Excel.Drawing.TextureAlignment.Center;
            shape.Fill.TextureOffsetX = 2.5;
            shape.Fill.TextureOffsetY = 3.2;
            shape.Fill.TextureHorizontalScale = 0.9;
            shape.Fill.TextureVerticalScale = 0.2;
            shape.Fill.Transparency = 0.5;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ConnectShapesByConnector" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape ShapeBegin = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Rectangle, 1, 1, 100, 100);
            GrapeCity.Documents.Excel.Drawing.IShape EndBegin = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Rectangle, 200, 200, 100, 100);
            GrapeCity.Documents.Excel.Drawing.IShape ConnectorShape = worksheet.Shapes.AddConnector(GrapeCity.Documents.Excel.Drawing.ConnectorType.Straight, 1, 1, 101, 101);

            //connect shapes by connector shape.
            ConnectorShape.ConnectorFormat.BeginConnect(ShapeBegin, 3);
            ConnectorShape.ConnectorFormat.EndConnect(EndBegin, 0);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.SetShapeText" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 1, 1, 200, 100);
            shape.Width = 500;
            shape.Height = 200;

            shape.TextFrame.TextRange.Font.Color.RGB = Color.FromArgb(0, 255, 0);
            shape.TextFrame.TextRange.Font.Bold = true;
            shape.TextFrame.TextRange.Font.Italic = true;
            shape.TextFrame.TextRange.Font.Size = 20;
            shape.TextFrame.TextRange.Font.Strikethrough = true;

            shape.TextFrame.TextRange.Paragraphs.Add("This is a parallelogram shape.");
            shape.TextFrame.TextRange.Paragraphs.Add("My name is XXX");
            shape.TextFrame.TextRange.Paragraphs[1].Runs.Add("Hello World!");

            shape.TextFrame.TextRange.Paragraphs[1].Runs[0].Font.Strikethrough = false;
            shape.TextFrame.TextRange.Paragraphs[1].Runs[0].Font.Size = 35;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ShapeCopy" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //Create a shape in worksheet, shape's range is Range["A7:B7"]
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Rectangle, 1, 1, 100, 100);

            //Range["A1:D10"] must contain Range["A7:B7"], copy a new shape to Range["C1:F7"]
            worksheet.Range["A1:D10"].Copy(worksheet.Range["E1"]);
            //worksheet.Range["A1:D10"].Copy(worksheet.Range["E1:I9"]);

            //Cross sheet copy, copy a new shape to worksheet2's Range["C1:F7"]
            //IWorksheet worksheet2 = workbook.Worksheets.Add()
            //worksheet.Range["A1:D10"].Copy(worksheet2.Range["E1"]);
            //worksheet.Range["A1:D10"].Copy(worksheet2.Range["E1:I9"]);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ShapeCut" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //Create a shape in worksheet, shape's range is Range["A7:B7"]
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Rectangle, 1, 1, 100, 100);

            //Range["A1:D10"] must contain Range["A7:B7"], cut a new shape to Range["C1:F7"]
            worksheet.Range["A1:D10"].Cut(worksheet.Range["E1"]);
            //worksheet.Range["A1:D10"].Cut(worksheet.Range["E1:I9"]);

            //Cross sheet cut, cut a new shape to worksheet2's Range["C1:F7"]
            //IWorksheet worksheet2 = workbook.Worksheets.Add()
            //worksheet.Range["A1:D10"].Cut(worksheet2.Range["E1"]);
            //worksheet.Range["A1:D10"].Cut(worksheet2.Range["E1:I9"]);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Shape.ShapeDuplicate" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //Create shape
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Rectangle, 50, 50, 200, 200);

            //Duplicate shape
            GrapeCity.Documents.Excel.Drawing.IShape newShape = shape.Duplicate();

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.AddCustomSlicerStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";

            //create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Category", "categoryCache");

            //add slicer
            ISlicer slicer = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate2", "Category", 30, 550, 100, 200);

            //create custom slicer style.
            ITableStyle slicerStyle = workbook.TableStyles.Add("test");
            //set ShowAsAvailableSlicerStyle to true, the style will be treated as slicer style.
            slicerStyle.ShowAsAvailableSlicerStyle = true;
            slicerStyle.TableStyleElements[TableStyleElementType.WholeTable].Font.Name = "Arial";
            slicerStyle.TableStyleElements[TableStyleElementType.WholeTable].Font.Bold = false;
            slicerStyle.TableStyleElements[TableStyleElementType.WholeTable].Font.Italic = false;
            slicerStyle.TableStyleElements[TableStyleElementType.WholeTable].Font.Color = Color.White;
            slicerStyle.TableStyleElements[TableStyleElementType.WholeTable].Borders.Color = Color.LightPink;
            slicerStyle.TableStyleElements[TableStyleElementType.WholeTable].Interior.Color = Color.LightGreen;

            //set slicer style to custom style.
            slicer.Style = slicerStyle;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.AddSlicersForPivotTable" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F16"].Value = sourceData;
            worksheet.Range["A:F"].ColumnWidth = 15;
            
            //Create pivot cache.
            IPivotCache pivotcache = workbook.PivotCaches.Create(worksheet.Range["A1:F16"]);
            //Create pivot tables.
            IPivotTable pivottable1 = worksheet.PivotTables.Add(pivotcache, worksheet.Range["K5"], "pivottable1");
            IPivotTable pivottable2 = worksheet.PivotTables.Add(pivotcache, worksheet.Range["N3"], "pivottable2");
            worksheet.Range["D2:D16"].NumberFormat = "$#,##0.00";

            //Config pivot fields
            IPivotField field_product1 = pivottable1.PivotFields[1];
            field_product1.Orientation = PivotFieldOrientation.RowField;

            IPivotField field_Amount1 = pivottable1.PivotFields[3];
            field_Amount1.Orientation = PivotFieldOrientation.DataField;

            IPivotField field_product2 = pivottable2.PivotFields[5];
            field_product2.Orientation = PivotFieldOrientation.RowField;

            IPivotField field_Amount2 = pivottable2.PivotFields[2];
            field_Amount2.Orientation = PivotFieldOrientation.DataField;
            field_Amount2.Function = ConsolidationFunction.Count;

            //create slicer cache, the slicers base the slicer cache just control pivot table1.
            ISlicerCache cache = workbook.SlicerCaches.Add(pivottable1, "Product");
            ISlicer slicer1 = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "p1", "Product", 30, 550, 100, 200);

            //add pivot table2 for slicer cache, the slicers base the slicer cache will control pivot tabl1 and pivot table2.
            cache.PivotTables.AddPivotTable(pivottable2);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.AddSlicersForTable" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";
            //create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Category", "categoryCache");

            //add two slicers for Category column.
            ISlicer slicer1 = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate1", "Category", 30, 550, 100, 200);
            ISlicer slicer2 = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate2", "Category", 30, 700, 100, 200);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.ApplySlicerStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";

            //create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Category", "categoryCache");

            //add slicer
            ISlicer slicer = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate1", "Category", 30, 550, 100, 200);

            //set slicer style to build in style.
            slicer.Style = workbook.TableStyles["SlicerStyleLight2"];
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.ConfigSlicerLayout" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";

            //create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Product", "productCache");

            //add slicer
            ISlicer slicer1 = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "product1", "Product", 30, 550, 100, 200);

            //config slicer's layout.
            slicer1.NumberOfColumns = 2;
            slicer1.RowHeight = 25;
            slicer1.DisplayHeader = false;
            slicer1.Shape.Placement = GrapeCity.Documents.Excel.Drawing.Placement.Move;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.DoTableFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";

            //create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Category", "categoryCache");

            //add slicer
            ISlicer slicer1 = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate1", "Category", 20, 550, 100, 200);

            //Apply table filter, this will synchronize to the slicer, the slicer1's selected item is "Fruit".
            worksheet.Range["A1:F16"].AutoFilter(2, "Fruit");
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.SlicerCopy" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] sourceData = new object[,] {
               { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
               { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
               { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
               { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
               { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
               { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
               { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
               { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
               { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
               { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
               { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
               { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
               { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
               { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
               { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
               { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";

            //Create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Category", "categoryCache");

            //Add slicer, slicer's range is Range["H3:J16"]
            ISlicer slicer = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate1", "Category", 30, 550, 100, 200);

            //Range["H3:J16"] must contain slicer's range, copy a new shape to Range["K3:M16"]
            worksheet.Range["H3:J16"].Copy(worksheet.Range["K3"]);
            //worksheet.Range["H3:J16"].Copy(worksheet.Range["K3:M16"]);

            //Cross sheet copy, copy a new shape to worksheet2's Range["K3:M16"]
            //IWorksheet worksheet2 = workbook.Worksheets.Add()
            //worksheet.Range["H3:J16"].Copy(worksheet2.Range["K3"]);
            //worksheet.Range["H3:J16"].Copy(worksheet2.Range["K3:M16"]);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.SlicerCut" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] sourceData = new object[,] {
               { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
               { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
               { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
               { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
               { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
               { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
               { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
               { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
               { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
               { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
               { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
               { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
               { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
               { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
               { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
               { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";

            //Create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Category", "categoryCache");

            //Add slicer, slicer's range is Range["H3:J16"]
            ISlicer slicer = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate1", "Category", 30, 550, 100, 200);

            //Range["H3:J16"] must contain slicer's range, cut a new shape to Range["K3:M16"]
            worksheet.Range["H3:J16"].Cut(worksheet.Range["K3"]);
            //worksheet.Range["H3:J16"].Cut(worksheet.Range["K3:M16"]);

            //Cross sheet cut, cut a new shape to worksheet2's Range["K3:M16"]
            //IWorksheet worksheet2 = workbook.Worksheets.Add()
            //worksheet.Range["H3:J16"].Cut(worksheet2.Range["K3"]);
            //worksheet.Range["H3:J16"].Cut(worksheet2.Range["K3:M16"]);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.SlicerDuplicate" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            object[,] sourceData = new object[,] {
               { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
               { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
               { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
               { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
               { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
               { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
               { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
               { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
               { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
               { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
               { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
               { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
               { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
               { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
               { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
               { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";

            //Create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Category", "categoryCache");

            //Add slicer
            ISlicer slicer = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate1", "Category", 30, 550, 100, 200);

            //Duplicate slicer
            GrapeCity.Documents.Excel.Drawing.IShape newShape = slicer.Shape.Duplicate();

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.UseSlicerDoFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";

            //create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Category", "categoryCache");

            //add slicer
            ISlicer slicer1 = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate1", "Category", 30, 550, 100, 200);

            //do filter operation. filter out vegetables.
            slicer1.SlicerCache.SlicerItems["Vegetables"].Selected = false;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Slicer.UseSlicerToClearFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] sourceData = new object[,] {
                { "Order ID", "Product",  "Category",   "Amount", "Date",                    "Country" },
                { 1,          "Carrots",  "Vegetables",  4270,    new DateTime(2018, 1, 6),  "United States" },
                { 2,          "Broccoli", "Vegetables",  8239,    new DateTime(2018, 1, 7),  "United Kingdom" },
                { 3,          "Banana",   "Fruit",       617,     new DateTime(2018, 1, 8),  "United States" },
                { 4,          "Banana",   "Fruit",       8384,    new DateTime(2018, 1, 10), "Canada" },
                { 5,          "Beans",    "Vegetables",  2626,    new DateTime(2018, 1, 10), "Germany" },
                { 6,          "Orange",   "Fruit",       3610,    new DateTime(2018, 1, 11), "United States" },
                { 7,          "Broccoli", "Vegetables",  9062,    new DateTime(2018, 1, 11), "Australia" },
                { 8,          "Banana",   "Fruit",       6906,    new DateTime(2018, 1, 16), "New Zealand" },
                { 9,          "Apple",    "Fruit",       2417,    new DateTime(2018, 1, 16), "France" },
                { 10,         "Apple",    "Fruit",       7431,    new DateTime(2018, 1, 16), "Canada" },
                { 11,         "Banana",   "Fruit",       8250,    new DateTime(2018, 1, 16), "Germany" },
                { 12,         "Broccoli", "Vegetables",  7012,    new DateTime(2018, 1, 18), "United States" },
                { 13,         "Carrots",  "Vegetables",  1903,    new DateTime(2018, 1, 20), "Germany" },
                { 14,         "Broccoli", "Vegetables",  2824,    new DateTime(2018, 1, 22), "Canada" },
                { 15,         "Apple",    "Fruit",       6946,    new DateTime(2018, 1, 24), "France" },
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["A1:F16"].Value = sourceData;
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F16"], true);
            table.Columns[3].DataBodyRange.NumberFormat = "$#,##0.00";

            //create slicer cache for table.
            ISlicerCache cache = workbook.SlicerCaches.Add(table, "Category", "categoryCache");

            //add slicer
            ISlicer slicer1 = cache.Slicers.Add(workbook.Worksheets["Sheet1"], "cate1", "Category", 30, 550, 100, 200);

            //do filter operation. filter out vegetables.
            slicer1.SlicerCache.SlicerItems["Vegetables"].Selected = false;

            //clear slicer filter.
            slicer1.SlicerCache.ClearAllFilters();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sorting.CustomSort" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //give a custom sort values string. "Angela" and "Damon" should be the top1 and top2.
            var sortkey = new ValueSortField(worksheet.Range["A2:A7"], "\"Angela\", \"Damon\"");
            worksheet.Range["A2:F7"].Sort(SortOrientation.Columns, false, sortkey);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sorting.SortRangeByFontColor" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["F2"].Font.Color = Color.Red;
            worksheet.Range["F3"].Font.Color = Color.Gainsboro;
            worksheet.Range["F4"].Font.Color = Color.Green;
            worksheet.Range["F5"].Font.Color = Color.Gainsboro;
            worksheet.Range["F6"].Font.Color = Color.Gainsboro;
            worksheet.Range["F7"].Font.Color = Color.Gainsboro;

            //The font colors which are same to "F7" cell's color will in the top.
            worksheet.Sort.SortFields.Add(new FontColorSortField(worksheet.Range["F2:F7"], worksheet.Range["F7"].Font.Color, SortOrder.Ascending));
            worksheet.Sort.Range = worksheet.Range["A2:F7"];
            worksheet.Sort.Orientation = SortOrientation.Columns;
            worksheet.Sort.Apply();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sorting.SortRangeByIcon" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            IIconSetCondition iconset = worksheet.Range["F2:F7"].FormatConditions.AddIconSetCondition();
            iconset.IconSet = workbook.IconSets[IconSetType.Icon3TrafficLights1];

            //green traffic light will in the top.
            worksheet.Sort.SortFields.Add(new IconSortField(worksheet.Range["F2:F7"], workbook.IconSets[IconSetType.Icon3TrafficLights1][2], SortOrder.Ascending));
            worksheet.Sort.Range = worksheet.Range["A2:F7"];
            worksheet.Sort.Orientation = SortOrientation.Columns;
            worksheet.Sort.Apply();

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sorting.SortRangeByInterior" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            worksheet.Range["F2"].Interior.Color = Color.LightPink;
            worksheet.Range["F3"].Interior.Color = Color.LightGreen;
            worksheet.Range["F4"].Interior.Color = Color.LightPink;
            worksheet.Range["F5"].Interior.Color = Color.LightGreen;
            worksheet.Range["F6"].Interior.Color = Color.LightBlue;
            worksheet.Range["F7"].Interior.Color = Color.LightPink;
            
            //"F4" will in the top.
            worksheet.Sort.SortFields.Add(new CellColorSortField(worksheet.Range["F2:F7"], worksheet.Range["F4"].DisplayFormat.Interior, SortOrder.Ascending));
            worksheet.Sort.Range = worksheet.Range["A2:F7"];
            worksheet.Sort.Orientation = SortOrientation.Columns;
            worksheet.Sort.Apply();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sorting.SortRangeByValue" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //Sort by column F, ascending.
            worksheet.Range["A2:F7"].Sort(worksheet.Range["F2:F7"], SortOrder.Ascending, SortOrientation.Columns);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sparklines.ClearSparklineGroup" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]
            {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", new DateTime(2017, 5, 21), "Customer A", "Invoice 1001", null, 1200.15, 1916.18, 1105.23, 1806.53, null},
                {"1002", new DateTime(2017, 3, 18), "Customer B", "Invoice 1002", null, 896.23, 1005.53, 1800.56, 1150.49, null},
                {"1003", new DateTime(2017, 6, 15), "Customer C", "Invoice 1003", null, 827.63, 1009.23, 1869.23, 1002.56, null}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B2:K5"].Value = data;
            worksheet.Range["B:K"].ColumnWidth = 15;

            worksheet.Tables.Add(worksheet.Range["B2:K5"], true);
            worksheet.Tables[0].Columns[9].DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])";

            //create a new group of sparklines.
            worksheet.Range["F3"].SparklineGroups.Add(SparkType.Line, "G3:J3");
            //create another new group of sparklines.
            worksheet.Range["F4:F5"].SparklineGroups.Add(SparkType.Column, "G4:J5");

            //clear sparkline group, all sparklines in the group will be cleaned.
            worksheet.Range["F3, F4"].SparklineGroups.ClearGroups();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sparklines.ClearSparklines" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]
            {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", new DateTime(2017, 5, 21), "Customer A", "Invoice 1001", null, 1200.15, 1916.18, 1105.23, 1806.53, null},
                {"1002", new DateTime(2017, 3, 18), "Customer B", "Invoice 1002", null, 896.23, 1005.53, 1800.56, 1150.49, null},
                {"1003", new DateTime(2017, 6, 15), "Customer C", "Invoice 1003", null, 827.63, 1009.23, 1869.23, 1002.56, null}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B2:K5"].Value = data;
            worksheet.Range["B:K"].ColumnWidth = 15;

            worksheet.Tables.Add(worksheet.Range["B2:K5"], true);
            worksheet.Tables[0].Columns[9].DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])";

            //create a new group of sparklines.
            worksheet.Range["F3"].SparklineGroups.Add(SparkType.Line, "G3:J3");
            //create another new group of sparklines.
            worksheet.Range["F4:F5"].SparklineGroups.Add(SparkType.Column, "G4:J5");

            //clear F3 and F4 cell's sparkline. F5 cell's sparkline still exist.
            worksheet.Range["F3, F4"].SparklineGroups.Clear();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sparklines.ConfigSparklineSettings" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]
            {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", new DateTime(2017, 5, 21), "Customer A", "Invoice 1001", null, 1200.15, 1916.18, 1105.23, 1806.53, null},
                {"1002", new DateTime(2017, 3, 18), "Customer B", "Invoice 1002", null, 896.23, 1005.53, 1800.56, 1150.49, null},
                {"1003", new DateTime(2017, 6, 15), "Customer C", "Invoice 1003", null, 827.63, 1009.23, 1869.23, 1002.56, null}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B2:K5"].Value = data;
            worksheet.Range["B:K"].ColumnWidth = 15;

            worksheet.Tables.Add(worksheet.Range["B2:K5"], true);
            worksheet.Tables[0].Columns[9].DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])";

            //create a new group of sparklines.
            worksheet.Range["F3:F5"].SparklineGroups.Add(SparkType.Line, "G3:J5");
            var sparklinegroup = worksheet.Range["F3"].SparklineGroups[0];

            //Config sparkline settings.
            sparklinegroup.LineWeight = 2.5;
            sparklinegroup.Points.Markers.Color.ThemeColor = ThemeColor.Accent2;
            sparklinegroup.Points.Markers.Visible = true;
            sparklinegroup.SeriesColor.ThemeColor = ThemeColor.Accent6;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sparklines.CreateSparklines" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]
            {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", new DateTime(2017, 5, 21), "Customer A", "Invoice 1001", null, 1200.15, 1916.18, 1105.23, 1806.53, null},
                {"1002", new DateTime(2017, 3, 18), "Customer B", "Invoice 1002", null, 896.23, 1005.53, 1800.56, 1150.49, null},
                {"1003", new DateTime(2017, 6, 15), "Customer C", "Invoice 1003", null, 827.63, 1009.23, 1869.23, 1002.56, null}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B2:K5"].Value = data;
            worksheet.Range["B:K"].ColumnWidth = 15;

            worksheet.Tables.Add(worksheet.Range["B2:K5"], true);
            worksheet.Tables[0].Columns[9].DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])";

            //create a new group of sparklines.
            worksheet.Range["F3:F5"].SparklineGroups.Add(SparkType.Line, "G3:J5");  
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sparklines.GroupExistSparklines" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]
            {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", new DateTime(2017, 5, 21), "Customer A", "Invoice 1001", null, 1200.15, 1916.18, 1105.23, 1806.53, null},
                {"1002", new DateTime(2017, 3, 18), "Customer B", "Invoice 1002", null, 896.23, 1005.53, 1800.56, 1150.49, null},
                {"1003", new DateTime(2017, 6, 15), "Customer C", "Invoice 1003", null, 827.63, 1009.23, 1869.23, 1002.56, null}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B2:K5"].Value = data;
            worksheet.Range["B:K"].ColumnWidth = 15;

            worksheet.Tables.Add(worksheet.Range["B2:K5"], true);
            worksheet.Tables[0].Columns[9].DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])";

            //create a new group of sparklines.
            worksheet.Range["F3"].SparklineGroups.Add(SparkType.Line, "G3:J3");
            //create another new group of sparklines.
            worksheet.Range["F4:F5"].SparklineGroups.Add(SparkType.Column, "G4:J5");

            //Create a new group, group exist sparklines, according to Range["F4"]'s sparkline group setting.
            worksheet.Range["F3:F5"].SparklineGroups.Group(worksheet.Range["F4"]);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Sparklines.UseDateAxis" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]
            {
                {"Number", "Date", "Customer", "Description", "Trend", "0-30 Days", "30-60 Days", "60-90 Days", "&gt;90 Days", "Amount"},
                {"1001", new DateTime(2017, 5, 21), "Customer A", "Invoice 1001", null, 1200.15, 1916.18, 1105.23, 1806.53, null},
                {"1002", new DateTime(2017, 3, 18), "Customer B", "Invoice 1002", null, 896.23, 1005.53, 1800.56, 1150.49, null},
                {"1003", new DateTime(2017, 6, 15), "Customer C", "Invoice 1003", null, 827.63, 1009.23, 1869.23, 1002.56, null}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B2:K5"].Value = data;
            worksheet.Range["B:K"].ColumnWidth = 15;

            worksheet.Tables.Add(worksheet.Range["B2:K5"], true);
            worksheet.Tables[0].Columns[9].DataBodyRange.Formula = "=SUM(Table1[@[0-30 Days]:[&gt;90 Days]])";

            //create a new group of sparklines.
            worksheet.Range["F3:F5"].SparklineGroups.Add(SparkType.Line, "G3:J5");

            worksheet.Range["G7:J7"].Value = new object[] { new DateTime(2011, 12, 16), new DateTime(2011, 12, 17), new DateTime(2011, 12, 18), new DateTime(2011, 12, 19) };
            worksheet.Range["F3"].SparklineGroups[0].DateRange = "G7:J7";
            worksheet.Range["F3"].SparklineGroups[0].Axes.Horizontal.Axis.Visible = true;
            worksheet.Range["F3"].SparklineGroups[0].Axes.Horizontal.Axis.Color.Color = Color.Green;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Tables.AccessTableRanges" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //add table.
            worksheet.Tables.Add(worksheet.Range["A1:F7"], true);

            //show totals
            worksheet.Tables[0].ShowTotals = true;

            //set each range's interior color.
            worksheet.Tables[0].HeaderRange.Interior.Color = Color.Green;
            worksheet.Tables[0].DataRange.Interior.Color = Color.Pink;
            worksheet.Tables[0].TotalsRange.Interior.Color = Color.LightGray;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Tables.AddCustomTableStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Add one custom table style.
            ITableStyle style = workbook.TableStyles.Add("test");

            //Set WholeTable element style.
            style.TableStyleElements[TableStyleElementType.WholeTable].Font.Italic = true;
            style.TableStyleElements[TableStyleElementType.WholeTable].Font.Color = Color.White;
            style.TableStyleElements[TableStyleElementType.WholeTable].Font.Strikethrough = true;
            style.TableStyleElements[TableStyleElementType.WholeTable].Borders.LineStyle = BorderLineStyle.Dotted;
            style.TableStyleElements[TableStyleElementType.WholeTable].Borders.Color = Color.FromArgb(0, 193, 213);
            style.TableStyleElements[TableStyleElementType.WholeTable].Interior.Color = Color.FromArgb(59, 92, 170);

            //Set FirstColumnStripe element style.
            style.TableStyleElements[TableStyleElementType.FirstColumnStripe].Font.Bold = true;
            style.TableStyleElements[TableStyleElementType.FirstColumnStripe].Font.Color = Color.FromArgb(255, 0, 0);
            style.TableStyleElements[TableStyleElementType.FirstColumnStripe].Borders.LineStyle = BorderLineStyle.Thick;
            style.TableStyleElements[TableStyleElementType.FirstColumnStripe].Borders.ThemeColor = ThemeColor.Accent5;
            style.TableStyleElements[TableStyleElementType.FirstColumnStripe].Interior.Color = Color.FromArgb(255, 255, 0);
            style.TableStyleElements[TableStyleElementType.FirstColumnStripe].StripeSize = 2;

            //Set SecondColumnStripe element style.
            style.TableStyleElements[TableStyleElementType.SecondColumnStripe].Font.Color = Color.FromArgb(255, 0, 255);
            style.TableStyleElements[TableStyleElementType.SecondColumnStripe].Borders.LineStyle = BorderLineStyle.DashDot;
            style.TableStyleElements[TableStyleElementType.SecondColumnStripe].Borders.Color = Color.FromArgb(42, 105, 162);
            style.TableStyleElements[TableStyleElementType.SecondColumnStripe].Interior.Color = Color.FromArgb(204, 204, 255);

            //add table.
            IWorksheet worksheet = workbook.Worksheets[0];
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F7"], true);
            worksheet.Range["A:F"].ColumnWidth = 15;

            //set custom table style to table.
            table.TableStyle = style;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Tables.ApplyTableStyle" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //add table.
            IWorksheet worksheet = workbook.Worksheets[0];
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F7"], true);
            worksheet.Range["A:F"].ColumnWidth = 15;

            //Add one custom table style.
            ITableStyle style = workbook.TableStyles.Add("test");
            //set custom table style for table.
            table.TableStyle = style;

            //Use table style name get one build in table style.
            ITableStyle tableStyle = workbook.TableStyles["TableStyleMedium3"];
            //set built-in table style for table.
            table.TableStyle = tableStyle;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Tables.CreateTable" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //add table.
            worksheet.Tables.Add(worksheet.Range["A1:F7"], true);          
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Tables.InsertDeleteTableRowColumns" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //add table.
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F7"], true);

            //add table column before first column.
            table.Columns.Add(0);
            //add table column before second column.
            table.Columns.Add(1);

            //delete first table column.
            table.Columns[0].Delete();
            //delete "City" table column.
            table.Columns["City"].Delete();

            //insert a table row in table's last row.
            table.Rows.Add();
            //delete second table row.
            table.Rows[1].Delete();            
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Tables.PerformCalculationsInTable" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //add table.
            worksheet.Tables.Add(worksheet.Range["A1:F7"], true);

            //"Name" column's total row calculation function will be "=SUBTOTAL(103,[Name])"
            worksheet.Tables[0].Columns[0].TotalsCalculation = TotalsCalculation.Count;
            //"Weight" column's total row calculation function will be "=SUBTOTAL(101,[Weight])"
            worksheet.Tables[0].Columns[4].TotalsCalculation = TotalsCalculation.Average;
            worksheet.Tables[0].ShowTotals = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Tables.RemoveTable" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

                object[,] data = new object[,]{
                    {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                    {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                    {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                    {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                    {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                    {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                    {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
                };

                IWorksheet worksheet = workbook.Worksheets[0];
                worksheet.Range["A1:F7"].Value = data;

                //add table.
                ITable table = worksheet.Tables.Add(worksheet.Range["A1:F7"], true);

                //remove table
                table.Delete();

            </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Tables.TableFilter" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //add table.
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F7"], true);

            //Filter table 
            table.Range.AutoFilter(0, new object[] { "Richard", "Nia" }, AutoFilterOperator.Values);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Tables.TableSort" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
                {"Name", "City", "Birthday", "Eye color", "Weight", "Height"},
                {"Richard", "New York", new DateTime(1968, 6, 8), "Blue", 67, 165},
                {"Nia", "New York", new DateTime(1972, 7, 3), "Brown", 62, 134},
                {"Jared", "New York", new DateTime(1964, 3, 2), "Hazel", 72, 180},
                {"Natalie", "Washington", new DateTime(1972, 8, 8), "Blue", 66, 163},
                {"Damon", "Washington", new DateTime(1986, 2, 2), "Hazel", 76, 176},
                {"Angela", "Washington", new DateTime(1993, 2, 15), "Brown", 68, 145}
            };

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["A1:F7"].Value = data;
            worksheet.Range["A:F"].ColumnWidth = 15;

            //add table.
            ITable table = worksheet.Tables.Add(worksheet.Range["A1:F7"], true);

            //sort table 
            ValueSortField key1 = new ValueSortField(worksheet.Range["A1:A2"], SortOrder.Ascending);
            table.Sort.SortFields.Add(key1);
            table.Sort.Apply();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Theme.AddCustomThemes" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Base theme is office theme when not give parameter.
            ITheme theme = new GrapeCity.Documents.Excel.Theme("testTheme");
            //ITheme theme = new GrapeCity.Documents.Excel.Theme("testTheme", Themes.Badge);

            //Customize theme's color.
            theme.ThemeColorScheme[ThemeColor.Light1].RGB = Color.AntiqueWhite;
            theme.ThemeColorScheme[ThemeColor.Dark1].RGB = Color.Aqua;
            theme.ThemeColorScheme[ThemeColor.Light2].RGB = Color.Beige;
            theme.ThemeColorScheme[ThemeColor.Dark1].RGB = Color.Black;
            theme.ThemeColorScheme[ThemeColor.Accent1].RGB = Color.CadetBlue;
            theme.ThemeColorScheme[ThemeColor.Accent2].RGB = Color.Chartreuse;
            theme.ThemeColorScheme[ThemeColor.Accent3].RGB = Color.Chocolate;
            theme.ThemeColorScheme[ThemeColor.Accent4].RGB = Color.Coral;
            theme.ThemeColorScheme[ThemeColor.Accent5].RGB = Color.CornflowerBlue;
            theme.ThemeColorScheme[ThemeColor.Accent6].RGB = Color.Cornsilk;
            theme.ThemeColorScheme[ThemeColor.Hyperlink].RGB = Color.Honeydew;
            theme.ThemeColorScheme[ThemeColor.FollowedHyperlink].RGB = Color.HotPink;

            //Customize theme's font.
            theme.ThemeFontScheme.Major[FontLanguageIndex.Latin].Name = "Kristen ITC";
            theme.ThemeFontScheme.Minor[FontLanguageIndex.Latin].Name = "Segoe Script";

            //Change workbook's theme to custom theme.
            workbook.Theme = theme;

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B2"].Value = "Major Font:";
            worksheet.Range["B3"].Value = "Minor Font:";
            worksheet.Range["C2"].Value = "Kristen ITC";
            worksheet.Range["C3"].Value = "Segoe Script";
            worksheet.Range["C2"].Font.ThemeFont = ThemeFont.Major;
            worksheet.Range["C3"].Font.ThemeFont = ThemeFont.Minor;

            worksheet.Range["E2:E13"].Value = new object[]
            {
                "Light1",
                "Dark1",
                "Light2",
                "Dark2",
                "Accent1",
                "Accent2",
                "Accent3",
                "Accent4",
                "Accent5",
                "Accent6",
                "Hyperlink",
                "FollowedHyperlink"
            };

            worksheet.Range["F2"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["F3"].Interior.ThemeColor = ThemeColor.Dark1;
            worksheet.Range["F4"].Interior.ThemeColor = ThemeColor.Light2;
            worksheet.Range["F5"].Interior.ThemeColor = ThemeColor.Dark2;
            worksheet.Range["F6"].Interior.ThemeColor = ThemeColor.Accent1;
            worksheet.Range["F7"].Interior.ThemeColor = ThemeColor.Accent2;
            worksheet.Range["F8"].Interior.ThemeColor = ThemeColor.Accent3;
            worksheet.Range["F9"].Interior.ThemeColor = ThemeColor.Accent4;
            worksheet.Range["F10"].Interior.ThemeColor = ThemeColor.Accent5;
            worksheet.Range["F11"].Interior.ThemeColor = ThemeColor.Accent6;
            worksheet.Range["F12"].Interior.ThemeColor = ThemeColor.Hyperlink;
            worksheet.Range["F13"].Interior.ThemeColor = ThemeColor.FollowedHyperlink;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Theme.ChangeWorkbookTheme" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Change workbook's theme to builtin theme.
            workbook.Theme = Themes.Berlin;

            IWorksheet worksheet = workbook.Worksheets[0];
            worksheet.Range["B2"].Value = "Major Font:";
            worksheet.Range["B3"].Value = "Minor Font:";
            worksheet.Range["C2"].Value = "Trebuchet MS";
            worksheet.Range["C3"].Value = "Trebuchet MS";
            worksheet.Range["C2"].Font.ThemeFont = ThemeFont.Major;
            worksheet.Range["C3"].Font.ThemeFont = ThemeFont.Minor;

            worksheet.Range["E2:E13"].Value = new object[]
            {
                "Light1",
                "Dark1",
                "Light2",
                "Dark2",
                "Accent1",
                "Accent2",
                "Accent3",
                "Accent4",
                "Accent5",
                "Accent6",
                "Hyperlink",
                "FollowedHyperlink"
            };

            worksheet.Range["F2"].Interior.ThemeColor = ThemeColor.Light1;
            worksheet.Range["F3"].Interior.ThemeColor = ThemeColor.Dark1;
            worksheet.Range["F4"].Interior.ThemeColor = ThemeColor.Light2;
            worksheet.Range["F5"].Interior.ThemeColor = ThemeColor.Dark2;
            worksheet.Range["F6"].Interior.ThemeColor = ThemeColor.Accent1;
            worksheet.Range["F7"].Interior.ThemeColor = ThemeColor.Accent2;
            worksheet.Range["F8"].Interior.ThemeColor = ThemeColor.Accent3;
            worksheet.Range["F9"].Interior.ThemeColor = ThemeColor.Accent4;
            worksheet.Range["F10"].Interior.ThemeColor = ThemeColor.Accent5;
            worksheet.Range["F11"].Interior.ThemeColor = ThemeColor.Accent6;
            worksheet.Range["F12"].Interior.ThemeColor = ThemeColor.Hyperlink;
            worksheet.Range["F13"].Interior.ThemeColor = ThemeColor.FollowedHyperlink;

            worksheet.Range["B:F"].ColumnWidth = 15;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.ConfigureWorkbookView" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Workbook view settings.
            IWorkbookView bookView = workbook.BookView;
            bookView.DisplayVerticalScrollBar = false;
            bookView.DisplayWorkbookTabs = true;
            bookView.TabRatio = 0.5;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.CreateNewWorkbook" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Create empty workbook, contains one worksheet default.
            GrapeCity.Documents.Excel.Workbook workbookNew = new GrapeCity.Documents.Excel.Workbook();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.ImportCsvFileToWorkbook" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            Stream stream = this.GetResourceStream("xlsx\\Information.csv");

            //Open csv file stream.
            workbook.Open(stream, OpenFileFormat.Csv);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.ImportCsvFileToWorkbookWithOptions" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Open csv with more settings.
            CsvOpenOptions options = new CsvOpenOptions();
            options.SeparatorString = "-";

            //Change the path to the real file path when open.
            workbook.Open(this.CurrentDirectory + "source.csv", options);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.ImportExcelFileDataOnly" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Use XlsxOpenOptions.ImportFlags to control what you want to import from excel, ImportFlags.Data means only the data will be imported
            //Change the path to the real file path when open.
            XlsxOpenOptions options = new XlsxOpenOptions();
            options.ImportFlags = ImportFlags.Data;

            workbook.Open(this.CurrentDirectory + "source.xlsx", options);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.ImportExcelFileToWorkbook" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Change the path to the real file path when open.
            workbook.Open(this.CurrentDirectory + "source.xlsx");

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.ImportExcelFileWithoutCalculation" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //When XlsxOpenOptions.DoNotRecalculateAfterOpened means GrapeCity Documents for Excel will just read all the cached values without calculating again after
            //opening an Excel file.
            //Change the path to the real file path when open.

            XlsxOpenOptions options = new XlsxOpenOptions();
            options.DoNotRecalculateAfterOpened = true;

            workbook.Open(this.CurrentDirectory + "source.xlsx", options);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.ImportExcelFileWithPassword" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Change the path to the real file path when open.
            XlsxOpenOptions options = new XlsxOpenOptions();
            options.Password = "123456";

            workbook.Open(this.CurrentDirectory + "source.xlsx", options);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.ImportXlsmToWorkbook" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            // GcExcel supports open xlsm file
            workbook.Open(this.CurrentDirectory + "macros.xlsm");

            // Macros can be preserved after saving
            workbook.Save(this.CurrentDirectory + "macros-exported.xlsm");

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.LoadAndSaveJsonWithShapes" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            GrapeCity.Documents.Excel.Workbook workbookWithShape = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbookWithShape.Worksheets[0];

            // Add a shape in worksheet
            GrapeCity.Documents.Excel.Drawing.IShape shape = worksheet.Shapes.AddShape(GrapeCity.Documents.Excel.Drawing.AutoShapeType.Parallelogram, 1, 1, 200, 100);
            shape.Line.DashStyle = GrapeCity.Documents.Excel.Drawing.LineDashStyle.Dash;
            shape.Line.Style = GrapeCity.Documents.Excel.Drawing.LineStyle.Single;
            shape.Line.Weight = 2;
            shape.Line.Color.ObjectThemeColor = ThemeColor.Accent6;
            shape.Line.Transparency = 0.3;

            // jsonString contains shapes
            String jsonString = workbookWithShape.ToJson();

            // GcExcel can load json string contains shapes now
            workbook.FromJson(jsonString);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.SaveWorkbookToCsvFile" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
               {"Name", "City", "Birthday", "Sex", "Weight", "Height"},
               {"Bob", "NewYork", new DateTime(1968, 6, 8), "male", 80, 180},
               {"Betty", "NewYork", new DateTime(1972, 7, 3), "female", 72, 168},
               {"Gary", "NewYork", new DateTime(1964, 3, 2), "male", 71, 179},
               {"Hunk", "Washington", new DateTime(1972, 8, 8), "male", 80, 171},
               {"Cherry", "Washington", new DateTime(1986, 2, 2), "female", 58, 161},
               { "Eva", "Washington", new DateTime(1993, 2, 5), "female", 71, 180}
           };

            //Set data.
            IWorksheet sheet = workbook.Worksheets[0];
            sheet.Range["A1:F7"].Value = data;
            sheet.Tables.Add(sheet.Range["A1:F7"], true);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.SaveWorkbookToCsvFileWithOptions" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
              {"Name", "City", "Birthday", "Sex", "Weight", "Height"},
              {"Bob", "NewYork", new DateTime(1968, 6, 8), "male", 80, 180},
              {"Betty", "NewYork", new DateTime(1972, 7, 3), "female", 72, 168},
              {"Gary", "NewYork", new DateTime(1964, 3, 2), "male", 71, 179},
              {"Hunk", "Washington", new DateTime(1972, 8, 8), "male", 80, 171},
              {"Cherry", "Washington", new DateTime(1986, 2, 2), "female", 58, 161},
              { "Eva", "Washington", new DateTime(1993, 2, 5), "female", 71, 180}
          };

            //Set data.
            IWorksheet sheet = workbook.Worksheets[0];
            sheet.Range["A1:F7"].Value = data;
            sheet.Tables.Add(sheet.Range["A1:F7"], true);

            //Save csv options
            CsvSaveOptions options = new CsvSaveOptions();
            options.SeparatorString = "-";

            //Change the path to real export path when save.
            workbook.Save(this.CurrentDirectory + "dest.csv", options);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.SaveWorkbookToExcelFile" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //change the path to real export path when save.
            workbook.Save(this.CurrentDirectory + "dest.xlsx");

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.SaveWorkbookWithPassword" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Change the path to real export path when save.
            XlsxSaveOptions options = new XlsxSaveOptions();
            options.Password = "123456";

            workbook.Save(this.CurrentDirectory + "dest.xlsx", options);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Workbook.ToJsonFromJson" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //ToJson&amp;FromJson can be used in combination with spread.sheets product:http://spread.grapecity.com/spreadjs/sheets/

            //GrapeCity Documents for Excel import an excel file.
            //change the path to real source file path.
            string source = this.CurrentDirectory + "source.xlsx";
            workbook.Open(source);
            //GrapeCity Documents for Excel export to a json string.
            var jsonstr = workbook.ToJson();
            //use the json string to initialize spread.sheets product.
            //spread.sheets will show the excel file contents.

            //spread.sheets product export a json string.
            //GrapeCity Documents for Excel use the json string to initialize.
            workbook.FromJson(jsonstr);
            //GrapeCity Documents for Excel export workbook to an excel file.
            //change the path to real export file path.
            string export = this.CurrentDirectory + "export.xlsx";
            workbook.Save(export);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.AccessWorksheet" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Use sheet index to get worksheet.
            IWorksheet worksheet = workbook.Worksheets[0];

            //Use sheet name to get worksheet.
            IWorksheet worksheet1 = workbook.Worksheets["Sheet1"];
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.ActivateWorksheet" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets.Add();
            //Activate new created worksheet.
            worksheet.Activate();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.AddWorksheet" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            // Add a new worksheet to the workbook. The worksheet will be inserted into the end of the existing worksheet collection.
            workbook.Worksheets.Add();

            //Add a new worksheet to the specified position in the collection of worksheets.
            workbook.Worksheets.AddBefore(workbook.Worksheets[0]);
            workbook.Worksheets.AddAfter(workbook.Worksheets[1]);

            //Set worksheet's name.
            workbook.Worksheets[2].Name = "Product Plan";
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.ConfigureWorksheetView" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //Worksheet view settings.
            IWorksheetView sheetView = worksheet.SheetView;
            sheetView.DisplayFormulas = false;
            sheetView.DisplayRightToLeft = true;
            sheetView.GridlineColor = Color.Red;
            sheetView.Zoom = 200;

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.ConfigWorksheet" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];
            
            //Set worksheet tab color.
            worksheet.TabColor = Color.Green;

            //Set worksheet default row height.
            worksheet.StandardHeight = 20;
            //Set worksheet default column width.
            worksheet.StandardWidth = 50;

            //Split worksheet to panes.
            worksheet.SplitPanes(worksheet.Range["B3"].Row, worksheet.Range["B3"].Column);

            IWorksheet worksheet1 = workbook.Worksheets.Add();
            //Hide worksheet.
            worksheet1.Visible = Visibility.Hidden;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.DeleteWorksheet" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();
           
            IWorksheet worksheet = workbook.Worksheets.Add();

            //workbook must contain one visible worksheet at least, if delete the one visible worksheet, it will throw exception.
            worksheet.Delete();
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.ProtectWorksheet" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //protect worksheet, allow insert column.
            worksheet.Protection = true;
            worksheet.ProtectionSettings.AllowInsertingColumns = true;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.SaveWorksheetToCsvFile" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();


            object[,] data = new object[,]{
               {"Name", "City", "Birthday", "Sex", "Weight", "Height"},
               {"Bob", "NewYork", new DateTime(1968, 6, 8), "male", 80, 180},
               {"Betty", "NewYork", new DateTime(1972, 7, 3), "female", 72, 168},
               {"Gary", "NewYork", new DateTime(1964, 3, 2), "male", 71, 179},
               {"Hunk", "Washington", new DateTime(1972, 8, 8), "male", 80, 171},
               {"Cherry", "Washington", new DateTime(1986, 2, 2), "female", 58, 161},
               { "Eva", "Washington", new DateTime(1993, 2, 5), "female", 71, 180}
           };

            //Set data.
            IWorksheet sheet = workbook.Worksheets[0];
            sheet.Range["A1:F7"].Value = data;
            sheet.Tables.Add(sheet.Range["A1:F7"], true);

            //Change the path to real export path when save.
            sheet.Save(this.CurrentDirectory + "dest.csv", SaveFileFormat.Csv);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.SaveWorksheetToCsvFileWithOptions" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            object[,] data = new object[,]{
              {"Name", "City", "Birthday", "Sex", "Weight", "Height"},
              {"Bob", "NewYork", new DateTime(1968, 6, 8), "male", 80, 180},
              {"Betty", "NewYork", new DateTime(1972, 7, 3), "female", 72, 168},
              {"Gary", "NewYork", new DateTime(1964, 3, 2), "male", 71, 179},
              {"Hunk", "Washington", new DateTime(1972, 8, 8), "male", 80, 171},
              {"Cherry", "Washington", new DateTime(1986, 2, 2), "female", 58, 161},
              { "Eva", "Washington", new DateTime(1993, 2, 5), "female", 71, 180}
          };

            //Set data.
            IWorksheet sheet = workbook.Worksheets[0];
            sheet.Range["A1:F7"].Value = data;
            sheet.Tables.Add(sheet.Range["A1:F7"], true);
         
            //Save csv options
            CsvSaveOptions options = new CsvSaveOptions();
            options.SeparatorString = "-";

            //Change the path to real export path when save.
            sheet.Save(this.CurrentDirectory + "dest.csv", options);

        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.SetBackgroundImage" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Use sheet index to get worksheet.
            IWorksheet worksheet = workbook.Worksheets[0];

            Stream stream = this.GetResourceStream("logo.png");
            byte[] imageBytes = new byte[stream.Length];
            stream.Read(imageBytes, 0, imageBytes.Length);
            //Set a background image for worksheet
            worksheet.BackgroundPicture = imageBytes;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Features.Worksheets.UnprotectWorksheet" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //protect worksheet, allow insert column.
            worksheet.Protection = true;
            worksheet.ProtectionSettings.AllowInsertingColumns = true;

            //Unprotect worksheet.
            worksheet.Protection = false;
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.SpreadSheetsViewer.AgingReport" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file
            var fileStream = this.GetResourceStream("xlsx\\AgingReport.xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.SpreadSheetsViewer.AnnualFinancialReport" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file
            var fileStream = this.GetResourceStream("xlsx\\Annual financial report.xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.SpreadSheetsViewer.FamilyBudget" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file
            var fileStream = this.GetResourceStream("xlsx\\Family budget.xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.SpreadSheetsViewer.HomeInventory" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file
            var fileStream = this.GetResourceStream("xlsx\\Home inventory.xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.SpreadSheetsViewer.ProjectCostTracker" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file
            var fileStream = this.GetResourceStream("xlsx\\Project cost tracker.xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.SpreadSheetsViewer.SimplePersonalBudget" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file
            var fileStream = this.GetResourceStream("xlsx\\Simple personal budget.xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.SpreadSheetsViewer.StudentCalendar" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file
            var fileStream = this.GetResourceStream("xlsx\\Student calendar (Mon).xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.SpreadSheetsViewer.TravelExpenseReport" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file
            var fileStream = this.GetResourceStream("xlsx\\Travel expense report.xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.SpreadSheetsViewer.WebsiteFlowChart" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            //Load template file
            var fileStream = this.GetResourceStream("xlsx\\WebsiteFlowChart.xlsx");
            workbook.Open(fileStream);
        </value>
  </data>
  <data name="GrapeCity.Documents.Excel.Examples.Tutorial" xml:space="preserve">
    <value>   //create a new workbook
   var workbook = new GrapeCity.Documents.Excel.Workbook();

            IWorksheet worksheet = workbook.Worksheets[0];

            //-----------------------------Set Value------------------------------
            worksheet.Range["B3:C7"].Value = new object[,]
            {
                { "ITEM", "AMOUNT" },
                { "Income 1", 2500 },
                { "Income 2", 1000 },
                { "Income 3", 250 },
                { "Other", 250 },
            };
            worksheet.Range["B10:C23"].Value = new object[,]
            {
                { "ITEM", "AMOUNT" },
                { "Rent/mortgage", 800 },
                { "Electric", 120 },
                { "Gas", 50 },
                { "Cell phone", 45 },
                { "Groceries", 500 },
                { "Car payment", 273 },
                { "Auto expenses", 120 },
                { "Student loans", 50 },
                { "Credit cards", 100 },
                { "Auto Insurance", 78 },
                { "Personal care", 50 },
                { "Entertainment", 100 },
                { "Miscellaneous", 50 },
            };

            worksheet.Range["B2:C2"].Merge();
            worksheet.Range["B2"].Value = "MONTHLY INCOME";
            worksheet.Range["B9:C9"].Merge();
            worksheet.Range["B9"].Value = "MONTHLY EXPENSES";
            worksheet.Range["E2:G2"].Merge();
            worksheet.Range["E2"].Value = "PERCENTAGE OF INCOME SPENT";
            worksheet.Range["E5:G5"].Merge();
            worksheet.Range["E5"].Value = "SUMMARY";
            worksheet.Range["E3:F3"].Merge();
            worksheet.Range["E9"].Value = "BALANCE";
            worksheet.Range["E6"].Value = "Total Monthly Income";
            worksheet.Range["E7"].Value = "Total Monthly Expenses";


            //--------------------------------Set Height &amp; Width--------------------------------
            worksheet.StandardHeight = 26.25;
            worksheet.StandardWidth = 8.43;

            worksheet.Range["2:24"].RowHeight = 27;
            worksheet.Range["A:A"].ColumnWidth = 2.855;
            worksheet.Range["B:B"].ColumnWidth = 33.285;
            worksheet.Range["C:C"].ColumnWidth = 25.57;
            worksheet.Range["D:D"].ColumnWidth = 1;
            worksheet.Range["E:F"].ColumnWidth = 25.57;
            worksheet.Range["G:G"].ColumnWidth = 14.285;


            //------------------------------Set Table--------------------------------------
            ITable incomeTable = worksheet.Tables.Add(worksheet.Range["B3:C7"], true);
            incomeTable.Name = "tblIncome";
            incomeTable.TableStyle = workbook.TableStyles["TableStyleMedium4"];
            ITable expensesTable = worksheet.Tables.Add(worksheet.Range["B10:C23"], true);
            expensesTable.Name = "tblExpenses";
            expensesTable.TableStyle = workbook.TableStyles["TableStyleMedium4"];

            //------------------------------Set Formulas-----------------------------------
            worksheet.Names.Add("TotalMonthlyIncome", "=SUM(tblIncome[AMOUNT])");
            worksheet.Names.Add("TotalMonthlyExpenses", "=SUM(tblExpenses[AMOUNT])");
            worksheet.Range["E3"].Formula = "=TotalMonthlyExpenses";
            worksheet.Range["G3"].Formula = "=TotalMonthlyExpenses/TotalMonthlyIncome";
            worksheet.Range["G6"].Formula = "=TotalMonthlyIncome";
            worksheet.Range["G7"].Formula = "=TotalMonthlyExpenses";
            worksheet.Range["G9"].Formula = "=TotalMonthlyIncome-TotalMonthlyExpenses";

            //----------------------------Set Styles-------------------------
            IStyle currencyStyle = workbook.Styles["Currency"];
            currencyStyle.IncludeAlignment = true;
            currencyStyle.HorizontalAlignment = HorizontalAlignment.Left;
            currencyStyle.VerticalAlignment = VerticalAlignment.Bottom;
            currencyStyle.NumberFormat = "$#,##0.00";

            IStyle heading1Style = workbook.Styles["Heading 1"];
            heading1Style.IncludeAlignment = true;
            heading1Style.HorizontalAlignment = HorizontalAlignment.Center;
            heading1Style.VerticalAlignment = VerticalAlignment.Center;
            heading1Style.Font.Name = "Century Gothic";
            heading1Style.Font.Bold = true;
            heading1Style.Font.Size = 11;
            heading1Style.Font.Color = Color.White;
            heading1Style.IncludeBorder = false;
            heading1Style.IncludePatterns = true;
            heading1Style.Interior.Color = Color.FromArgb(32, 61, 64);

            IStyle percentStyle = workbook.Styles["Percent"];
            percentStyle.IncludeAlignment = true;
            percentStyle.HorizontalAlignment = HorizontalAlignment.Center;
            percentStyle.IncludeFont = true;
            percentStyle.Font.Color = Color.FromArgb(32, 61, 64);
            percentStyle.Font.Name = "Century Gothic";
            percentStyle.Font.Bold = true;
            percentStyle.Font.Size = 14;

            worksheet.SheetView.DisplayGridlines = false;
            worksheet.Range["C4:C7, C11:C23, G6:G7, G9"].Style = currencyStyle;
            worksheet.Range["B2, B9, E2, E5"].Style = heading1Style;
            worksheet.Range["G3"].Style = percentStyle;

            worksheet.Range["E6:G6"].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Medium;
            worksheet.Range["E6:G6"].Borders[BordersIndex.EdgeBottom].Color = Color.FromArgb(32, 61, 64);
            worksheet.Range["E7:G7"].Borders[BordersIndex.EdgeBottom].LineStyle = BorderLineStyle.Medium;
            worksheet.Range["E7:G7"].Borders[BordersIndex.EdgeBottom].Color = Color.FromArgb(32, 61, 64);

            worksheet.Range["E9:G9"].Interior.Color = Color.FromArgb(32, 61, 64);
            worksheet.Range["E9:G9"].HorizontalAlignment = HorizontalAlignment.Left;
            worksheet.Range["E9:G9"].VerticalAlignment = VerticalAlignment.Center;
            worksheet.Range["E9:G9"].Font.Name = "Century Gothic";
            worksheet.Range["E9:G9"].Font.Bold = true;
            worksheet.Range["E9:G9"].Font.Size = 11;
            worksheet.Range["E9:G9"].Font.Color = Color.White;
            worksheet.Range["E3:F3"].Borders.Color = Color.FromArgb(32, 61, 64);

            //----------------------------Set Conditional Format-------------------------
            IDataBar dataBar = worksheet.Range["E3"].FormatConditions.AddDatabar();
            dataBar.MinPoint.Type = ConditionValueTypes.Number;
            dataBar.MinPoint.Value = 1;
            dataBar.MaxPoint.Type = ConditionValueTypes.Number;
            dataBar.MaxPoint.Value = "=TotalMonthlyIncome";
            dataBar.BarFillType = DataBarFillType.Gradient;
            dataBar.BarColor.Color = Color.Red;
            dataBar.ShowValue = false;
            
            //--------------------------------Set Shape--------------------------------
            IShape shape = worksheet.Shapes.AddChart(ChartType.ColumnClustered, 339, 247, 316.5, 346);
            shape.Chart.ChartArea.Format.Line.Transparency = 1;
            shape.Chart.ColumnGroups[0].Overlap = 0;
            shape.Chart.ColumnGroups[0].GapWidth = 37;

            IAxis category_axis = shape.Chart.Axes.Item(AxisType.Category);
            category_axis.Format.Line.Color.RGB = Color.Black;
            category_axis.TickLabels.Font.Size = 11;
            category_axis.TickLabels.Font.Color.RGB = Color.Black;

            IAxis series_axis = shape.Chart.Axes.Item(AxisType.Value);
            series_axis.Format.Line.Weight = 1;
            series_axis.Format.Line.Color.RGB = Color.Black;
            series_axis.TickLabels.NumberFormat = "$###0";
            series_axis.TickLabels.Font.Size = 11;
            series_axis.TickLabels.Font.Color.RGB = Color.Black;

            ISeries chartSeries = shape.Chart.SeriesCollection.NewSeries();
            chartSeries.Formula = "=SERIES(\"Simple Budget\",{\"Income\",\"Expenses\"},'Sheet1'!$G$6:$G$7,1)";
            chartSeries.Points[0].Format.Fill.Color.RGB = Color.FromArgb(176, 21, 19);
            chartSeries.Points[1].Format.Fill.Color.RGB = Color.FromArgb(234, 99, 18);
            chartSeries.DataLabels.Font.Size = 11;
            chartSeries.DataLabels.Font.Color.RGB = Color.Black;
            chartSeries.DataLabels.ShowValue = true;
            chartSeries.DataLabels.Position = DataLabelPosition.OutsideEnd;
        </value>
  </data>
</root>